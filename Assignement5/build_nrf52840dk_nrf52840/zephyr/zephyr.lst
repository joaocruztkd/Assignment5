
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200021a0 	.word	0x200021a0
}
   4:	000019e5 	.word	0x000019e5
   8:	00006459 	.word	0x00006459
   c:	000019d1 	.word	0x000019d1
  10:	000019d1 	.word	0x000019d1
  14:	000019d1 	.word	0x000019d1
  18:	000019d1 	.word	0x000019d1
	...
  2c:	000017ed 	.word	0x000017ed
  30:	000019d1 	.word	0x000019d1
  34:	00000000 	.word	0x00000000
  38:	00001799 	.word	0x00001799
  3c:	00003319 	.word	0x00003319

00000040 <_irq_vector_table>:
  40:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  50:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  60:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  70:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  80:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  90:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  a0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  b0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  c0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  d0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  e0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...
  f0:	00001751 00001751 00001751 00001751     Q...Q...Q...Q...

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     184:	f080 8116 	bcs.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_IDLE_STACK_SIZE+0x274>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_IDLE_STACK_SIZE+0x278>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_IDLE_STACK_SIZE+0x2a0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_IDLE_STACK_SIZE+0x2a8>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_IDLE_STACK_SIZE+0x26e>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_IDLE_STACK_SIZE+0x29c>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_IDLE_STACK_SIZE+0x298>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2ea:	d271      	bcs.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_IDLE_STACK_SIZE+0x290>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     342:	d247      	bcs.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_IDLE_STACK_SIZE+0x294>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     36e:	d22d      	bcs.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_IDLE_STACK_SIZE+0x28c>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_IDLE_STACK_SIZE+0x280>
     38c:	d016      	beq.n	3bc <CONFIG_IDLE_STACK_SIZE+0x27c>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_IDLE_STACK_SIZE+0x268>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_IDLE_STACK_SIZE+0x24e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_IDLE_STACK_SIZE+0x238>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_IDLE_STACK_SIZE+0x20e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <thread_A_code>:

} 

/* Thread code implementation */
void thread_A_code(void *argA , void *argB, void *argC)
{
     3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int64_t fin_time=0, release_time=0;

    /* Other variables */
    long int nact = 0;
    
    printk("Thread A init (periodic)\n");
     3f8:	481f      	ldr	r0, [pc, #124]	; (478 <CONFIG_FLASH_SIZE+0x78>)

    /* Thread loop */
    while(1) {
        
        /* Do the workload */          
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     3fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 484 <CONFIG_FLASH_SIZE+0x84>
        
        ab++;
     3fe:	4f1f      	ldr	r7, [pc, #124]	; (47c <CONFIG_FLASH_SIZE+0x7c>)
        printk("Thread A set ab value to: %d \n",ab);  
     400:	f8df 9084 	ldr.w	r9, [pc, #132]	; 488 <CONFIG_FLASH_SIZE+0x88>
    printk("Thread A init (periodic)\n");
     404:	f006 f807 	bl	6416 <printk>
    release_time = k_uptime_get() + thread_A_period;
     408:	f005 ff1e 	bl	6248 <k_uptime_get>
     40c:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
     410:	f141 0500 	adc.w	r5, r1, #0
    long int nact = 0;
     414:	2600      	movs	r6, #0
        printk("\n\nThread A instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     416:	f005 ff17 	bl	6248 <k_uptime_get>
     41a:	3601      	adds	r6, #1
     41c:	4602      	mov	r2, r0
     41e:	460b      	mov	r3, r1
     420:	4640      	mov	r0, r8
     422:	4631      	mov	r1, r6
     424:	f005 fff7 	bl	6416 <printk>
        ab++;
     428:	6839      	ldr	r1, [r7, #0]
        printk("Thread A set ab value to: %d \n",ab);  
     42a:	4648      	mov	r0, r9
        ab++;
     42c:	3101      	adds	r1, #1
     42e:	6039      	str	r1, [r7, #0]
        printk("Thread A set ab value to: %d \n",ab);  
     430:	f005 fff1 	bl	6416 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     434:	4812      	ldr	r0, [pc, #72]	; (480 <CONFIG_FLASH_SIZE+0x80>)
     436:	f004 ffab 	bl	5390 <z_impl_k_sem_give>
        
        k_sem_give(&sem_ab);

       
        /* Wait for next release instant */ 
        fin_time = k_uptime_get();
     43a:	f005 ff05 	bl	6248 <k_uptime_get>
     43e:	460b      	mov	r3, r1
        if( fin_time < release_time) {
     440:	42a0      	cmp	r0, r4
     442:	eb73 0105 	sbcs.w	r1, r3, r5
        fin_time = k_uptime_get();
     446:	4602      	mov	r2, r0
        if( fin_time < release_time) {
     448:	dae5      	bge.n	416 <CONFIG_FLASH_SIZE+0x16>
            k_msleep(release_time - fin_time);
     44a:	eba4 0c02 	sub.w	ip, r4, r2
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     44e:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     452:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
     456:	f240 30e7 	movw	r0, #999	; 0x3e7
     45a:	2100      	movs	r1, #0
     45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     460:	2300      	movs	r3, #0
     462:	fbce 010c 	smlal	r0, r1, lr, ip
     466:	f7ff fe4b 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     46a:	f004 fe9f 	bl	51ac <z_impl_k_sleep>
            release_time += thread_A_period;
     46e:	f514 747a 	adds.w	r4, r4, #1000	; 0x3e8
     472:	f145 0500 	adc.w	r5, r5, #0
     476:	e7ce      	b.n	416 <CONFIG_FLASH_SIZE+0x16>
     478:	00006d98 	.word	0x00006d98
     47c:	20000000 	.word	0x20000000
     480:	200003d8 	.word	0x200003d8
     484:	00006db2 	.word	0x00006db2
     488:	00006de9 	.word	0x00006de9

0000048c <thread_B_code>:
    }

}

void thread_B_code(void *argA , void *argB, void *argC)
{
     48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     48e:	4813      	ldr	r0, [pc, #76]	; (4dc <thread_B_code+0x50>)
	return z_impl_k_sem_take(sem, timeout);
     490:	4f13      	ldr	r7, [pc, #76]	; (4e0 <thread_B_code+0x54>)
    while(1) {
        k_sem_take(&sem_ab,  K_FOREVER);
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     492:	4e14      	ldr	r6, [pc, #80]	; (4e4 <thread_B_code+0x58>)
        printk("Task B read ab value: %d\n",ab);
     494:	4d14      	ldr	r5, [pc, #80]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     496:	f005 ffbe 	bl	6416 <printk>
    long int nact = 0;
     49a:	2400      	movs	r4, #0
     49c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     4a4:	4638      	mov	r0, r7
     4a6:	f004 ffb1 	bl	540c <z_impl_k_sem_take>
        printk("Thread B instance %ld released at time: %lld (ms). \n",++nact, k_uptime_get());  
     4aa:	f005 fecd 	bl	6248 <k_uptime_get>
     4ae:	3401      	adds	r4, #1
     4b0:	4602      	mov	r2, r0
     4b2:	460b      	mov	r3, r1
     4b4:	4630      	mov	r0, r6
     4b6:	4621      	mov	r1, r4
     4b8:	f005 ffad 	bl	6416 <printk>
        printk("Task B read ab value: %d\n",ab);
     4bc:	6829      	ldr	r1, [r5, #0]
     4be:	480b      	ldr	r0, [pc, #44]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     4c0:	f005 ffa9 	bl	6416 <printk>
        bc++;
     4c4:	4b0a      	ldr	r3, [pc, #40]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
        printk("Thread B set bc value to: %d \n",bc);  
     4c6:	480b      	ldr	r0, [pc, #44]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
        bc++;
     4c8:	6819      	ldr	r1, [r3, #0]
     4ca:	3101      	adds	r1, #1
     4cc:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d \n",bc);  
     4ce:	f005 ffa2 	bl	6416 <printk>
	z_impl_k_sem_give(sem);
     4d2:	4809      	ldr	r0, [pc, #36]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     4d4:	f004 ff5c 	bl	5390 <z_impl_k_sem_give>
    while(1) {
     4d8:	e7e0      	b.n	49c <thread_B_code+0x10>
     4da:	bf00      	nop
     4dc:	00006e08 	.word	0x00006e08
     4e0:	200003d8 	.word	0x200003d8
     4e4:	00006e42 	.word	0x00006e42
     4e8:	20000000 	.word	0x20000000
     4ec:	00006e77 	.word	0x00006e77
     4f0:	20000004 	.word	0x20000004
     4f4:	00006e91 	.word	0x00006e91
     4f8:	200003e8 	.word	0x200003e8

000004fc <thread_C_code>:
        
  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
     4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Other variables */
    long int nact = 0;

    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     4fe:	480e      	ldr	r0, [pc, #56]	; (538 <thread_C_code+0x3c>)
	return z_impl_k_sem_take(sem, timeout);
     500:	4f0e      	ldr	r7, [pc, #56]	; (53c <thread_C_code+0x40>)
    while(1) {
        k_sem_take(&sem_bc, K_FOREVER);
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     502:	4e0f      	ldr	r6, [pc, #60]	; (540 <thread_C_code+0x44>)
        printk("Task C read bc value: %d\n",bc);
     504:	4d0f      	ldr	r5, [pc, #60]	; (544 <thread_C_code+0x48>)
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     506:	f005 ff86 	bl	6416 <printk>
    long int nact = 0;
     50a:	2400      	movs	r4, #0
     50c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     514:	4638      	mov	r0, r7
     516:	f004 ff79 	bl	540c <z_impl_k_sem_take>
        printk("Thread C instance %5ld released at time: %lld (ms). \n",++nact, k_uptime_get());          
     51a:	f005 fe95 	bl	6248 <k_uptime_get>
     51e:	3401      	adds	r4, #1
     520:	4602      	mov	r2, r0
     522:	460b      	mov	r3, r1
     524:	4630      	mov	r0, r6
     526:	4621      	mov	r1, r4
     528:	f005 ff75 	bl	6416 <printk>
        printk("Task C read bc value: %d\n",bc);
     52c:	6829      	ldr	r1, [r5, #0]
     52e:	4806      	ldr	r0, [pc, #24]	; (548 <thread_C_code+0x4c>)
     530:	f005 ff71 	bl	6416 <printk>
    while(1) {
     534:	e7ea      	b.n	50c <thread_C_code+0x10>
     536:	bf00      	nop
     538:	00006eb0 	.word	0x00006eb0
     53c:	200003e8 	.word	0x200003e8
     540:	00006eea 	.word	0x00006eea
     544:	20000004 	.word	0x20000004
     548:	00006f20 	.word	0x00006f20

0000054c <main>:
void main(void) {
     54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     550:	4823      	ldr	r0, [pc, #140]	; (5e0 <main+0x94>)
void main(void) {
     552:	b088      	sub	sp, #32
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
     554:	f001 fd3e 	bl	1fd4 <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
     558:	2201      	movs	r2, #1
     55a:	2100      	movs	r1, #0
     55c:	4821      	ldr	r0, [pc, #132]	; (5e4 <main+0x98>)
     55e:	f006 f9cf 	bl	6900 <z_impl_k_sem_init>
     562:	2201      	movs	r2, #1
     564:	2100      	movs	r1, #0
     566:	4820      	ldr	r0, [pc, #128]	; (5e8 <main+0x9c>)
     568:	f006 f9ca 	bl	6900 <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
     56c:	2600      	movs	r6, #0
     56e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     570:	2400      	movs	r4, #0
     572:	2501      	movs	r5, #1
     574:	e9cd 6706 	strd	r6, r7, [sp, #24]
     578:	e9cd 5403 	strd	r5, r4, [sp, #12]
     57c:	e9cd 4401 	strd	r4, r4, [sp, #4]
     580:	4b1a      	ldr	r3, [pc, #104]	; (5ec <main+0xa0>)
     582:	491b      	ldr	r1, [pc, #108]	; (5f0 <main+0xa4>)
     584:	9400      	str	r4, [sp, #0]
     586:	f44f 6280 	mov.w	r2, #1024	; 0x400
     58a:	481a      	ldr	r0, [pc, #104]	; (5f4 <main+0xa8>)
     58c:	f005 f82c 	bl	55e8 <z_impl_k_thread_create>
     590:	4b19      	ldr	r3, [pc, #100]	; (5f8 <main+0xac>)
     592:	6018      	str	r0, [r3, #0]
     594:	4b19      	ldr	r3, [pc, #100]	; (5fc <main+0xb0>)
     596:	491a      	ldr	r1, [pc, #104]	; (600 <main+0xb4>)
     598:	9400      	str	r4, [sp, #0]
     59a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     59e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     5a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
     5a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5aa:	4816      	ldr	r0, [pc, #88]	; (604 <main+0xb8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
     5ac:	f8df 8064 	ldr.w	r8, [pc, #100]	; 614 <main+0xc8>
     5b0:	f005 f81a 	bl	55e8 <z_impl_k_thread_create>
     5b4:	f8c8 0000 	str.w	r0, [r8]
     5b8:	4b13      	ldr	r3, [pc, #76]	; (608 <main+0xbc>)
     5ba:	4914      	ldr	r1, [pc, #80]	; (60c <main+0xc0>)
     5bc:	9400      	str	r4, [sp, #0]
     5be:	e9cd 6706 	strd	r6, r7, [sp, #24]
     5c2:	e9cd 5403 	strd	r5, r4, [sp, #12]
     5c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     5ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5ce:	4810      	ldr	r0, [pc, #64]	; (610 <main+0xc4>)
     5d0:	f005 f80a 	bl	55e8 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
     5d4:	f8c8 0000 	str.w	r0, [r8]
} 
     5d8:	b008      	add	sp, #32
     5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5de:	bf00      	nop
     5e0:	00006f3a 	.word	0x00006f3a
     5e4:	200003d8 	.word	0x200003d8
     5e8:	200003e8 	.word	0x200003e8
     5ec:	000003f5 	.word	0x000003f5
     5f0:	20001140 	.word	0x20001140
     5f4:	20000130 	.word	0x20000130
     5f8:	200003f8 	.word	0x200003f8
     5fc:	0000048d 	.word	0x0000048d
     600:	20001560 	.word	0x20001560
     604:	200001b0 	.word	0x200001b0
     608:	000004fd 	.word	0x000004fd
     60c:	20001980 	.word	0x20001980
     610:	20000230 	.word	0x20000230
     614:	200003fc 	.word	0x200003fc

00000618 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     61c:	b091      	sub	sp, #68	; 0x44
     61e:	468b      	mov	fp, r1
     620:	9002      	str	r0, [sp, #8]
     622:	4692      	mov	sl, r2
     624:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     626:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     628:	f89a 0000 	ldrb.w	r0, [sl]
     62c:	b908      	cbnz	r0, 632 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     62e:	4628      	mov	r0, r5
     630:	e35e      	b.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
		if (*fp != '%') {
     632:	2825      	cmp	r0, #37	; 0x25
     634:	f10a 0701 	add.w	r7, sl, #1
     638:	d007      	beq.n	64a <cbvprintf+0x32>
			OUTC('%');
     63a:	9b02      	ldr	r3, [sp, #8]
     63c:	4659      	mov	r1, fp
     63e:	4798      	blx	r3
     640:	2800      	cmp	r0, #0
     642:	f2c0 8355 	blt.w	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     646:	3501      	adds	r5, #1
			break;
     648:	e210      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		} state = {
     64a:	2218      	movs	r2, #24
     64c:	2100      	movs	r1, #0
     64e:	a80a      	add	r0, sp, #40	; 0x28
     650:	f005 ff33 	bl	64ba <memset>
	if (*sp == '%') {
     654:	f89a 3001 	ldrb.w	r3, [sl, #1]
     658:	2b25      	cmp	r3, #37	; 0x25
     65a:	d078      	beq.n	74e <cbvprintf+0x136>
     65c:	2200      	movs	r2, #0
     65e:	4694      	mov	ip, r2
     660:	4616      	mov	r6, r2
     662:	4696      	mov	lr, r2
     664:	4610      	mov	r0, r2
     666:	4639      	mov	r1, r7
		switch (*sp) {
     668:	f817 3b01 	ldrb.w	r3, [r7], #1
     66c:	2b2b      	cmp	r3, #43	; 0x2b
     66e:	f000 809d 	beq.w	7ac <cbvprintf+0x194>
     672:	f200 8094 	bhi.w	79e <cbvprintf+0x186>
     676:	2b20      	cmp	r3, #32
     678:	f000 809b 	beq.w	7b2 <cbvprintf+0x19a>
     67c:	2b23      	cmp	r3, #35	; 0x23
     67e:	f000 809a 	beq.w	7b6 <cbvprintf+0x19e>
     682:	b128      	cbz	r0, 690 <cbvprintf+0x78>
     684:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     688:	f040 0004 	orr.w	r0, r0, #4
     68c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     690:	f1be 0f00 	cmp.w	lr, #0
     694:	d005      	beq.n	6a2 <cbvprintf+0x8a>
     696:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     69a:	f040 0008 	orr.w	r0, r0, #8
     69e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6a2:	b12e      	cbz	r6, 6b0 <cbvprintf+0x98>
     6a4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6a8:	f040 0010 	orr.w	r0, r0, #16
     6ac:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6b0:	f1bc 0f00 	cmp.w	ip, #0
     6b4:	d005      	beq.n	6c2 <cbvprintf+0xaa>
     6b6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     6ba:	f040 0020 	orr.w	r0, r0, #32
     6be:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     6c2:	b12a      	cbz	r2, 6d0 <cbvprintf+0xb8>
     6c4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     6cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     6d0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     6d4:	f002 0044 	and.w	r0, r2, #68	; 0x44
     6d8:	2844      	cmp	r0, #68	; 0x44
     6da:	d103      	bne.n	6e4 <cbvprintf+0xcc>
		conv->flag_zero = false;
     6dc:	f36f 1286 	bfc	r2, #6, #1
     6e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6e4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6e8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     6ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     6ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6f2:	d17b      	bne.n	7ec <cbvprintf+0x1d4>
		conv->width_star = true;
     6f4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6f8:	f042 0201 	orr.w	r2, r2, #1
     6fc:	1c4b      	adds	r3, r1, #1
     6fe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     702:	781a      	ldrb	r2, [r3, #0]
     704:	2a2e      	cmp	r2, #46	; 0x2e
     706:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     70a:	bf0c      	ite	eq
     70c:	2101      	moveq	r1, #1
     70e:	2100      	movne	r1, #0
     710:	f361 0241 	bfi	r2, r1, #1, #1
     714:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     718:	d174      	bne.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
	if (*sp == '*') {
     71a:	785a      	ldrb	r2, [r3, #1]
     71c:	2a2a      	cmp	r2, #42	; 0x2a
     71e:	d06a      	beq.n	7f6 <cbvprintf+0x1de>
     720:	3301      	adds	r3, #1
	size_t val = 0;
     722:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     724:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     726:	4618      	mov	r0, r3
     728:	f810 2b01 	ldrb.w	r2, [r0], #1
     72c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     730:	2f09      	cmp	r7, #9
     732:	f240 808e 	bls.w	852 <CONFIG_ISR_STACK_SIZE+0x52>
	conv->unsupported |= ((conv->prec_value < 0)
     736:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     73a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     73c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     740:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     744:	f361 0241 	bfi	r2, r1, #1, #1
     748:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     74c:	e05a      	b.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		conv->specifier = *sp++;
     74e:	f10a 0702 	add.w	r7, sl, #2
     752:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     756:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     75a:	07d9      	lsls	r1, r3, #31
     75c:	f140 8149 	bpl.w	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
			width = va_arg(ap, int);
     760:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     764:	f1b9 0f00 	cmp.w	r9, #0
     768:	da07      	bge.n	77a <cbvprintf+0x162>
				conv->flag_dash = true;
     76a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     76e:	f042 0204 	orr.w	r2, r2, #4
     772:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     776:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     77a:	075a      	lsls	r2, r3, #29
     77c:	f140 8142 	bpl.w	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			int arg = va_arg(ap, int);
     780:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     784:	f1b8 0f00 	cmp.w	r8, #0
     788:	f280 8141 	bge.w	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
				conv->prec_present = false;
     78c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     790:	f36f 0341 	bfc	r3, #1, #1
     794:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     798:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     79c:	e137      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
		switch (*sp) {
     79e:	2b2d      	cmp	r3, #45	; 0x2d
     7a0:	d00c      	beq.n	7bc <cbvprintf+0x1a4>
     7a2:	2b30      	cmp	r3, #48	; 0x30
     7a4:	f47f af6d 	bne.w	682 <cbvprintf+0x6a>
			conv->flag_zero = true;
     7a8:	2201      	movs	r2, #1
	} while (loop);
     7aa:	e75c      	b.n	666 <cbvprintf+0x4e>
			conv->flag_plus = true;
     7ac:	f04f 0e01 	mov.w	lr, #1
     7b0:	e759      	b.n	666 <cbvprintf+0x4e>
			conv->flag_space = true;
     7b2:	2601      	movs	r6, #1
     7b4:	e757      	b.n	666 <cbvprintf+0x4e>
			conv->flag_hash = true;
     7b6:	f04f 0c01 	mov.w	ip, #1
     7ba:	e754      	b.n	666 <cbvprintf+0x4e>
		switch (*sp) {
     7bc:	2001      	movs	r0, #1
     7be:	e752      	b.n	666 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     7c0:	fb0c 0202 	mla	r2, ip, r2, r0
     7c4:	3a30      	subs	r2, #48	; 0x30
     7c6:	4633      	mov	r3, r6
     7c8:	461e      	mov	r6, r3
     7ca:	f816 0b01 	ldrb.w	r0, [r6], #1
     7ce:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7d2:	2f09      	cmp	r7, #9
     7d4:	d9f4      	bls.n	7c0 <cbvprintf+0x1a8>
	if (sp != wp) {
     7d6:	4299      	cmp	r1, r3
     7d8:	d093      	beq.n	702 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7da:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     7de:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     7e0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     7e2:	f362 0141 	bfi	r1, r2, #1, #1
     7e6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     7ea:	e78a      	b.n	702 <cbvprintf+0xea>
     7ec:	460b      	mov	r3, r1
	size_t val = 0;
     7ee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7f0:	f04f 0c0a 	mov.w	ip, #10
     7f4:	e7e8      	b.n	7c8 <cbvprintf+0x1b0>
		conv->prec_star = true;
     7f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7fa:	f042 0204 	orr.w	r2, r2, #4
     7fe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     802:	3302      	adds	r3, #2
	switch (*sp) {
     804:	461f      	mov	r7, r3
     806:	f817 2b01 	ldrb.w	r2, [r7], #1
     80a:	2a6c      	cmp	r2, #108	; 0x6c
     80c:	d041      	beq.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
     80e:	d825      	bhi.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     810:	2a68      	cmp	r2, #104	; 0x68
     812:	d02b      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     814:	2a6a      	cmp	r2, #106	; 0x6a
     816:	d046      	beq.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     818:	2a4c      	cmp	r2, #76	; 0x4c
     81a:	d04c      	beq.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
     81c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     81e:	f817 2b01 	ldrb.w	r2, [r7], #1
     822:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     826:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     82a:	2a78      	cmp	r2, #120	; 0x78
     82c:	f200 80d9 	bhi.w	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     830:	2a57      	cmp	r2, #87	; 0x57
     832:	d84d      	bhi.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     834:	2a41      	cmp	r2, #65	; 0x41
     836:	d003      	beq.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
     838:	3a45      	subs	r2, #69	; 0x45
     83a:	2a02      	cmp	r2, #2
     83c:	f200 80d1 	bhi.w	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
		conv->specifier_cat = SPECIFIER_FP;
     840:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     844:	2204      	movs	r2, #4
     846:	f362 0302 	bfi	r3, r2, #0, #3
     84a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     84e:	2301      	movs	r3, #1
			break;
     850:	e09e      	b.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
		val = 10U * val + *sp++ - '0';
     852:	fb06 2101 	mla	r1, r6, r1, r2
     856:	3930      	subs	r1, #48	; 0x30
     858:	4603      	mov	r3, r0
     85a:	e764      	b.n	726 <cbvprintf+0x10e>
	switch (*sp) {
     85c:	2a74      	cmp	r2, #116	; 0x74
     85e:	d026      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
     860:	2a7a      	cmp	r2, #122	; 0x7a
     862:	d1db      	bne.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		conv->length_mod = LENGTH_Z;
     864:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     868:	2206      	movs	r2, #6
     86a:	e00d      	b.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
		if (*++sp == 'h') {
     86c:	785a      	ldrb	r2, [r3, #1]
     86e:	2a68      	cmp	r2, #104	; 0x68
     870:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     874:	d106      	bne.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
			conv->length_mod = LENGTH_HH;
     876:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     878:	f361 02c6 	bfi	r2, r1, #3, #4
     87c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     880:	1c9f      	adds	r7, r3, #2
     882:	e7cc      	b.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
			conv->length_mod = LENGTH_H;
     884:	4613      	mov	r3, r2
     886:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     888:	f362 03c6 	bfi	r3, r2, #3, #4
     88c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     890:	e7c5      	b.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
		if (*++sp == 'l') {
     892:	785a      	ldrb	r2, [r3, #1]
     894:	2a6c      	cmp	r2, #108	; 0x6c
     896:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     89a:	d101      	bne.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
			conv->length_mod = LENGTH_LL;
     89c:	2104      	movs	r1, #4
     89e:	e7eb      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
			conv->length_mod = LENGTH_L;
     8a0:	4613      	mov	r3, r2
     8a2:	2203      	movs	r2, #3
     8a4:	e7f0      	b.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
		conv->length_mod = LENGTH_J;
     8a6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8aa:	2205      	movs	r2, #5
     8ac:	e7ec      	b.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
		conv->length_mod = LENGTH_T;
     8ae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8b2:	2207      	movs	r2, #7
     8b4:	e7e8      	b.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
		conv->unsupported = true;
     8b6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     8ba:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     8be:	f023 0302 	bic.w	r3, r3, #2
     8c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8c6:	f043 0302 	orr.w	r3, r3, #2
     8ca:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     8ce:	e7a6      	b.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
     8d0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     8d4:	2920      	cmp	r1, #32
     8d6:	f200 8084 	bhi.w	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     8da:	a001      	add	r0, pc, #4	; (adr r0, 8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     8dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8e0:	000009a5 	.word	0x000009a5
     8e4:	000009e3 	.word	0x000009e3
     8e8:	000009e3 	.word	0x000009e3
     8ec:	000009e3 	.word	0x000009e3
     8f0:	000009e3 	.word	0x000009e3
     8f4:	000009e3 	.word	0x000009e3
     8f8:	000009e3 	.word	0x000009e3
     8fc:	000009e3 	.word	0x000009e3
     900:	000009e3 	.word	0x000009e3
     904:	00000841 	.word	0x00000841
     908:	000009e3 	.word	0x000009e3
     90c:	000009a5 	.word	0x000009a5
     910:	00000965 	.word	0x00000965
     914:	00000841 	.word	0x00000841
     918:	00000841 	.word	0x00000841
     91c:	00000841 	.word	0x00000841
     920:	000009e3 	.word	0x000009e3
     924:	00000965 	.word	0x00000965
     928:	000009e3 	.word	0x000009e3
     92c:	000009e3 	.word	0x000009e3
     930:	000009e3 	.word	0x000009e3
     934:	000009e3 	.word	0x000009e3
     938:	000009ad 	.word	0x000009ad
     93c:	000009a5 	.word	0x000009a5
     940:	000009c9 	.word	0x000009c9
     944:	000009e3 	.word	0x000009e3
     948:	000009e3 	.word	0x000009e3
     94c:	000009c9 	.word	0x000009c9
     950:	000009e3 	.word	0x000009e3
     954:	000009a5 	.word	0x000009a5
     958:	000009e3 	.word	0x000009e3
     95c:	000009e3 	.word	0x000009e3
     960:	000009a5 	.word	0x000009a5
		conv->specifier_cat = SPECIFIER_SINT;
     964:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     968:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     96a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     96e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     972:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     974:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     978:	bf02      	ittt	eq
     97a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     97e:	f041 0101 	orreq.w	r1, r1, #1
     982:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     986:	2a63      	cmp	r2, #99	; 0x63
     988:	d131      	bne.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
			unsupported = (conv->length_mod != LENGTH_NONE);
     98a:	3b00      	subs	r3, #0
     98c:	bf18      	it	ne
     98e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     990:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     994:	f3c2 0140 	ubfx	r1, r2, #1, #1
     998:	430b      	orrs	r3, r1
     99a:	f363 0241 	bfi	r2, r3, #1, #1
     99e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     9a2:	e6d8      	b.n	756 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     9a4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     9a8:	2002      	movs	r0, #2
     9aa:	e7de      	b.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
		conv->specifier_cat = SPECIFIER_PTR;
     9ac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b0:	f003 0378 	and.w	r3, r3, #120	; 0x78
     9b4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     9b8:	2103      	movs	r1, #3
     9ba:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9be:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     9c0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c4:	4143      	adcs	r3, r0
     9c6:	e7e3      	b.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
		conv->specifier_cat = SPECIFIER_PTR;
     9c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     9cc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     9ce:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     9d2:	f361 0202 	bfi	r2, r1, #0, #3
     9d6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     9da:	bf14      	ite	ne
     9dc:	2301      	movne	r3, #1
     9de:	2300      	moveq	r3, #0
     9e0:	e7d6      	b.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
		conv->invalid = true;
     9e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9e6:	f043 0301 	orr.w	r3, r3, #1
     9ea:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     9ee:	2300      	movs	r3, #0
     9f0:	e7ce      	b.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
		} else if (conv->width_present) {
     9f2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     9f6:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9f8:	bfb4      	ite	lt
     9fa:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     9fe:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
     a02:	e6ba      	b.n	77a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a04:	079b      	lsls	r3, r3, #30
     a06:	f57f aec7 	bpl.w	798 <cbvprintf+0x180>
			precision = conv->prec_value;
     a0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     a0e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     a12:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a14:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a18:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     a1c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a20:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a22:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a26:	d136      	bne.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
			switch (length_mod) {
     a28:	1ed3      	subs	r3, r2, #3
     a2a:	2b04      	cmp	r3, #4
     a2c:	d820      	bhi.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a2e:	e8df f003 	tbb	[pc, r3]
     a32:	0703      	.short	0x0703
     a34:	1f07      	.short	0x1f07
     a36:	1f          	.byte	0x1f
     a37:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a38:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     a3c:	17c1      	asrs	r1, r0, #31
     a3e:	e004      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
					(sint_value_type)va_arg(ap, intmax_t);
     a40:	3407      	adds	r4, #7
     a42:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     a4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a4e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a52:	f013 0603 	ands.w	r6, r3, #3
     a56:	d054      	beq.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
			OUTS(sp, fp);
     a58:	9802      	ldr	r0, [sp, #8]
     a5a:	463b      	mov	r3, r7
     a5c:	4652      	mov	r2, sl
     a5e:	4659      	mov	r1, fp
     a60:	f005 fc52 	bl	6308 <outs>
     a64:	2800      	cmp	r0, #0
     a66:	f2c0 8143 	blt.w	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     a6a:	4405      	add	r5, r0
			continue;
     a6c:	46ba      	mov	sl, r7
     a6e:	e5db      	b.n	628 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a70:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     a74:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a76:	ea4f 71e0 	mov.w	r1, r0, asr #31
     a7a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a7e:	d105      	bne.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
				value->uint = (unsigned char)value->uint;
     a80:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a84:	930a      	str	r3, [sp, #40]	; 0x28
     a86:	2300      	movs	r3, #0
     a88:	930b      	str	r3, [sp, #44]	; 0x2c
     a8a:	e7e0      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
			} else if (length_mod == LENGTH_H) {
     a8c:	2a02      	cmp	r2, #2
     a8e:	d1de      	bne.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->sint = (short)value->sint;
     a90:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a94:	e7d2      	b.n	a3c <CONFIG_ISR_STACK_SIZE+0x23c>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a96:	2b02      	cmp	r3, #2
     a98:	d123      	bne.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
			switch (length_mod) {
     a9a:	1ed3      	subs	r3, r2, #3
     a9c:	2b04      	cmp	r3, #4
     a9e:	d813      	bhi.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     aa0:	e8df f003 	tbb	[pc, r3]
     aa4:	120a0a03 	.word	0x120a0a03
     aa8:	12          	.byte	0x12
     aa9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     aaa:	6820      	ldr	r0, [r4, #0]
     aac:	900a      	str	r0, [sp, #40]	; 0x28
     aae:	2100      	movs	r1, #0
     ab0:	1d23      	adds	r3, r4, #4
     ab2:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     ab4:	461c      	mov	r4, r3
     ab6:	e7ca      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(uint_value_type)va_arg(ap,
     ab8:	3407      	adds	r4, #7
     aba:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     abe:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     ac2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     ac6:	e7f5      	b.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
					(uint_value_type)va_arg(ap, size_t);
     ac8:	f854 3b04 	ldr.w	r3, [r4], #4
     acc:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ace:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     ad0:	f04f 0300 	mov.w	r3, #0
     ad4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     ad6:	d0d3      	beq.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
			} else if (length_mod == LENGTH_H) {
     ad8:	2a02      	cmp	r2, #2
     ada:	d1b8      	bne.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->uint = (unsigned short)value->uint;
     adc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ae0:	e7d0      	b.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
		} else if (specifier_cat == SPECIFIER_FP) {
     ae2:	2b04      	cmp	r3, #4
     ae4:	d107      	bne.n	af6 <CONFIG_ISR_STACK_SIZE+0x2f6>
			if (length_mod == LENGTH_UPPER_L) {
     ae6:	3407      	adds	r4, #7
     ae8:	f024 0407 	bic.w	r4, r4, #7
     aec:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     af0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     af4:	e7ab      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     af6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     af8:	bf04      	itt	eq
     afa:	f854 3b04 	ldreq.w	r3, [r4], #4
     afe:	930a      	streq	r3, [sp, #40]	; 0x28
     b00:	e7a5      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		switch (conv->specifier) {
     b02:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b06:	2878      	cmp	r0, #120	; 0x78
     b08:	d8b0      	bhi.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     b0a:	2862      	cmp	r0, #98	; 0x62
     b0c:	d822      	bhi.n	b54 <CONFIG_ISR_STACK_SIZE+0x354>
     b0e:	2825      	cmp	r0, #37	; 0x25
     b10:	f43f ad93 	beq.w	63a <cbvprintf+0x22>
     b14:	2858      	cmp	r0, #88	; 0x58
     b16:	d1a9      	bne.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b18:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b1c:	9300      	str	r3, [sp, #0]
     b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b22:	ab04      	add	r3, sp, #16
     b24:	aa0c      	add	r2, sp, #48	; 0x30
     b26:	f005 fba4 	bl	6272 <encode_uint>
     b2a:	4682      	mov	sl, r0
			if (precision >= 0) {
     b2c:	f1b8 0f00 	cmp.w	r8, #0
     b30:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     b34:	db0c      	blt.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
				conv->flag_zero = false;
     b36:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b3a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b3e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b42:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b48:	d902      	bls.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
					conv->pad0_value = precision - (int)len;
     b4a:	eba8 0303 	sub.w	r3, r8, r3
     b4e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b50:	4680      	mov	r8, r0
     b52:	e03d      	b.n	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
     b54:	3863      	subs	r0, #99	; 0x63
     b56:	2815      	cmp	r0, #21
     b58:	d888      	bhi.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     b5a:	a101      	add	r1, pc, #4	; (adr r1, b60 <CONFIG_ISR_STACK_SIZE+0x360>)
     b5c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     b60:	00000be1 	.word	0x00000be1
     b64:	00000c45 	.word	0x00000c45
     b68:	00000a6d 	.word	0x00000a6d
     b6c:	00000a6d 	.word	0x00000a6d
     b70:	00000a6d 	.word	0x00000a6d
     b74:	00000a6d 	.word	0x00000a6d
     b78:	00000c45 	.word	0x00000c45
     b7c:	00000a6d 	.word	0x00000a6d
     b80:	00000a6d 	.word	0x00000a6d
     b84:	00000a6d 	.word	0x00000a6d
     b88:	00000a6d 	.word	0x00000a6d
     b8c:	00000ca3 	.word	0x00000ca3
     b90:	00000c71 	.word	0x00000c71
     b94:	00000c75 	.word	0x00000c75
     b98:	00000a6d 	.word	0x00000a6d
     b9c:	00000a6d 	.word	0x00000a6d
     ba0:	00000bb9 	.word	0x00000bb9
     ba4:	00000a6d 	.word	0x00000a6d
     ba8:	00000c71 	.word	0x00000c71
     bac:	00000a6d 	.word	0x00000a6d
     bb0:	00000a6d 	.word	0x00000a6d
     bb4:	00000c71 	.word	0x00000c71
			if (precision >= 0) {
     bb8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     bc0:	db0a      	blt.n	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
				len = strnlen(bps, precision);
     bc2:	4641      	mov	r1, r8
     bc4:	4650      	mov	r0, sl
     bc6:	f005 fc64 	bl	6492 <strnlen>
			bpe = bps + len;
     bca:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     bce:	2600      	movs	r6, #0
		if (bps == NULL) {
     bd0:	f1ba 0f00 	cmp.w	sl, #0
     bd4:	d10c      	bne.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
     bd6:	e749      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
				len = strlen(bps);
     bd8:	4650      	mov	r0, sl
     bda:	f005 fc53 	bl	6484 <strlen>
     bde:	e7f4      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     be2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     be6:	2600      	movs	r6, #0
			bpe = buf + 1;
     be8:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     bec:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     bf0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     bf4:	b106      	cbz	r6, bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
			nj_len += 1U;
     bf6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     bf8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     bfc:	06d0      	lsls	r0, r2, #27
     bfe:	d56b      	bpl.n	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
			nj_len += 2U;
     c00:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c02:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c04:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c06:	bf48      	it	mi
     c08:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c0a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c0c:	bf48      	it	mi
     c0e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c10:	f1b9 0f00 	cmp.w	r9, #0
     c14:	dd79      	ble.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
			if (!conv->flag_dash) {
     c16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c1a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c1e:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c22:	9303      	str	r3, [sp, #12]
     c24:	0753      	lsls	r3, r2, #29
     c26:	d470      	bmi.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
				if (conv->flag_zero) {
     c28:	0650      	lsls	r0, r2, #25
     c2a:	d564      	bpl.n	cf6 <CONFIG_ISR_STACK_SIZE+0x4f6>
					if (sign != 0) {
     c2c:	b146      	cbz	r6, c40 <CONFIG_ISR_STACK_SIZE+0x440>
						OUTC(sign);
     c2e:	9b02      	ldr	r3, [sp, #8]
     c30:	4659      	mov	r1, fp
     c32:	4630      	mov	r0, r6
     c34:	4798      	blx	r3
     c36:	2800      	cmp	r0, #0
     c38:	db5a      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
						sign = 0;
     c3a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c3c:	3501      	adds	r5, #1
						sign = 0;
     c3e:	461e      	mov	r6, r3
					pad = '0';
     c40:	2330      	movs	r3, #48	; 0x30
     c42:	e059      	b.n	cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>
			if (conv->flag_plus) {
     c44:	071e      	lsls	r6, r3, #28
     c46:	d411      	bmi.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
				sign = ' ';
     c48:	f013 0610 	ands.w	r6, r3, #16
     c4c:	bf18      	it	ne
     c4e:	2620      	movne	r6, #32
			sint = value->sint;
     c50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     c54:	2a00      	cmp	r2, #0
     c56:	f173 0100 	sbcs.w	r1, r3, #0
     c5a:	f6bf af5d 	bge.w	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				value->uint = (uint_value_type)-sint;
     c5e:	4252      	negs	r2, r2
     c60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c68:	262d      	movs	r6, #45	; 0x2d
     c6a:	e755      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				sign = '+';
     c6c:	262b      	movs	r6, #43	; 0x2b
     c6e:	e7ef      	b.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
		switch (conv->specifier) {
     c70:	2600      	movs	r6, #0
     c72:	e751      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
			if (value->ptr != NULL) {
     c74:	980a      	ldr	r0, [sp, #40]	; 0x28
     c76:	b348      	cbz	r0, ccc <CONFIG_ISR_STACK_SIZE+0x4cc>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c78:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c7c:	9300      	str	r3, [sp, #0]
     c7e:	aa0c      	add	r2, sp, #48	; 0x30
     c80:	ab04      	add	r3, sp, #16
     c82:	2100      	movs	r1, #0
     c84:	f005 faf5 	bl	6272 <encode_uint>
				conv->altform_0c = true;
     c88:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c8c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c90:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c94:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c98:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c9a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     c9e:	2600      	movs	r6, #0
				goto prec_int_pad0;
     ca0:	e744      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
				store_count(conv, value->ptr, count);
     ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     ca4:	2a07      	cmp	r2, #7
     ca6:	f63f aee1 	bhi.w	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
     caa:	e8df f002 	tbb	[pc, r2]
     cae:	040d      	.short	0x040d
     cb0:	08080d06 	.word	0x08080d06
     cb4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     cb6:	701d      	strb	r5, [r3, #0]
		break;
     cb8:	e6d8      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(short *)dp = (short)count;
     cba:	801d      	strh	r5, [r3, #0]
		break;
     cbc:	e6d6      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(intmax_t *)dp = (intmax_t)count;
     cbe:	4628      	mov	r0, r5
     cc0:	17e9      	asrs	r1, r5, #31
     cc2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     cc6:	e6d1      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     cc8:	601d      	str	r5, [r3, #0]
		break;
     cca:	e6cf      	b.n	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			bpe = bps + 5;
     ccc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d94 <CONFIG_ISR_STACK_SIZE+0x594>
     cd0:	4606      	mov	r6, r0
			bps = "(nil)";
     cd2:	f1a8 0a05 	sub.w	sl, r8, #5
     cd6:	e78b      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
		} else if (conv->altform_0) {
     cd8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     cda:	bf48      	it	mi
     cdc:	3301      	addmi	r3, #1
     cde:	e790      	b.n	c02 <CONFIG_ISR_STACK_SIZE+0x402>
					OUTC(pad);
     ce0:	4618      	mov	r0, r3
     ce2:	9303      	str	r3, [sp, #12]
     ce4:	4659      	mov	r1, fp
     ce6:	9b02      	ldr	r3, [sp, #8]
     ce8:	4798      	blx	r3
     cea:	2800      	cmp	r0, #0
     cec:	9b03      	ldr	r3, [sp, #12]
     cee:	da04      	bge.n	cfa <CONFIG_ISR_STACK_SIZE+0x4fa>
#undef OUTS
#undef OUTC
}
     cf0:	b011      	add	sp, #68	; 0x44
     cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     cf6:	2320      	movs	r3, #32
     cf8:	444d      	add	r5, r9
     cfa:	464a      	mov	r2, r9
				while (width-- > 0) {
     cfc:	2a00      	cmp	r2, #0
     cfe:	eba5 0109 	sub.w	r1, r5, r9
     d02:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     d06:	dceb      	bgt.n	ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>
     d08:	460d      	mov	r5, r1
		if (sign != 0) {
     d0a:	b136      	cbz	r6, d1a <CONFIG_ISR_STACK_SIZE+0x51a>
			OUTC(sign);
     d0c:	9b02      	ldr	r3, [sp, #8]
     d0e:	4659      	mov	r1, fp
     d10:	4630      	mov	r0, r6
     d12:	4798      	blx	r3
     d14:	2800      	cmp	r0, #0
     d16:	dbeb      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d18:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d1a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d1e:	06d9      	lsls	r1, r3, #27
     d20:	d401      	bmi.n	d26 <CONFIG_ISR_STACK_SIZE+0x526>
     d22:	071a      	lsls	r2, r3, #28
     d24:	d506      	bpl.n	d34 <CONFIG_ISR_STACK_SIZE+0x534>
				OUTC('0');
     d26:	9b02      	ldr	r3, [sp, #8]
     d28:	4659      	mov	r1, fp
     d2a:	2030      	movs	r0, #48	; 0x30
     d2c:	4798      	blx	r3
     d2e:	2800      	cmp	r0, #0
     d30:	dbde      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d32:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     d34:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d38:	06db      	lsls	r3, r3, #27
     d3a:	d507      	bpl.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
				OUTC(conv->specifier);
     d3c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d40:	9b02      	ldr	r3, [sp, #8]
     d42:	4659      	mov	r1, fp
     d44:	4798      	blx	r3
     d46:	2800      	cmp	r0, #0
     d48:	dbd2      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d4a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d4c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d4e:	442e      	add	r6, r5
     d50:	1b73      	subs	r3, r6, r5
     d52:	2b00      	cmp	r3, #0
     d54:	dc16      	bgt.n	d84 <CONFIG_ISR_STACK_SIZE+0x584>
			OUTS(bps, bpe);
     d56:	9802      	ldr	r0, [sp, #8]
     d58:	4643      	mov	r3, r8
     d5a:	4652      	mov	r2, sl
     d5c:	4659      	mov	r1, fp
     d5e:	f005 fad3 	bl	6308 <outs>
     d62:	2800      	cmp	r0, #0
     d64:	dbc4      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d66:	4405      	add	r5, r0
		while (width > 0) {
     d68:	44a9      	add	r9, r5
     d6a:	eba9 0305 	sub.w	r3, r9, r5
     d6e:	2b00      	cmp	r3, #0
     d70:	f77f ae7c 	ble.w	a6c <CONFIG_ISR_STACK_SIZE+0x26c>
			OUTC(' ');
     d74:	9b02      	ldr	r3, [sp, #8]
     d76:	4659      	mov	r1, fp
     d78:	2020      	movs	r0, #32
     d7a:	4798      	blx	r3
     d7c:	2800      	cmp	r0, #0
     d7e:	dbb7      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d80:	3501      	adds	r5, #1
			--width;
     d82:	e7f2      	b.n	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
				OUTC('0');
     d84:	9b02      	ldr	r3, [sp, #8]
     d86:	4659      	mov	r1, fp
     d88:	2030      	movs	r0, #48	; 0x30
     d8a:	4798      	blx	r3
     d8c:	2800      	cmp	r0, #0
     d8e:	dbaf      	blt.n	cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>
     d90:	3501      	adds	r5, #1
     d92:	e7dd      	b.n	d50 <CONFIG_ISR_STACK_SIZE+0x550>
     d94:	00006f72 	.word	0x00006f72

00000d98 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     d98:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     d9a:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     d9c:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     d9e:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     da2:	2c03      	cmp	r4, #3
{
     da4:	4605      	mov	r5, r0
	switch (method) {
     da6:	d002      	beq.n	dae <sys_notify_finalize+0x16>
     da8:	b12c      	cbz	r4, db6 <sys_notify_finalize+0x1e>
     daa:	2000      	movs	r0, #0
     dac:	e000      	b.n	db0 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     dae:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     db0:	2300      	movs	r3, #0
     db2:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     db4:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     db6:	4a05      	ldr	r2, [pc, #20]	; (dcc <sys_notify_finalize+0x34>)
     db8:	4905      	ldr	r1, [pc, #20]	; (dd0 <sys_notify_finalize+0x38>)
     dba:	4806      	ldr	r0, [pc, #24]	; (dd4 <sys_notify_finalize+0x3c>)
     dbc:	2345      	movs	r3, #69	; 0x45
     dbe:	f005 fb2a 	bl	6416 <printk>
     dc2:	4802      	ldr	r0, [pc, #8]	; (dcc <sys_notify_finalize+0x34>)
     dc4:	2145      	movs	r1, #69	; 0x45
     dc6:	f005 fa4d 	bl	6264 <assert_post_action>
     dca:	e7ee      	b.n	daa <sys_notify_finalize+0x12>
     dcc:	00006f73 	.word	0x00006f73
     dd0:	00007091 	.word	0x00007091
     dd4:	00006f96 	.word	0x00006f96

00000dd8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
     dd8:	4801      	ldr	r0, [pc, #4]	; (de0 <nrf_cc3xx_platform_abort_init+0x8>)
     dda:	f005 b8a3 	b.w	5f24 <nrf_cc3xx_platform_set_abort>
     dde:	bf00      	nop
     de0:	00006be8 	.word	0x00006be8

00000de4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     de4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     de6:	b1d0      	cbz	r0, e1e <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     de8:	6843      	ldr	r3, [r0, #4]
     dea:	2b04      	cmp	r3, #4
     dec:	d111      	bne.n	e12 <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     dee:	2200      	movs	r2, #0
     df0:	6803      	ldr	r3, [r0, #0]
     df2:	f3bf 8f5b 	dmb	ish
     df6:	e853 1f00 	ldrex	r1, [r3]
     dfa:	2901      	cmp	r1, #1
     dfc:	d103      	bne.n	e06 <mutex_unlock_platform+0x22>
     dfe:	e843 2000 	strex	r0, r2, [r3]
     e02:	2800      	cmp	r0, #0
     e04:	d1f7      	bne.n	df6 <mutex_unlock_platform+0x12>
     e06:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
     e0a:	4807      	ldr	r0, [pc, #28]	; (e28 <mutex_unlock_platform+0x44>)
     e0c:	bf08      	it	eq
     e0e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
     e10:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e12:	b13b      	cbz	r3, e24 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
     e14:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
     e16:	f003 f91f 	bl	4058 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
     e1a:	2000      	movs	r0, #0
     e1c:	e7f8      	b.n	e10 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     e1e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     e22:	e7f5      	b.n	e10 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     e24:	4801      	ldr	r0, [pc, #4]	; (e2c <mutex_unlock_platform+0x48>)
     e26:	e7f3      	b.n	e10 <mutex_unlock_platform+0x2c>
     e28:	ffff8fe9 	.word	0xffff8fe9
     e2c:	ffff8fea 	.word	0xffff8fea

00000e30 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e30:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e32:	4604      	mov	r4, r0
     e34:	b918      	cbnz	r0, e3e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
     e36:	4b0d      	ldr	r3, [pc, #52]	; (e6c <mutex_free_platform+0x3c>)
     e38:	480d      	ldr	r0, [pc, #52]	; (e70 <mutex_free_platform+0x40>)
     e3a:	685b      	ldr	r3, [r3, #4]
     e3c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e3e:	6861      	ldr	r1, [r4, #4]
     e40:	2908      	cmp	r1, #8
     e42:	d00d      	beq.n	e60 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     e44:	f031 0304 	bics.w	r3, r1, #4
     e48:	d00a      	beq.n	e60 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
     e4a:	f011 0102 	ands.w	r1, r1, #2
     e4e:	d008      	beq.n	e62 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
     e50:	4808      	ldr	r0, [pc, #32]	; (e74 <mutex_free_platform+0x44>)
     e52:	4621      	mov	r1, r4
     e54:	f002 ff9c 	bl	3d90 <k_mem_slab_free>
        mutex->mutex = NULL;
     e58:	2300      	movs	r3, #0
     e5a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
     e5c:	2300      	movs	r3, #0
     e5e:	6063      	str	r3, [r4, #4]
}
     e60:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     e62:	6820      	ldr	r0, [r4, #0]
     e64:	2214      	movs	r2, #20
     e66:	f005 fb28 	bl	64ba <memset>
     e6a:	e7f7      	b.n	e5c <mutex_free_platform+0x2c>
     e6c:	20000068 	.word	0x20000068
     e70:	00006fb3 	.word	0x00006fb3
     e74:	20000400 	.word	0x20000400

00000e78 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     e78:	b510      	push	{r4, lr}
    if (mutex == NULL) {
     e7a:	4604      	mov	r4, r0
     e7c:	b918      	cbnz	r0, e86 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
     e7e:	4b16      	ldr	r3, [pc, #88]	; (ed8 <mutex_init_platform+0x60>)
     e80:	4816      	ldr	r0, [pc, #88]	; (edc <mutex_init_platform+0x64>)
     e82:	685b      	ldr	r3, [r3, #4]
     e84:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
     e86:	6863      	ldr	r3, [r4, #4]
     e88:	2b04      	cmp	r3, #4
     e8a:	d023      	beq.n	ed4 <mutex_init_platform+0x5c>
     e8c:	2b08      	cmp	r3, #8
     e8e:	d021      	beq.n	ed4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
     e90:	b9cb      	cbnz	r3, ec6 <mutex_init_platform+0x4e>
     e92:	6823      	ldr	r3, [r4, #0]
     e94:	b9bb      	cbnz	r3, ec6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
     e96:	4812      	ldr	r0, [pc, #72]	; (ee0 <mutex_init_platform+0x68>)
     e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ea0:	4621      	mov	r1, r4
     ea2:	f002 ff09 	bl	3cb8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
     ea6:	b908      	cbnz	r0, eac <mutex_init_platform+0x34>
     ea8:	6823      	ldr	r3, [r4, #0]
     eaa:	b91b      	cbnz	r3, eb4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
     eac:	4b0a      	ldr	r3, [pc, #40]	; (ed8 <mutex_init_platform+0x60>)
     eae:	480d      	ldr	r0, [pc, #52]	; (ee4 <mutex_init_platform+0x6c>)
     eb0:	685b      	ldr	r3, [r3, #4]
     eb2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
     eb4:	6820      	ldr	r0, [r4, #0]
     eb6:	2214      	movs	r2, #20
     eb8:	2100      	movs	r1, #0
     eba:	f005 fafe 	bl	64ba <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
     ebe:	6863      	ldr	r3, [r4, #4]
     ec0:	f043 0302 	orr.w	r3, r3, #2
     ec4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
     ec6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
     ec8:	f005 fcf3 	bl	68b2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
     ecc:	6863      	ldr	r3, [r4, #4]
     ece:	f043 0301 	orr.w	r3, r3, #1
     ed2:	6063      	str	r3, [r4, #4]
}
     ed4:	bd10      	pop	{r4, pc}
     ed6:	bf00      	nop
     ed8:	20000068 	.word	0x20000068
     edc:	00006fb3 	.word	0x00006fb3
     ee0:	20000400 	.word	0x20000400
     ee4:	00006fd9 	.word	0x00006fd9

00000ee8 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     ee8:	b508      	push	{r3, lr}
    if(mutex == NULL) {
     eea:	b308      	cbz	r0, f30 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
     eec:	6843      	ldr	r3, [r0, #4]
     eee:	2b04      	cmp	r3, #4
     ef0:	d110      	bne.n	f14 <mutex_lock_platform+0x2c>
     ef2:	2201      	movs	r2, #1
     ef4:	6803      	ldr	r3, [r0, #0]
     ef6:	f3bf 8f5b 	dmb	ish
     efa:	e853 1f00 	ldrex	r1, [r3]
     efe:	2900      	cmp	r1, #0
     f00:	d103      	bne.n	f0a <mutex_lock_platform+0x22>
     f02:	e843 2000 	strex	r0, r2, [r3]
     f06:	2800      	cmp	r0, #0
     f08:	d1f7      	bne.n	efa <mutex_lock_platform+0x12>
     f0a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
     f0e:	d10b      	bne.n	f28 <mutex_lock_platform+0x40>
     f10:	2000      	movs	r0, #0
}
     f12:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     f14:	b153      	cbz	r3, f2c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
     f16:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f20:	f002 ff9a 	bl	3e58 <z_impl_k_mutex_lock>
        if (ret == 0) {
     f24:	2800      	cmp	r0, #0
     f26:	d0f3      	beq.n	f10 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
     f28:	4803      	ldr	r0, [pc, #12]	; (f38 <mutex_lock_platform+0x50>)
     f2a:	e7f2      	b.n	f12 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     f2c:	4803      	ldr	r0, [pc, #12]	; (f3c <mutex_lock_platform+0x54>)
     f2e:	e7f0      	b.n	f12 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     f30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
     f34:	e7ed      	b.n	f12 <mutex_lock_platform+0x2a>
     f36:	bf00      	nop
     f38:	ffff8fe9 	.word	0xffff8fe9
     f3c:	ffff8fea 	.word	0xffff8fea

00000f40 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
     f40:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
     f42:	4906      	ldr	r1, [pc, #24]	; (f5c <nrf_cc3xx_platform_mutex_init+0x1c>)
     f44:	4806      	ldr	r0, [pc, #24]	; (f60 <nrf_cc3xx_platform_mutex_init+0x20>)
     f46:	2340      	movs	r3, #64	; 0x40
     f48:	2214      	movs	r2, #20
     f4a:	f005 fc96 	bl	687a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
     f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
     f52:	4904      	ldr	r1, [pc, #16]	; (f64 <nrf_cc3xx_platform_mutex_init+0x24>)
     f54:	4804      	ldr	r0, [pc, #16]	; (f68 <nrf_cc3xx_platform_mutex_init+0x28>)
     f56:	f005 b847 	b.w	5fe8 <nrf_cc3xx_platform_set_mutexes>
     f5a:	bf00      	nop
     f5c:	20000420 	.word	0x20000420
     f60:	20000400 	.word	0x20000400
     f64:	00006c00 	.word	0x00006c00
     f68:	00006bf0 	.word	0x00006bf0

00000f6c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f70:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     f74:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f76:	f019 0f08 	tst.w	r9, #8
{
     f7a:	4604      	mov	r4, r0
     f7c:	9203      	str	r2, [sp, #12]
	if (processing) {
     f7e:	d022      	beq.n	fc6 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
     f80:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f82:	bf0c      	ite	eq
     f84:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     f88:	f049 0920 	orrne.w	r9, r9, #32
     f8c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     f90:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f92:	4620      	mov	r0, r4
     f94:	f004 fc14 	bl	57c0 <z_spin_unlock_valid>
     f98:	b968      	cbnz	r0, fb6 <process_event+0x4a>
     f9a:	4a9f      	ldr	r2, [pc, #636]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
     f9c:	499f      	ldr	r1, [pc, #636]	; (121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>)
     f9e:	48a0      	ldr	r0, [pc, #640]	; (1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
     fa0:	23ac      	movs	r3, #172	; 0xac
     fa2:	f005 fa38 	bl	6416 <printk>
     fa6:	489f      	ldr	r0, [pc, #636]	; (1224 <CONFIG_FPROTECT_BLOCK_SIZE+0x224>)
     fa8:	4621      	mov	r1, r4
     faa:	f005 fa34 	bl	6416 <printk>
     fae:	489a      	ldr	r0, [pc, #616]	; (1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
     fb0:	21ac      	movs	r1, #172	; 0xac
     fb2:	f005 f957 	bl	6264 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     fb6:	9b03      	ldr	r3, [sp, #12]
     fb8:	f383 8811 	msr	BASEPRI, r3
     fbc:	f3bf 8f6f 	isb	sy
}
     fc0:	b005      	add	sp, #20
     fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     fc6:	4f98      	ldr	r7, [pc, #608]	; (1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
     fc8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fcc:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     fd0:	2902      	cmp	r1, #2
     fd2:	d106      	bne.n	fe2 <process_event+0x76>
			evt = process_recheck(mgr);
     fd4:	4620      	mov	r0, r4
     fd6:	f005 f9c3 	bl	6360 <process_recheck>
		if (evt == EVT_NOP) {
     fda:	2800      	cmp	r0, #0
     fdc:	d0d8      	beq.n	f90 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
     fde:	2801      	cmp	r0, #1
     fe0:	d168      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
			res = mgr->last_res;
     fe2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fe6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     fe8:	f1bb 0f00 	cmp.w	fp, #0
     fec:	da0a      	bge.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     fee:	2600      	movs	r6, #0
		*clients = mgr->clients;
     ff0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ff2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     ff6:	e9c4 6600 	strd	r6, r6, [r4]
     ffa:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     ffe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1000:	9601      	str	r6, [sp, #4]
    1002:	e027      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1004:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1008:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    100a:	2901      	cmp	r1, #1
    100c:	d834      	bhi.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
	list->head = NULL;
    100e:	2100      	movs	r1, #0
    1010:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1014:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1016:	6825      	ldr	r5, [r4, #0]
    1018:	b29b      	uxth	r3, r3
	list->tail = NULL;
    101a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    101e:	d10c      	bne.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1020:	428d      	cmp	r5, r1
    1022:	462a      	mov	r2, r5
    1024:	bf38      	it	cc
    1026:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1028:	b12a      	cbz	r2, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
				mgr->refs += 1U;
    102a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    102c:	6812      	ldr	r2, [r2, #0]
    102e:	3101      	adds	r1, #1
    1030:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1032:	2a00      	cmp	r2, #0
    1034:	d1f8      	bne.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1036:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    103a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    103c:	4620      	mov	r0, r4
    103e:	f005 f98f 	bl	6360 <process_recheck>
    1042:	4606      	mov	r6, r0
    1044:	2800      	cmp	r0, #0
    1046:	d0db      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1048:	8ba3      	ldrh	r3, [r4, #28]
    104a:	f043 0320 	orr.w	r3, r3, #32
    104e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1050:	2300      	movs	r3, #0
    1052:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1054:	8ba3      	ldrh	r3, [r4, #28]
    1056:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    105a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    105c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    105e:	d003      	beq.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
		if (do_monitors
    1060:	68a2      	ldr	r2, [r4, #8]
    1062:	2a00      	cmp	r2, #0
    1064:	f040 80f0 	bne.w	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
		    || !sys_slist_is_empty(&clients)
    1068:	b91d      	cbnz	r5, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
		    || (transit != NULL)) {
    106a:	9a01      	ldr	r2, [sp, #4]
    106c:	2a00      	cmp	r2, #0
    106e:	f000 8136 	beq.w	12de <CONFIG_FPROTECT_BLOCK_SIZE+0x2de>
    1072:	f04f 0900 	mov.w	r9, #0
    1076:	e0e9      	b.n	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1078:	2a04      	cmp	r2, #4
    107a:	d10e      	bne.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    107c:	f023 0307 	bic.w	r3, r3, #7
    1080:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1082:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1084:	4620      	mov	r0, r4
    1086:	f005 f96b 	bl	6360 <process_recheck>
    108a:	4605      	mov	r5, r0
    108c:	b118      	cbz	r0, 1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    108e:	f042 0220 	orr.w	r2, r2, #32
    1092:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    1094:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1096:	9501      	str	r5, [sp, #4]
    1098:	e7dc      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
		__ASSERT_NO_MSG(false);
    109a:	4640      	mov	r0, r8
    109c:	4963      	ldr	r1, [pc, #396]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    109e:	f240 131b 	movw	r3, #283	; 0x11b
    10a2:	463a      	mov	r2, r7
    10a4:	f005 f9b7 	bl	6416 <printk>
    10a8:	f240 111b 	movw	r1, #283	; 0x11b
    10ac:	4638      	mov	r0, r7
    10ae:	f005 f8d9 	bl	6264 <assert_post_action>
    10b2:	e7ef      	b.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
		} else if (evt == EVT_START) {
    10b4:	2803      	cmp	r0, #3
    10b6:	d135      	bne.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    10b8:	f1b9 0f00 	cmp.w	r9, #0
    10bc:	d00b      	beq.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
    10be:	495c      	ldr	r1, [pc, #368]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
    10c0:	4640      	mov	r0, r8
    10c2:	f44f 73ab 	mov.w	r3, #342	; 0x156
    10c6:	463a      	mov	r2, r7
    10c8:	f005 f9a5 	bl	6416 <printk>
    10cc:	f44f 71ab 	mov.w	r1, #342	; 0x156
    10d0:	4638      	mov	r0, r7
    10d2:	f005 f8c7 	bl	6264 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    10d6:	6823      	ldr	r3, [r4, #0]
    10d8:	b95b      	cbnz	r3, 10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10da:	4956      	ldr	r1, [pc, #344]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
    10dc:	4640      	mov	r0, r8
    10de:	f240 1357 	movw	r3, #343	; 0x157
    10e2:	463a      	mov	r2, r7
    10e4:	f005 f997 	bl	6416 <printk>
    10e8:	f240 1157 	movw	r1, #343	; 0x157
    10ec:	4638      	mov	r0, r7
    10ee:	f005 f8b9 	bl	6264 <assert_post_action>
			transit = mgr->transitions->start;
    10f2:	6923      	ldr	r3, [r4, #16]
    10f4:	681b      	ldr	r3, [r3, #0]
    10f6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    10f8:	b95b      	cbnz	r3, 1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
    10fa:	494f      	ldr	r1, [pc, #316]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
    10fc:	4640      	mov	r0, r8
    10fe:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1102:	463a      	mov	r2, r7
    1104:	f005 f987 	bl	6416 <printk>
    1108:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    110c:	4638      	mov	r0, r7
    110e:	f005 f8a9 	bl	6264 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1112:	8ba3      	ldrh	r3, [r4, #28]
    1114:	f023 0307 	bic.w	r3, r3, #7
    1118:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    111c:	83a3      	strh	r3, [r4, #28]
}
    111e:	2500      	movs	r5, #0
		res = 0;
    1120:	46ab      	mov	fp, r5
}
    1122:	e797      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
		} else if (evt == EVT_STOP) {
    1124:	2804      	cmp	r0, #4
    1126:	d132      	bne.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1128:	f1b9 0f02 	cmp.w	r9, #2
    112c:	d00b      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    112e:	4943      	ldr	r1, [pc, #268]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
    1130:	4640      	mov	r0, r8
    1132:	f240 135d 	movw	r3, #349	; 0x15d
    1136:	463a      	mov	r2, r7
    1138:	f005 f96d 	bl	6416 <printk>
    113c:	f240 115d 	movw	r1, #349	; 0x15d
    1140:	4638      	mov	r0, r7
    1142:	f005 f88f 	bl	6264 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1146:	8be3      	ldrh	r3, [r4, #30]
    1148:	b15b      	cbz	r3, 1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
    114a:	493d      	ldr	r1, [pc, #244]	; (1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
    114c:	4640      	mov	r0, r8
    114e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1152:	463a      	mov	r2, r7
    1154:	f005 f95f 	bl	6416 <printk>
    1158:	f44f 71af 	mov.w	r1, #350	; 0x15e
    115c:	4638      	mov	r0, r7
    115e:	f005 f881 	bl	6264 <assert_post_action>
			transit = mgr->transitions->stop;
    1162:	6923      	ldr	r3, [r4, #16]
    1164:	685b      	ldr	r3, [r3, #4]
    1166:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1168:	b95b      	cbnz	r3, 1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
    116a:	4933      	ldr	r1, [pc, #204]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
    116c:	4640      	mov	r0, r8
    116e:	f240 1361 	movw	r3, #353	; 0x161
    1172:	463a      	mov	r2, r7
    1174:	f005 f94f 	bl	6416 <printk>
    1178:	f240 1161 	movw	r1, #353	; 0x161
    117c:	4638      	mov	r0, r7
    117e:	f005 f871 	bl	6264 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1182:	8ba3      	ldrh	r3, [r4, #28]
    1184:	f023 0307 	bic.w	r3, r3, #7
    1188:	f043 0304 	orr.w	r3, r3, #4
    118c:	e7c6      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		} else if (evt == EVT_RESET) {
    118e:	2805      	cmp	r0, #5
    1190:	d132      	bne.n	11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1192:	f1b9 0f01 	cmp.w	r9, #1
    1196:	d00b      	beq.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    1198:	492a      	ldr	r1, [pc, #168]	; (1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>)
    119a:	4640      	mov	r0, r8
    119c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    11a0:	463a      	mov	r2, r7
    11a2:	f005 f938 	bl	6416 <printk>
    11a6:	f44f 71b2 	mov.w	r1, #356	; 0x164
    11aa:	4638      	mov	r0, r7
    11ac:	f005 f85a 	bl	6264 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    11b0:	6823      	ldr	r3, [r4, #0]
    11b2:	b95b      	cbnz	r3, 11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    11b4:	491f      	ldr	r1, [pc, #124]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
    11b6:	4640      	mov	r0, r8
    11b8:	f240 1365 	movw	r3, #357	; 0x165
    11bc:	463a      	mov	r2, r7
    11be:	f005 f92a 	bl	6416 <printk>
    11c2:	f240 1165 	movw	r1, #357	; 0x165
    11c6:	4638      	mov	r0, r7
    11c8:	f005 f84c 	bl	6264 <assert_post_action>
			transit = mgr->transitions->reset;
    11cc:	6923      	ldr	r3, [r4, #16]
    11ce:	689b      	ldr	r3, [r3, #8]
    11d0:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    11d2:	b95b      	cbnz	r3, 11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
    11d4:	4918      	ldr	r1, [pc, #96]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
    11d6:	4640      	mov	r0, r8
    11d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    11dc:	463a      	mov	r2, r7
    11de:	f005 f91a 	bl	6416 <printk>
    11e2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    11e6:	4638      	mov	r0, r7
    11e8:	f005 f83c 	bl	6264 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11ec:	8ba3      	ldrh	r3, [r4, #28]
    11ee:	f023 0307 	bic.w	r3, r3, #7
    11f2:	f043 0305 	orr.w	r3, r3, #5
    11f6:	e791      	b.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			__ASSERT_NO_MSG(false);
    11f8:	490c      	ldr	r1, [pc, #48]	; (122c <CONFIG_FPROTECT_BLOCK_SIZE+0x22c>)
    11fa:	f240 136b 	movw	r3, #363	; 0x16b
    11fe:	463a      	mov	r2, r7
    1200:	4640      	mov	r0, r8
    1202:	f005 f908 	bl	6416 <printk>
    1206:	2500      	movs	r5, #0
    1208:	f240 116b 	movw	r1, #363	; 0x16b
    120c:	4638      	mov	r0, r7
    120e:	f005 f829 	bl	6264 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1212:	9501      	str	r5, [sp, #4]
    1214:	e784      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1216:	bf00      	nop
    1218:	000070a9 	.word	0x000070a9
    121c:	000070cf 	.word	0x000070cf
    1220:	00006f96 	.word	0x00006f96
    1224:	000070e6 	.word	0x000070e6
    1228:	00007006 	.word	0x00007006
    122c:	00007091 	.word	0x00007091
    1230:	00007028 	.word	0x00007028
    1234:	00007034 	.word	0x00007034
    1238:	00007057 	.word	0x00007057
    123c:	0000706e 	.word	0x0000706e
    1240:	00007084 	.word	0x00007084
    1244:	00007093 	.word	0x00007093
				   && !sys_slist_is_empty(&mgr->monitors);
    1248:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    124c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1250:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1254:	83a3      	strh	r3, [r4, #28]
    1256:	4650      	mov	r0, sl
    1258:	f004 fab2 	bl	57c0 <z_spin_unlock_valid>
    125c:	b968      	cbnz	r0, 127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
    125e:	4a3a      	ldr	r2, [pc, #232]	; (1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>)
    1260:	493a      	ldr	r1, [pc, #232]	; (134c <CONFIG_FPROTECT_BLOCK_SIZE+0x34c>)
    1262:	23ac      	movs	r3, #172	; 0xac
    1264:	4640      	mov	r0, r8
    1266:	f005 f8d6 	bl	6416 <printk>
    126a:	4839      	ldr	r0, [pc, #228]	; (1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>)
    126c:	4651      	mov	r1, sl
    126e:	f005 f8d2 	bl	6416 <printk>
    1272:	4835      	ldr	r0, [pc, #212]	; (1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>)
    1274:	21ac      	movs	r1, #172	; 0xac
    1276:	f004 fff5 	bl	6264 <assert_post_action>
    127a:	9b03      	ldr	r3, [sp, #12]
    127c:	f383 8811 	msr	BASEPRI, r3
    1280:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1284:	f1b9 0f00 	cmp.w	r9, #0
    1288:	d138      	bne.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
	while (!sys_slist_is_empty(list)) {
    128a:	2d00      	cmp	r5, #0
    128c:	d14b      	bne.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
			if (transit != NULL) {
    128e:	9b01      	ldr	r3, [sp, #4]
    1290:	b113      	cbz	r3, 1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
				transit(mgr, transition_complete);
    1292:	4930      	ldr	r1, [pc, #192]	; (1354 <CONFIG_FPROTECT_BLOCK_SIZE+0x354>)
    1294:	4620      	mov	r0, r4
    1296:	4798      	blx	r3
	__asm__ volatile(
    1298:	f04f 0320 	mov.w	r3, #32
    129c:	f3ef 8b11 	mrs	fp, BASEPRI
    12a0:	f383 8812 	msr	BASEPRI_MAX, r3
    12a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12a8:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    12aa:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12ae:	f004 fa79 	bl	57a4 <z_spin_lock_valid>
    12b2:	b968      	cbnz	r0, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>
    12b4:	4a24      	ldr	r2, [pc, #144]	; (1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>)
    12b6:	4928      	ldr	r1, [pc, #160]	; (1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>)
    12b8:	2381      	movs	r3, #129	; 0x81
    12ba:	4640      	mov	r0, r8
    12bc:	f005 f8ab 	bl	6416 <printk>
    12c0:	4826      	ldr	r0, [pc, #152]	; (135c <CONFIG_FPROTECT_BLOCK_SIZE+0x35c>)
    12c2:	4651      	mov	r1, sl
    12c4:	f005 f8a7 	bl	6416 <printk>
    12c8:	481f      	ldr	r0, [pc, #124]	; (1348 <CONFIG_FPROTECT_BLOCK_SIZE+0x348>)
    12ca:	2181      	movs	r1, #129	; 0x81
    12cc:	f004 ffca 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    12d0:	4650      	mov	r0, sl
    12d2:	f004 fa85 	bl	57e0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    12d6:	8ba3      	ldrh	r3, [r4, #28]
    12d8:	f023 0308 	bic.w	r3, r3, #8
    12dc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    12de:	8ba3      	ldrh	r3, [r4, #28]
    12e0:	06da      	lsls	r2, r3, #27
    12e2:	d528      	bpl.n	1336 <CONFIG_FPROTECT_BLOCK_SIZE+0x336>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    12e4:	f023 0310 	bic.w	r3, r3, #16
    12e8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    12ea:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    12ec:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    12f0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    12f4:	2900      	cmp	r1, #0
    12f6:	f47f ae6b 	bne.w	fd0 <process_event+0x64>
out:
    12fa:	e649      	b.n	f90 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12fc:	68a1      	ldr	r1, [r4, #8]
    12fe:	2900      	cmp	r1, #0
    1300:	d0c3      	beq.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
	return node->next;
    1302:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1304:	9a02      	ldr	r2, [sp, #8]
    1306:	2b00      	cmp	r3, #0
    1308:	bf38      	it	cc
    130a:	2300      	movcc	r3, #0
    130c:	4699      	mov	r9, r3
    130e:	684b      	ldr	r3, [r1, #4]
    1310:	4620      	mov	r0, r4
    1312:	461e      	mov	r6, r3
    1314:	465b      	mov	r3, fp
    1316:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1318:	f1b9 0f00 	cmp.w	r9, #0
    131c:	d0b5      	beq.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
    131e:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1322:	4649      	mov	r1, r9
    1324:	e7ee      	b.n	1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1326:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1328:	9a02      	ldr	r2, [sp, #8]
    132a:	682d      	ldr	r5, [r5, #0]
    132c:	465b      	mov	r3, fp
    132e:	4620      	mov	r0, r4
    1330:	f005 f832 	bl	6398 <notify_one>
    1334:	e7a9      	b.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1336:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    133a:	bf1e      	ittt	ne
    133c:	f023 0320 	bicne.w	r3, r3, #32
    1340:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1342:	2102      	movne	r1, #2
    1344:	e7d2      	b.n	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
    1346:	bf00      	nop
    1348:	000070a9 	.word	0x000070a9
    134c:	000070cf 	.word	0x000070cf
    1350:	000070e6 	.word	0x000070e6
    1354:	00001361 	.word	0x00001361
    1358:	000070fb 	.word	0x000070fb
    135c:	00007110 	.word	0x00007110

00001360 <transition_complete>:
{
    1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1362:	4604      	mov	r4, r0
    1364:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1366:	f100 0614 	add.w	r6, r0, #20
    136a:	f04f 0320 	mov.w	r3, #32
    136e:	f3ef 8711 	mrs	r7, BASEPRI
    1372:	f383 8812 	msr	BASEPRI_MAX, r3
    1376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    137a:	4630      	mov	r0, r6
    137c:	f004 fa12 	bl	57a4 <z_spin_lock_valid>
    1380:	b968      	cbnz	r0, 139e <transition_complete+0x3e>
    1382:	4a0c      	ldr	r2, [pc, #48]	; (13b4 <transition_complete+0x54>)
    1384:	490c      	ldr	r1, [pc, #48]	; (13b8 <transition_complete+0x58>)
    1386:	480d      	ldr	r0, [pc, #52]	; (13bc <transition_complete+0x5c>)
    1388:	2381      	movs	r3, #129	; 0x81
    138a:	f005 f844 	bl	6416 <printk>
    138e:	480c      	ldr	r0, [pc, #48]	; (13c0 <transition_complete+0x60>)
    1390:	4631      	mov	r1, r6
    1392:	f005 f840 	bl	6416 <printk>
    1396:	4807      	ldr	r0, [pc, #28]	; (13b4 <transition_complete+0x54>)
    1398:	2181      	movs	r1, #129	; 0x81
    139a:	f004 ff63 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    139e:	4630      	mov	r0, r6
    13a0:	f004 fa1e 	bl	57e0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    13a4:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    13a6:	463a      	mov	r2, r7
    13a8:	4620      	mov	r0, r4
    13aa:	2101      	movs	r1, #1
}
    13ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    13b0:	f7ff bddc 	b.w	f6c <process_event>
    13b4:	000070a9 	.word	0x000070a9
    13b8:	000070fb 	.word	0x000070fb
    13bc:	00006f96 	.word	0x00006f96
    13c0:	00007110 	.word	0x00007110

000013c4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    13c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13c8:	4604      	mov	r4, r0
    13ca:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    13cc:	f004 fffa 	bl	63c4 <validate_args>

	if (rv < 0) {
    13d0:	1e05      	subs	r5, r0, #0
    13d2:	db5e      	blt.n	1492 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    13d4:	f104 0914 	add.w	r9, r4, #20
    13d8:	f04f 0320 	mov.w	r3, #32
    13dc:	f3ef 8a11 	mrs	sl, BASEPRI
    13e0:	f383 8812 	msr	BASEPRI_MAX, r3
    13e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    13e8:	4648      	mov	r0, r9
    13ea:	f004 f9db 	bl	57a4 <z_spin_lock_valid>
    13ee:	b968      	cbnz	r0, 140c <onoff_request+0x48>
    13f0:	4a38      	ldr	r2, [pc, #224]	; (14d4 <onoff_request+0x110>)
    13f2:	4939      	ldr	r1, [pc, #228]	; (14d8 <onoff_request+0x114>)
    13f4:	4839      	ldr	r0, [pc, #228]	; (14dc <onoff_request+0x118>)
    13f6:	2381      	movs	r3, #129	; 0x81
    13f8:	f005 f80d 	bl	6416 <printk>
    13fc:	4838      	ldr	r0, [pc, #224]	; (14e0 <onoff_request+0x11c>)
    13fe:	4649      	mov	r1, r9
    1400:	f005 f809 	bl	6416 <printk>
    1404:	4833      	ldr	r0, [pc, #204]	; (14d4 <onoff_request+0x110>)
    1406:	2181      	movs	r1, #129	; 0x81
    1408:	f004 ff2c 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    140c:	4648      	mov	r0, r9
    140e:	f004 f9e7 	bl	57e0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1412:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1414:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    1416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    141a:	428b      	cmp	r3, r1
    141c:	f002 0607 	and.w	r6, r2, #7
    1420:	d050      	beq.n	14c4 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1422:	2e02      	cmp	r6, #2
    1424:	d124      	bne.n	1470 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1426:	3301      	adds	r3, #1
    1428:	83e3      	strh	r3, [r4, #30]
	rv = state;
    142a:	4635      	mov	r5, r6
		notify = true;
    142c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1430:	4648      	mov	r0, r9
    1432:	f004 f9c5 	bl	57c0 <z_spin_unlock_valid>
    1436:	b968      	cbnz	r0, 1454 <onoff_request+0x90>
    1438:	4a26      	ldr	r2, [pc, #152]	; (14d4 <onoff_request+0x110>)
    143a:	492a      	ldr	r1, [pc, #168]	; (14e4 <onoff_request+0x120>)
    143c:	4827      	ldr	r0, [pc, #156]	; (14dc <onoff_request+0x118>)
    143e:	23ac      	movs	r3, #172	; 0xac
    1440:	f004 ffe9 	bl	6416 <printk>
    1444:	4828      	ldr	r0, [pc, #160]	; (14e8 <onoff_request+0x124>)
    1446:	4649      	mov	r1, r9
    1448:	f004 ffe5 	bl	6416 <printk>
    144c:	4821      	ldr	r0, [pc, #132]	; (14d4 <onoff_request+0x110>)
    144e:	21ac      	movs	r1, #172	; 0xac
    1450:	f004 ff08 	bl	6264 <assert_post_action>
	__asm__ volatile(
    1454:	f38a 8811 	msr	BASEPRI, sl
    1458:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    145c:	f1b8 0f00 	cmp.w	r8, #0
    1460:	d017      	beq.n	1492 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1462:	2300      	movs	r3, #0
    1464:	4632      	mov	r2, r6
    1466:	4639      	mov	r1, r7
    1468:	4620      	mov	r0, r4
    146a:	f004 ff95 	bl	6398 <notify_one>
    146e:	e010      	b.n	1492 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1470:	0793      	lsls	r3, r2, #30
    1472:	d001      	beq.n	1478 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1474:	2e06      	cmp	r6, #6
    1476:	d10f      	bne.n	1498 <onoff_request+0xd4>
	parent->next = child;
    1478:	2300      	movs	r3, #0
    147a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    147c:	6863      	ldr	r3, [r4, #4]
    147e:	b9f3      	cbnz	r3, 14be <onoff_request+0xfa>
	list->head = node;
    1480:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1484:	4635      	mov	r5, r6
    1486:	b9fe      	cbnz	r6, 14c8 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1488:	4652      	mov	r2, sl
    148a:	2102      	movs	r1, #2
    148c:	4620      	mov	r0, r4
    148e:	f7ff fd6d 	bl	f6c <process_event>
		}
	}

	return rv;
}
    1492:	4628      	mov	r0, r5
    1494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1498:	2e05      	cmp	r6, #5
    149a:	d018      	beq.n	14ce <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    149c:	2e01      	cmp	r6, #1
    149e:	d00b      	beq.n	14b8 <onoff_request+0xf4>
    14a0:	4912      	ldr	r1, [pc, #72]	; (14ec <onoff_request+0x128>)
    14a2:	480e      	ldr	r0, [pc, #56]	; (14dc <onoff_request+0x118>)
    14a4:	4a12      	ldr	r2, [pc, #72]	; (14f0 <onoff_request+0x12c>)
    14a6:	f240 13c9 	movw	r3, #457	; 0x1c9
    14aa:	f004 ffb4 	bl	6416 <printk>
    14ae:	4810      	ldr	r0, [pc, #64]	; (14f0 <onoff_request+0x12c>)
    14b0:	f240 11c9 	movw	r1, #457	; 0x1c9
    14b4:	f004 fed6 	bl	6264 <assert_post_action>
		rv = -EIO;
    14b8:	f06f 0504 	mvn.w	r5, #4
    14bc:	e004      	b.n	14c8 <onoff_request+0x104>
	parent->next = child;
    14be:	601f      	str	r7, [r3, #0]
	list->tail = node;
    14c0:	6067      	str	r7, [r4, #4]
}
    14c2:	e7df      	b.n	1484 <onoff_request+0xc0>
		rv = -EAGAIN;
    14c4:	f06f 050a 	mvn.w	r5, #10
    14c8:	f04f 0800 	mov.w	r8, #0
    14cc:	e7b0      	b.n	1430 <onoff_request+0x6c>
		rv = -ENOTSUP;
    14ce:	f06f 0585 	mvn.w	r5, #133	; 0x85
    14d2:	e7f9      	b.n	14c8 <onoff_request+0x104>
    14d4:	000070a9 	.word	0x000070a9
    14d8:	000070fb 	.word	0x000070fb
    14dc:	00006f96 	.word	0x00006f96
    14e0:	00007110 	.word	0x00007110
    14e4:	000070cf 	.word	0x000070cf
    14e8:	000070e6 	.word	0x000070e6
    14ec:	00007093 	.word	0x00007093
    14f0:	00007006 	.word	0x00007006

000014f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    14f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14f6:	4605      	mov	r5, r0
	__asm__ volatile(
    14f8:	f04f 0320 	mov.w	r3, #32
    14fc:	f3ef 8611 	mrs	r6, BASEPRI
    1500:	f383 8812 	msr	BASEPRI_MAX, r3
    1504:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1508:	481e      	ldr	r0, [pc, #120]	; (1584 <pm_state_notify+0x90>)
    150a:	f004 f94b 	bl	57a4 <z_spin_lock_valid>
    150e:	b968      	cbnz	r0, 152c <pm_state_notify+0x38>
    1510:	4a1d      	ldr	r2, [pc, #116]	; (1588 <pm_state_notify+0x94>)
    1512:	491e      	ldr	r1, [pc, #120]	; (158c <pm_state_notify+0x98>)
    1514:	481e      	ldr	r0, [pc, #120]	; (1590 <pm_state_notify+0x9c>)
    1516:	2381      	movs	r3, #129	; 0x81
    1518:	f004 ff7d 	bl	6416 <printk>
    151c:	4919      	ldr	r1, [pc, #100]	; (1584 <pm_state_notify+0x90>)
    151e:	481d      	ldr	r0, [pc, #116]	; (1594 <pm_state_notify+0xa0>)
    1520:	f004 ff79 	bl	6416 <printk>
    1524:	4818      	ldr	r0, [pc, #96]	; (1588 <pm_state_notify+0x94>)
    1526:	2181      	movs	r1, #129	; 0x81
    1528:	f004 fe9c 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    152c:	4815      	ldr	r0, [pc, #84]	; (1584 <pm_state_notify+0x90>)
    152e:	f004 f957 	bl	57e0 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1532:	4b19      	ldr	r3, [pc, #100]	; (1598 <pm_state_notify+0xa4>)
    1534:	681c      	ldr	r4, [r3, #0]
    1536:	2c00      	cmp	r4, #0
    1538:	bf38      	it	cc
    153a:	2400      	movcc	r4, #0
    153c:	b15c      	cbz	r4, 1556 <pm_state_notify+0x62>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    153e:	4f17      	ldr	r7, [pc, #92]	; (159c <pm_state_notify+0xa8>)
			callback = notifier->state_exit;
    1540:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1544:	2d00      	cmp	r5, #0
    1546:	bf08      	it	eq
    1548:	4613      	moveq	r3, r2
		if (callback) {
    154a:	b10b      	cbz	r3, 1550 <pm_state_notify+0x5c>
			callback(z_power_state.state);
    154c:	7838      	ldrb	r0, [r7, #0]
    154e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1550:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1552:	2c00      	cmp	r4, #0
    1554:	d1f4      	bne.n	1540 <pm_state_notify+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1556:	480b      	ldr	r0, [pc, #44]	; (1584 <pm_state_notify+0x90>)
    1558:	f004 f932 	bl	57c0 <z_spin_unlock_valid>
    155c:	b968      	cbnz	r0, 157a <pm_state_notify+0x86>
    155e:	4a0a      	ldr	r2, [pc, #40]	; (1588 <pm_state_notify+0x94>)
    1560:	490f      	ldr	r1, [pc, #60]	; (15a0 <pm_state_notify+0xac>)
    1562:	480b      	ldr	r0, [pc, #44]	; (1590 <pm_state_notify+0x9c>)
    1564:	23ac      	movs	r3, #172	; 0xac
    1566:	f004 ff56 	bl	6416 <printk>
    156a:	4906      	ldr	r1, [pc, #24]	; (1584 <pm_state_notify+0x90>)
    156c:	480d      	ldr	r0, [pc, #52]	; (15a4 <pm_state_notify+0xb0>)
    156e:	f004 ff52 	bl	6416 <printk>
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <pm_state_notify+0x94>)
    1574:	21ac      	movs	r1, #172	; 0xac
    1576:	f004 fe75 	bl	6264 <assert_post_action>
	__asm__ volatile(
    157a:	f386 8811 	msr	BASEPRI, r6
    157e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1584:	20000920 	.word	0x20000920
    1588:	000070a9 	.word	0x000070a9
    158c:	000070fb 	.word	0x000070fb
    1590:	00006f96 	.word	0x00006f96
    1594:	00007110 	.word	0x00007110
    1598:	20000924 	.word	0x20000924
    159c:	2000092c 	.word	0x2000092c
    15a0:	000070cf 	.word	0x000070cf
    15a4:	000070e6 	.word	0x000070e6

000015a8 <pm_system_resume>:

void pm_system_resume(void)
{
    15a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    15aa:	4b0f      	ldr	r3, [pc, #60]	; (15e8 <pm_system_resume+0x40>)
    15ac:	681a      	ldr	r2, [r3, #0]
    15ae:	b9ba      	cbnz	r2, 15e0 <pm_system_resume+0x38>
		post_ops_done = 1;
    15b0:	2201      	movs	r2, #1
    15b2:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    15b4:	4a0d      	ldr	r2, [pc, #52]	; (15ec <pm_system_resume+0x44>)
    15b6:	ca07      	ldmia	r2, {r0, r1, r2}
    15b8:	ab01      	add	r3, sp, #4
    15ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    15be:	4a0c      	ldr	r2, [pc, #48]	; (15f0 <pm_system_resume+0x48>)
    15c0:	b14a      	cbz	r2, 15d6 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    15c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    15c6:	f004 ff94 	bl	64f2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    15ca:	2000      	movs	r0, #0
	}
}
    15cc:	b005      	add	sp, #20
    15ce:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    15d2:	f7ff bf8f 	b.w	14f4 <pm_state_notify>
    15d6:	f382 8811 	msr	BASEPRI, r2
    15da:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15de:	e7f4      	b.n	15ca <pm_system_resume+0x22>
}
    15e0:	b005      	add	sp, #20
    15e2:	f85d fb04 	ldr.w	pc, [sp], #4
    15e6:	bf00      	nop
    15e8:	20000028 	.word	0x20000028
    15ec:	2000092c 	.word	0x2000092c
    15f0:	000064f3 	.word	0x000064f3

000015f4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    15f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15f6:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    15f8:	466e      	mov	r6, sp
    15fa:	4601      	mov	r1, r0
{
    15fc:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    15fe:	4630      	mov	r0, r6
    1600:	f004 ff02 	bl	6408 <pm_policy_next_state>
    1604:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1608:	4c1f      	ldr	r4, [pc, #124]	; (1688 <pm_system_suspend+0x94>)
    160a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    160e:	7820      	ldrb	r0, [r4, #0]
    1610:	2800      	cmp	r0, #0
    1612:	d037      	beq.n	1684 <pm_system_suspend+0x90>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    1614:	4b1d      	ldr	r3, [pc, #116]	; (168c <pm_system_suspend+0x98>)
    1616:	2000      	movs	r0, #0
    1618:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    161a:	1c6b      	adds	r3, r5, #1
    161c:	d01d      	beq.n	165a <pm_system_suspend+0x66>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    161e:	4291      	cmp	r1, r2
    1620:	d20c      	bcs.n	163c <pm_system_suspend+0x48>
    1622:	491b      	ldr	r1, [pc, #108]	; (1690 <pm_system_suspend+0x9c>)
    1624:	4a1b      	ldr	r2, [pc, #108]	; (1694 <pm_system_suspend+0xa0>)
    1626:	481c      	ldr	r0, [pc, #112]	; (1698 <pm_system_suspend+0xa4>)
    1628:	23ca      	movs	r3, #202	; 0xca
    162a:	f004 fef4 	bl	6416 <printk>
    162e:	481b      	ldr	r0, [pc, #108]	; (169c <pm_system_suspend+0xa8>)
    1630:	f004 fef1 	bl	6416 <printk>
    1634:	4817      	ldr	r0, [pc, #92]	; (1694 <pm_system_suspend+0xa0>)
    1636:	21ca      	movs	r1, #202	; 0xca
    1638:	f004 fe14 	bl	6264 <assert_post_action>
			return (uint32_t)((t * to_hz + off) / from_hz);
    163c:	68a7      	ldr	r7, [r4, #8]
    163e:	4818      	ldr	r0, [pc, #96]	; (16a0 <pm_system_suspend+0xac>)
    1640:	4a18      	ldr	r2, [pc, #96]	; (16a4 <pm_system_suspend+0xb0>)
    1642:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    1646:	2100      	movs	r1, #0
    1648:	2300      	movs	r3, #0
    164a:	fbe6 0107 	umlal	r0, r1, r6, r7
    164e:	f7fe fd57 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1652:	2101      	movs	r1, #1
    1654:	1a28      	subs	r0, r5, r0
    1656:	f004 fa85 	bl	5b64 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    165a:	f002 fe85 	bl	4368 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    165e:	2001      	movs	r0, #1
    1660:	f7ff ff48 	bl	14f4 <pm_state_notify>
	pm_state_set(z_power_state);
    1664:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1668:	ab05      	add	r3, sp, #20
    166a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    166e:	4a0e      	ldr	r2, [pc, #56]	; (16a8 <pm_system_suspend+0xb4>)
    1670:	b11a      	cbz	r2, 167a <pm_system_suspend+0x86>
		pm_power_state_set(info);
    1672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1676:	f004 ff29 	bl	64cc <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    167a:	f7ff ff95 	bl	15a8 <pm_system_resume>
	k_sched_unlock();
    167e:	f003 fb6b 	bl	4d58 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    1682:	7820      	ldrb	r0, [r4, #0]
}
    1684:	b009      	add	sp, #36	; 0x24
    1686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1688:	2000092c 	.word	0x2000092c
    168c:	20000028 	.word	0x20000028
    1690:	0000719e 	.word	0x0000719e
    1694:	00007128 	.word	0x00007128
    1698:	00006f96 	.word	0x00006f96
    169c:	000071de 	.word	0x000071de
    16a0:	000f423f 	.word	0x000f423f
    16a4:	000f4240 	.word	0x000f4240
    16a8:	000064cd 	.word	0x000064cd

000016ac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    16ac:	680b      	ldr	r3, [r1, #0]
    16ae:	3301      	adds	r3, #1
    16b0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    16b2:	4b01      	ldr	r3, [pc, #4]	; (16b8 <char_out+0xc>)
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	4718      	bx	r3
    16b8:	2000002c 	.word	0x2000002c

000016bc <__printk_hook_install>:
	_char_out = fn;
    16bc:	4b01      	ldr	r3, [pc, #4]	; (16c4 <__printk_hook_install+0x8>)
    16be:	6018      	str	r0, [r3, #0]
}
    16c0:	4770      	bx	lr
    16c2:	bf00      	nop
    16c4:	2000002c 	.word	0x2000002c

000016c8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    16c8:	b507      	push	{r0, r1, r2, lr}
    16ca:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    16cc:	2100      	movs	r1, #0
{
    16ce:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    16d0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    16d2:	4803      	ldr	r0, [pc, #12]	; (16e0 <vprintk+0x18>)
    16d4:	a901      	add	r1, sp, #4
    16d6:	f7fe ff9f 	bl	618 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    16da:	b003      	add	sp, #12
    16dc:	f85d fb04 	ldr.w	pc, [sp], #4
    16e0:	000016ad 	.word	0x000016ad

000016e4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    16e4:	b508      	push	{r3, lr}
    16e6:	4604      	mov	r4, r0
	__asm__ volatile(
    16e8:	f04f 0220 	mov.w	r2, #32
    16ec:	f3ef 8311 	mrs	r3, BASEPRI
    16f0:	f382 8812 	msr	BASEPRI_MAX, r2
    16f4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    16f8:	f005 f893 	bl	6822 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    16fc:	4620      	mov	r0, r4
    16fe:	f000 fca5 	bl	204c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1702:	4803      	ldr	r0, [pc, #12]	; (1710 <sys_reboot+0x2c>)
    1704:	f004 fe87 	bl	6416 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1708:	f000 f80a 	bl	1720 <arch_cpu_idle>
    170c:	e7fc      	b.n	1708 <sys_reboot+0x24>
    170e:	bf00      	nop
    1710:	00007203 	.word	0x00007203

00001714 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1714:	4901      	ldr	r1, [pc, #4]	; (171c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1716:	2210      	movs	r2, #16
	str	r2, [r1]
    1718:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    171a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    171c:	e000ed10 	.word	0xe000ed10

00001720 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1720:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1722:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1724:	f380 8811 	msr	BASEPRI, r0
	isb
    1728:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    172c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1730:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1732:	b662      	cpsie	i
	isb
    1734:	f3bf 8f6f 	isb	sy

	bx	lr
    1738:	4770      	bx	lr
    173a:	bf00      	nop

0000173c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    173c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    173e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1740:	f381 8811 	msr	BASEPRI, r1

	wfe
    1744:	bf20      	wfe

	msr	BASEPRI, r0
    1746:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    174a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    174c:	4770      	bx	lr
    174e:	bf00      	nop

00001750 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1750:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1752:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1754:	4a0b      	ldr	r2, [pc, #44]	; (1784 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1756:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1758:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    175a:	bf1e      	ittt	ne
	movne	r1, #0
    175c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    175e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1760:	f005 f884 	blne	686c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1764:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1766:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    176a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    176e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1772:	4905      	ldr	r1, [pc, #20]	; (1788 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1774:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1776:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1778:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    177a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    177e:	4903      	ldr	r1, [pc, #12]	; (178c <_isr_wrapper+0x3c>)
	bx r1
    1780:	4708      	bx	r1
    1782:	0000      	.short	0x0000
	ldr r2, =_kernel
    1784:	20000b10 	.word	0x20000b10
	ldr r1, =_sw_isr_table
    1788:	00006a38 	.word	0x00006a38
	ldr r1, =z_arm_int_exit
    178c:	000019b5 	.word	0x000019b5

00001790 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1790:	bf30      	wfi
    b z_SysNmiOnReset
    1792:	f7ff bffd 	b.w	1790 <z_SysNmiOnReset>
    1796:	bf00      	nop

00001798 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1798:	4912      	ldr	r1, [pc, #72]	; (17e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    179a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    179c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    17a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    17a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    17a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    17ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    17b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    17b4:	4f0c      	ldr	r7, [pc, #48]	; (17e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    17b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    17ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    17bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    17be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    17c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    17c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    17c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    17c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    17ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    17cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    17ce:	f000 fae7 	bl	1da0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    17d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    17d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    17da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    17de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    17e2:	4770      	bx	lr
    ldr r1, =_kernel
    17e4:	20000b10 	.word	0x20000b10
    ldr v4, =_SCS_ICSR
    17e8:	e000ed04 	.word	0xe000ed04

000017ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    17ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    17f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    17f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    17f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    17fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    17fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1800:	2902      	cmp	r1, #2
    beq _oops
    1802:	d0ff      	beq.n	1804 <_oops>

00001804 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1804:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1806:	f004 fe1f 	bl	6448 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    180a:	bd01      	pop	{r0, pc}

0000180c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    180c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    180e:	2b00      	cmp	r3, #0
    1810:	db08      	blt.n	1824 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1812:	2201      	movs	r2, #1
    1814:	f000 001f 	and.w	r0, r0, #31
    1818:	fa02 f000 	lsl.w	r0, r2, r0
    181c:	095b      	lsrs	r3, r3, #5
    181e:	4a02      	ldr	r2, [pc, #8]	; (1828 <arch_irq_enable+0x1c>)
    1820:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1824:	4770      	bx	lr
    1826:	bf00      	nop
    1828:	e000e100 	.word	0xe000e100

0000182c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    182c:	4b05      	ldr	r3, [pc, #20]	; (1844 <arch_irq_is_enabled+0x18>)
    182e:	0942      	lsrs	r2, r0, #5
    1830:	f000 001f 	and.w	r0, r0, #31
    1834:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1838:	2301      	movs	r3, #1
    183a:	fa03 f000 	lsl.w	r0, r3, r0
}
    183e:	4010      	ands	r0, r2
    1840:	4770      	bx	lr
    1842:	bf00      	nop
    1844:	e000e100 	.word	0xe000e100

00001848 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1848:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    184a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    184c:	2c07      	cmp	r4, #7
{
    184e:	4605      	mov	r5, r0
    1850:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1852:	d90f      	bls.n	1874 <z_arm_irq_priority_set+0x2c>
    1854:	4a11      	ldr	r2, [pc, #68]	; (189c <z_arm_irq_priority_set+0x54>)
    1856:	4912      	ldr	r1, [pc, #72]	; (18a0 <z_arm_irq_priority_set+0x58>)
    1858:	4812      	ldr	r0, [pc, #72]	; (18a4 <z_arm_irq_priority_set+0x5c>)
    185a:	2358      	movs	r3, #88	; 0x58
    185c:	f004 fddb 	bl	6416 <printk>
    1860:	4811      	ldr	r0, [pc, #68]	; (18a8 <z_arm_irq_priority_set+0x60>)
    1862:	4631      	mov	r1, r6
    1864:	2307      	movs	r3, #7
    1866:	462a      	mov	r2, r5
    1868:	f004 fdd5 	bl	6416 <printk>
    186c:	480b      	ldr	r0, [pc, #44]	; (189c <z_arm_irq_priority_set+0x54>)
    186e:	2158      	movs	r1, #88	; 0x58
    1870:	f004 fcf8 	bl	6264 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1874:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1876:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1878:	bfac      	ite	ge
    187a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    187e:	4b0b      	ldrlt	r3, [pc, #44]	; (18ac <z_arm_irq_priority_set+0x64>)
    1880:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1884:	bfb8      	it	lt
    1886:	f005 050f 	andlt.w	r5, r5, #15
    188a:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    188c:	bfaa      	itet	ge
    188e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1892:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1894:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    1898:	bd70      	pop	{r4, r5, r6, pc}
    189a:	bf00      	nop
    189c:	0000722c 	.word	0x0000722c
    18a0:	00007262 	.word	0x00007262
    18a4:	00006f96 	.word	0x00006f96
    18a8:	0000727d 	.word	0x0000727d
    18ac:	e000ed14 	.word	0xe000ed14

000018b0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    18b0:	4a0b      	ldr	r2, [pc, #44]	; (18e0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    18b2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    18b4:	4b0b      	ldr	r3, [pc, #44]	; (18e4 <z_arm_prep_c+0x34>)
    18b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    18ba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    18bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    18c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    18c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    18cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    18d0:	f002 f93a 	bl	3b48 <z_bss_zero>
	z_data_copy();
    18d4:	f004 fab2 	bl	5e3c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    18d8:	f000 f9f6 	bl	1cc8 <z_arm_interrupt_init>
	z_cstart();
    18dc:	f002 f93e 	bl	3b5c <z_cstart>
    18e0:	00000000 	.word	0x00000000
    18e4:	e000ed00 	.word	0xe000ed00

000018e8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    18e8:	4a09      	ldr	r2, [pc, #36]	; (1910 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    18ea:	490a      	ldr	r1, [pc, #40]	; (1914 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    18ec:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    18ee:	6809      	ldr	r1, [r1, #0]
    18f0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18f2:	4909      	ldr	r1, [pc, #36]	; (1918 <arch_swap+0x30>)
	_current->arch.basepri = key;
    18f4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18f6:	684b      	ldr	r3, [r1, #4]
    18f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    18fc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    18fe:	2300      	movs	r3, #0
    1900:	f383 8811 	msr	BASEPRI, r3
    1904:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1908:	6893      	ldr	r3, [r2, #8]
}
    190a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    190c:	4770      	bx	lr
    190e:	bf00      	nop
    1910:	20000b10 	.word	0x20000b10
    1914:	00006d0c 	.word	0x00006d0c
    1918:	e000ed00 	.word	0xe000ed00

0000191c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    191c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1920:	9b00      	ldr	r3, [sp, #0]
    1922:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1926:	490a      	ldr	r1, [pc, #40]	; (1950 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1928:	9b01      	ldr	r3, [sp, #4]
    192a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    192e:	9b02      	ldr	r3, [sp, #8]
    1930:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1934:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    193c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1940:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1944:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1946:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1948:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    194a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    194c:	4770      	bx	lr
    194e:	bf00      	nop
    1950:	00006431 	.word	0x00006431

00001954 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1954:	4a0b      	ldr	r2, [pc, #44]	; (1984 <z_check_thread_stack_fail+0x30>)
{
    1956:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1958:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    195a:	b190      	cbz	r0, 1982 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    195c:	f113 0f16 	cmn.w	r3, #22
    1960:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1962:	d005      	beq.n	1970 <z_check_thread_stack_fail+0x1c>
    1964:	f1a0 0220 	sub.w	r2, r0, #32
    1968:	429a      	cmp	r2, r3
    196a:	d806      	bhi.n	197a <z_check_thread_stack_fail+0x26>
    196c:	4283      	cmp	r3, r0
    196e:	d204      	bcs.n	197a <z_check_thread_stack_fail+0x26>
    1970:	4281      	cmp	r1, r0
    1972:	bf2c      	ite	cs
    1974:	2100      	movcs	r1, #0
    1976:	2101      	movcc	r1, #1
    1978:	e000      	b.n	197c <z_check_thread_stack_fail+0x28>
    197a:	2100      	movs	r1, #0
    197c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    197e:	bf08      	it	eq
    1980:	2000      	moveq	r0, #0
}
    1982:	4770      	bx	lr
    1984:	20000b10 	.word	0x20000b10

00001988 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1988:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    198a:	4b09      	ldr	r3, [pc, #36]	; (19b0 <arch_switch_to_main_thread+0x28>)
    198c:	6098      	str	r0, [r3, #8]
{
    198e:	460d      	mov	r5, r1
    1990:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1992:	f000 fa05 	bl	1da0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1996:	4620      	mov	r0, r4
    1998:	f385 8809 	msr	PSP, r5
    199c:	2100      	movs	r1, #0
    199e:	b663      	cpsie	if
    19a0:	f381 8811 	msr	BASEPRI, r1
    19a4:	f3bf 8f6f 	isb	sy
    19a8:	2200      	movs	r2, #0
    19aa:	2300      	movs	r3, #0
    19ac:	f004 fd40 	bl	6430 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    19b0:	20000b10 	.word	0x20000b10

000019b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    19b4:	4b04      	ldr	r3, [pc, #16]	; (19c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    19b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    19b8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    19ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    19bc:	d003      	beq.n	19c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    19be:	4903      	ldr	r1, [pc, #12]	; (19cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    19c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    19c4:	600a      	str	r2, [r1, #0]

000019c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    19c6:	4770      	bx	lr
	ldr r3, =_kernel
    19c8:	20000b10 	.word	0x20000b10
	ldr r1, =_SCS_ICSR
    19cc:	e000ed04 	.word	0xe000ed04

000019d0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    19d0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    19d4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    19d8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    19da:	4672      	mov	r2, lr
	bl z_arm_fault
    19dc:	f000 f8ae 	bl	1b3c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    19e0:	bd01      	pop	{r0, pc}
    19e2:	bf00      	nop

000019e4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    19e4:	2000      	movs	r0, #0
    msr CONTROL, r0
    19e6:	f380 8814 	msr	CONTROL, r0
    isb
    19ea:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    19ee:	f004 ffa5 	bl	693c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    19f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    19f4:	490d      	ldr	r1, [pc, #52]	; (1a2c <__start+0x48>)
    str r0, [r1]
    19f6:	6008      	str	r0, [r1, #0]
    dsb
    19f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19fc:	480c      	ldr	r0, [pc, #48]	; (1a30 <__start+0x4c>)
    msr msp, r0
    19fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a02:	f000 f97d 	bl	1d00 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a06:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a08:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a0c:	4809      	ldr	r0, [pc, #36]	; (1a34 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a0e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    1a12:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a14:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a18:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a1c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a1e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a20:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a24:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a28:	f7ff ff42 	bl	18b0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1a2c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a30:	200021a0 	.word	0x200021a0
    ldr r0, =z_interrupt_stacks
    1a34:	20002320 	.word	0x20002320

00001a38 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a38:	4b23      	ldr	r3, [pc, #140]	; (1ac8 <mem_manage_fault+0x90>)
{
    1a3a:	b570      	push	{r4, r5, r6, lr}
    1a3c:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1a3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1a44:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1a46:	0790      	lsls	r0, r2, #30
    1a48:	d51a      	bpl.n	1a80 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1a4a:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a4e:	0612      	lsls	r2, r2, #24
    1a50:	d516      	bpl.n	1a80 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1a52:	b119      	cbz	r1, 1a5c <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1a5a:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a62:	06d6      	lsls	r6, r2, #27
    1a64:	d40f      	bmi.n	1a86 <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1a68:	0799      	lsls	r1, r3, #30
    1a6a:	d40c      	bmi.n	1a86 <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1a6c:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1a6e:	4a16      	ldr	r2, [pc, #88]	; (1ac8 <mem_manage_fault+0x90>)
    1a70:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a72:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1a76:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1a78:	2300      	movs	r3, #0
    1a7a:	702b      	strb	r3, [r5, #0]

	return reason;
}
    1a7c:	4620      	mov	r0, r4
    1a7e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1a80:	f06f 0015 	mvn.w	r0, #21
    1a84:	e7ea      	b.n	1a5c <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1a86:	4e10      	ldr	r6, [pc, #64]	; (1ac8 <mem_manage_fault+0x90>)
    1a88:	6873      	ldr	r3, [r6, #4]
    1a8a:	051a      	lsls	r2, r3, #20
    1a8c:	d5ee      	bpl.n	1a6c <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1a8e:	4621      	mov	r1, r4
    1a90:	f7ff ff60 	bl	1954 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1a94:	4604      	mov	r4, r0
    1a96:	b118      	cbz	r0, 1aa0 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1a98:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1a9c:	2402      	movs	r4, #2
    1a9e:	e7e6      	b.n	1a6e <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1aa0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1aa2:	06db      	lsls	r3, r3, #27
    1aa4:	d5e2      	bpl.n	1a6c <mem_manage_fault+0x34>
    1aa6:	4a09      	ldr	r2, [pc, #36]	; (1acc <mem_manage_fault+0x94>)
    1aa8:	4909      	ldr	r1, [pc, #36]	; (1ad0 <mem_manage_fault+0x98>)
    1aaa:	480a      	ldr	r0, [pc, #40]	; (1ad4 <mem_manage_fault+0x9c>)
    1aac:	f240 1349 	movw	r3, #329	; 0x149
    1ab0:	f004 fcb1 	bl	6416 <printk>
    1ab4:	4808      	ldr	r0, [pc, #32]	; (1ad8 <mem_manage_fault+0xa0>)
    1ab6:	f004 fcae 	bl	6416 <printk>
    1aba:	4804      	ldr	r0, [pc, #16]	; (1acc <mem_manage_fault+0x94>)
    1abc:	f240 1149 	movw	r1, #329	; 0x149
    1ac0:	f004 fbd0 	bl	6264 <assert_post_action>
    1ac4:	e7d3      	b.n	1a6e <mem_manage_fault+0x36>
    1ac6:	bf00      	nop
    1ac8:	e000ed00 	.word	0xe000ed00
    1acc:	000072bd 	.word	0x000072bd
    1ad0:	000072f7 	.word	0x000072f7
    1ad4:	00006f96 	.word	0x00006f96
    1ad8:	00007341 	.word	0x00007341

00001adc <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1adc:	4b0d      	ldr	r3, [pc, #52]	; (1b14 <bus_fault.isra.0+0x38>)
    1ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1ae4:	0592      	lsls	r2, r2, #22
    1ae6:	d508      	bpl.n	1afa <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1aec:	0412      	lsls	r2, r2, #16
    1aee:	d504      	bpl.n	1afa <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1af0:	b118      	cbz	r0, 1afa <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1af8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1afa:	4b06      	ldr	r3, [pc, #24]	; (1b14 <bus_fault.isra.0+0x38>)
    1afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b00:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1b02:	bf58      	it	pl
    1b04:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1b08:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1b0a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1b0e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1b10:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1b12:	4770      	bx	lr
    1b14:	e000ed00 	.word	0xe000ed00

00001b18 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1b18:	4b07      	ldr	r3, [pc, #28]	; (1b38 <usage_fault.isra.0+0x20>)
    1b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b28:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1b2c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1b30:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1b32:	2000      	movs	r0, #0
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop
    1b38:	e000ed00 	.word	0xe000ed00

00001b3c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1b3c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b3e:	4b54      	ldr	r3, [pc, #336]	; (1c90 <z_arm_fault+0x154>)
    1b40:	685c      	ldr	r4, [r3, #4]
{
    1b42:	b08a      	sub	sp, #40	; 0x28
    1b44:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1b46:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1b4a:	2600      	movs	r6, #0
    1b4c:	f386 8811 	msr	BASEPRI, r6
    1b50:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1b54:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1b58:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1b5c:	d108      	bne.n	1b70 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1b5e:	f002 030c 	and.w	r3, r2, #12
    1b62:	2b08      	cmp	r3, #8
    1b64:	d004      	beq.n	1b70 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1b66:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    1b68:	bf5c      	itt	pl
    1b6a:	4605      	movpl	r5, r0
			*nested_exc = true;
    1b6c:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1b6e:	b97d      	cbnz	r5, 1b90 <z_arm_fault+0x54>
    1b70:	4a48      	ldr	r2, [pc, #288]	; (1c94 <z_arm_fault+0x158>)
    1b72:	4949      	ldr	r1, [pc, #292]	; (1c98 <z_arm_fault+0x15c>)
    1b74:	4849      	ldr	r0, [pc, #292]	; (1c9c <z_arm_fault+0x160>)
    1b76:	f240 33f2 	movw	r3, #1010	; 0x3f2
    1b7a:	f004 fc4c 	bl	6416 <printk>
    1b7e:	4848      	ldr	r0, [pc, #288]	; (1ca0 <z_arm_fault+0x164>)
    1b80:	f004 fc49 	bl	6416 <printk>
    1b84:	4843      	ldr	r0, [pc, #268]	; (1c94 <z_arm_fault+0x158>)
    1b86:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1b8a:	f004 fb6b 	bl	6264 <assert_post_action>
    1b8e:	2500      	movs	r5, #0
	*recoverable = false;
    1b90:	2300      	movs	r3, #0
    1b92:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1b96:	1ee3      	subs	r3, r4, #3
    1b98:	2b03      	cmp	r3, #3
    1b9a:	d872      	bhi.n	1c82 <z_arm_fault+0x146>
    1b9c:	e8df f003 	tbb	[pc, r3]
    1ba0:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ba4:	4b3a      	ldr	r3, [pc, #232]	; (1c90 <z_arm_fault+0x154>)
    1ba6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1ba8:	f014 0402 	ands.w	r4, r4, #2
    1bac:	d169      	bne.n	1c82 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bb0:	2a00      	cmp	r2, #0
    1bb2:	db18      	blt.n	1be6 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bb6:	005b      	lsls	r3, r3, #1
    1bb8:	d54e      	bpl.n	1c58 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    1bba:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1bbc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1bc0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1bc4:	429a      	cmp	r2, r3
    1bc6:	d00d      	beq.n	1be4 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    1bc8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1bcc:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	b30b      	cbz	r3, 1c18 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    1bd4:	f10d 0207 	add.w	r2, sp, #7
    1bd8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1bda:	4628      	mov	r0, r5
    1bdc:	f7ff ff2c 	bl	1a38 <mem_manage_fault>
		reason = usage_fault(esf);
    1be0:	4604      	mov	r4, r0
		break;
    1be2:	e000      	b.n	1be6 <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    1be4:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1bea:	b99b      	cbnz	r3, 1c14 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1bec:	2220      	movs	r2, #32
    1bee:	4629      	mov	r1, r5
    1bf0:	a802      	add	r0, sp, #8
    1bf2:	f004 fc57 	bl	64a4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bf8:	2e00      	cmp	r6, #0
    1bfa:	d044      	beq.n	1c86 <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1bfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1c00:	b922      	cbnz	r2, 1c0c <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1c02:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1c06:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c0a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1c0c:	a902      	add	r1, sp, #8
    1c0e:	4620      	mov	r0, r4
    1c10:	f004 fc18 	bl	6444 <z_arm_fatal_error>
}
    1c14:	b00a      	add	sp, #40	; 0x28
    1c16:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1c18:	4b22      	ldr	r3, [pc, #136]	; (1ca4 <z_arm_fault+0x168>)
    1c1a:	781b      	ldrb	r3, [r3, #0]
    1c1c:	b12b      	cbz	r3, 1c2a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    1c1e:	f10d 0107 	add.w	r1, sp, #7
    1c22:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1c24:	f7ff ff5a 	bl	1adc <bus_fault.isra.0>
    1c28:	e7da      	b.n	1be0 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    1c2a:	4b1f      	ldr	r3, [pc, #124]	; (1ca8 <z_arm_fault+0x16c>)
    1c2c:	881b      	ldrh	r3, [r3, #0]
    1c2e:	b29b      	uxth	r3, r3
    1c30:	b113      	cbz	r3, 1c38 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    1c32:	f7ff ff71 	bl	1b18 <usage_fault.isra.0>
    1c36:	e7d3      	b.n	1be0 <z_arm_fault+0xa4>
			__ASSERT(0,
    1c38:	491c      	ldr	r1, [pc, #112]	; (1cac <z_arm_fault+0x170>)
    1c3a:	4a16      	ldr	r2, [pc, #88]	; (1c94 <z_arm_fault+0x158>)
    1c3c:	4817      	ldr	r0, [pc, #92]	; (1c9c <z_arm_fault+0x160>)
    1c3e:	f240 23c3 	movw	r3, #707	; 0x2c3
    1c42:	f004 fbe8 	bl	6416 <printk>
    1c46:	481a      	ldr	r0, [pc, #104]	; (1cb0 <z_arm_fault+0x174>)
    1c48:	f004 fbe5 	bl	6416 <printk>
    1c4c:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1c50:	4810      	ldr	r0, [pc, #64]	; (1c94 <z_arm_fault+0x158>)
    1c52:	f004 fb07 	bl	6264 <assert_post_action>
    1c56:	e7c6      	b.n	1be6 <z_arm_fault+0xaa>
    1c58:	4914      	ldr	r1, [pc, #80]	; (1cac <z_arm_fault+0x170>)
    1c5a:	4a0e      	ldr	r2, [pc, #56]	; (1c94 <z_arm_fault+0x158>)
    1c5c:	480f      	ldr	r0, [pc, #60]	; (1c9c <z_arm_fault+0x160>)
    1c5e:	f240 23c7 	movw	r3, #711	; 0x2c7
    1c62:	f004 fbd8 	bl	6416 <printk>
    1c66:	4813      	ldr	r0, [pc, #76]	; (1cb4 <z_arm_fault+0x178>)
    1c68:	f004 fbd5 	bl	6416 <printk>
    1c6c:	f240 21c7 	movw	r1, #711	; 0x2c7
    1c70:	e7ee      	b.n	1c50 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    1c72:	f10d 0207 	add.w	r2, sp, #7
    1c76:	2100      	movs	r1, #0
    1c78:	e7af      	b.n	1bda <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    1c7a:	f10d 0107 	add.w	r1, sp, #7
    1c7e:	2000      	movs	r0, #0
    1c80:	e7d0      	b.n	1c24 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1c82:	2400      	movs	r4, #0
    1c84:	e7af      	b.n	1be6 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1c8a:	f023 0301 	bic.w	r3, r3, #1
    1c8e:	e7bc      	b.n	1c0a <z_arm_fault+0xce>
    1c90:	e000ed00 	.word	0xe000ed00
    1c94:	000072bd 	.word	0x000072bd
    1c98:	00007364 	.word	0x00007364
    1c9c:	00006f96 	.word	0x00006f96
    1ca0:	00007377 	.word	0x00007377
    1ca4:	e000ed29 	.word	0xe000ed29
    1ca8:	e000ed2a 	.word	0xe000ed2a
    1cac:	00007091 	.word	0x00007091
    1cb0:	000073b5 	.word	0x000073b5
    1cb4:	000073d9 	.word	0x000073d9

00001cb8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1cb8:	4a02      	ldr	r2, [pc, #8]	; (1cc4 <z_arm_fault_init+0xc>)
    1cba:	6953      	ldr	r3, [r2, #20]
    1cbc:	f043 0310 	orr.w	r3, r3, #16
    1cc0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1cc2:	4770      	bx	lr
    1cc4:	e000ed00 	.word	0xe000ed00

00001cc8 <z_arm_interrupt_init>:
    1cc8:	4804      	ldr	r0, [pc, #16]	; (1cdc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1cca:	2300      	movs	r3, #0
    1ccc:	2120      	movs	r1, #32
    1cce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1cd0:	3301      	adds	r3, #1
    1cd2:	2b30      	cmp	r3, #48	; 0x30
    1cd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1cd8:	d1f9      	bne.n	1cce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1cda:	4770      	bx	lr
    1cdc:	e000e100 	.word	0xe000e100

00001ce0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1ce0:	4a06      	ldr	r2, [pc, #24]	; (1cfc <z_arm_clear_arm_mpu_config+0x1c>)
    1ce2:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    1ce4:	2300      	movs	r3, #0
	int num_regions =
    1ce6:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1cea:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1cec:	428b      	cmp	r3, r1
    1cee:	d100      	bne.n	1cf2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1cf0:	4770      	bx	lr
  MPU->RNR = rnr;
    1cf2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    1cf4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1cf6:	3301      	adds	r3, #1
    1cf8:	e7f8      	b.n	1cec <z_arm_clear_arm_mpu_config+0xc>
    1cfa:	bf00      	nop
    1cfc:	e000ed90 	.word	0xe000ed90

00001d00 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1d00:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1d02:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1d04:	2300      	movs	r3, #0
    1d06:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1d0a:	f7ff ffe9 	bl	1ce0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1d0e:	4b14      	ldr	r3, [pc, #80]	; (1d60 <z_arm_init_arch_hw_at_boot+0x60>)
    1d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1d28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1d2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1d30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1d34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1d38:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1d3c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1d40:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1d44:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1d48:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1d4c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1d50:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1d54:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1d56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d5a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1d5e:	bd08      	pop	{r3, pc}
    1d60:	e000e100 	.word	0xe000e100

00001d64 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1d64:	4b06      	ldr	r3, [pc, #24]	; (1d80 <z_impl_k_thread_abort+0x1c>)
    1d66:	689b      	ldr	r3, [r3, #8]
    1d68:	4283      	cmp	r3, r0
    1d6a:	d107      	bne.n	1d7c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1d6c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1d70:	b123      	cbz	r3, 1d7c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1d72:	4a04      	ldr	r2, [pc, #16]	; (1d84 <z_impl_k_thread_abort+0x20>)
    1d74:	6853      	ldr	r3, [r2, #4]
    1d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1d7a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1d7c:	f003 ba54 	b.w	5228 <z_thread_abort>
    1d80:	20000b10 	.word	0x20000b10
    1d84:	e000ed00 	.word	0xe000ed00

00001d88 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1d88:	4b02      	ldr	r3, [pc, #8]	; (1d94 <z_arm_configure_static_mpu_regions+0xc>)
    1d8a:	4a03      	ldr	r2, [pc, #12]	; (1d98 <z_arm_configure_static_mpu_regions+0x10>)
    1d8c:	4803      	ldr	r0, [pc, #12]	; (1d9c <z_arm_configure_static_mpu_regions+0x14>)
    1d8e:	2101      	movs	r1, #1
    1d90:	f000 b868 	b.w	1e64 <arm_core_mpu_configure_static_mpu_regions>
    1d94:	20040000 	.word	0x20040000
    1d98:	20000000 	.word	0x20000000
    1d9c:	00006c14 	.word	0x00006c14

00001da0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1da0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1da2:	4b05      	ldr	r3, [pc, #20]	; (1db8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1da4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1da6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1da8:	4a04      	ldr	r2, [pc, #16]	; (1dbc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1daa:	2120      	movs	r1, #32
    1dac:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1db0:	4618      	mov	r0, r3
    1db2:	2101      	movs	r1, #1
    1db4:	f000 b87e 	b.w	1eb4 <arm_core_mpu_configure_dynamic_mpu_regions>
    1db8:	20000938 	.word	0x20000938
    1dbc:	150b0000 	.word	0x150b0000

00001dc0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1dc2:	4f1e      	ldr	r7, [pc, #120]	; (1e3c <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1dc4:	2600      	movs	r6, #0
    1dc6:	428e      	cmp	r6, r1
    1dc8:	db01      	blt.n	1dce <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1dca:	4610      	mov	r0, r2
    1dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1dce:	6844      	ldr	r4, [r0, #4]
    1dd0:	b384      	cbz	r4, 1e34 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    1dd2:	b153      	cbz	r3, 1dea <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1dd4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1dd8:	ea14 0f0c 	tst.w	r4, ip
    1ddc:	d118      	bne.n	1e10 <mpu_configure_regions+0x50>
		&&
    1dde:	2c1f      	cmp	r4, #31
    1de0:	d916      	bls.n	1e10 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1de2:	6805      	ldr	r5, [r0, #0]
		&&
    1de4:	ea1c 0f05 	tst.w	ip, r5
    1de8:	d112      	bne.n	1e10 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1dea:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1dec:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    1dee:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1df2:	b2d2      	uxtb	r2, r2
    1df4:	d90f      	bls.n	1e16 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1df6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1dfa:	d80e      	bhi.n	1e1a <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1dfc:	3c01      	subs	r4, #1
    1dfe:	fab4 f484 	clz	r4, r4
    1e02:	f1c4 041f 	rsb	r4, r4, #31
    1e06:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1e08:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1e0a:	ea4c 0404 	orr.w	r4, ip, r4
    1e0e:	d906      	bls.n	1e1e <mpu_configure_regions+0x5e>
			return -EINVAL;
    1e10:	f06f 0215 	mvn.w	r2, #21
    1e14:	e7d9      	b.n	1dca <mpu_configure_regions+0xa>
		return REGION_32B;
    1e16:	2408      	movs	r4, #8
    1e18:	e7f6      	b.n	1e08 <mpu_configure_regions+0x48>
		return REGION_4G;
    1e1a:	243e      	movs	r4, #62	; 0x3e
    1e1c:	e7f4      	b.n	1e08 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e1e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1e22:	4315      	orrs	r5, r2
    1e24:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e28:	f044 0401 	orr.w	r4, r4, #1
    1e2c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e2e:	60fd      	str	r5, [r7, #12]
		reg_index++;
    1e30:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e32:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    1e34:	3601      	adds	r6, #1
    1e36:	300c      	adds	r0, #12
    1e38:	e7c5      	b.n	1dc6 <mpu_configure_regions+0x6>
    1e3a:	bf00      	nop
    1e3c:	e000ed90 	.word	0xe000ed90

00001e40 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1e40:	4b03      	ldr	r3, [pc, #12]	; (1e50 <arm_core_mpu_enable+0x10>)
    1e42:	2205      	movs	r2, #5
    1e44:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e4a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e4e:	4770      	bx	lr
    1e50:	e000ed90 	.word	0xe000ed90

00001e54 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1e54:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e58:	4b01      	ldr	r3, [pc, #4]	; (1e60 <arm_core_mpu_disable+0xc>)
    1e5a:	2200      	movs	r2, #0
    1e5c:	605a      	str	r2, [r3, #4]
}
    1e5e:	4770      	bx	lr
    1e60:	e000ed90 	.word	0xe000ed90

00001e64 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1e64:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1e66:	4d0e      	ldr	r5, [pc, #56]	; (1ea0 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1e68:	2301      	movs	r3, #1
    1e6a:	782a      	ldrb	r2, [r5, #0]
    1e6c:	460c      	mov	r4, r1
    1e6e:	f7ff ffa7 	bl	1dc0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1e72:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    1e74:	3016      	adds	r0, #22
    1e76:	d111      	bne.n	1e9c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1e78:	f240 1311 	movw	r3, #273	; 0x111
    1e7c:	4a09      	ldr	r2, [pc, #36]	; (1ea4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1e7e:	490a      	ldr	r1, [pc, #40]	; (1ea8 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    1e80:	480a      	ldr	r0, [pc, #40]	; (1eac <arm_core_mpu_configure_static_mpu_regions+0x48>)
    1e82:	f004 fac8 	bl	6416 <printk>
    1e86:	4621      	mov	r1, r4
    1e88:	4809      	ldr	r0, [pc, #36]	; (1eb0 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    1e8a:	f004 fac4 	bl	6416 <printk>
			regions_num);
	}
}
    1e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    1e92:	4804      	ldr	r0, [pc, #16]	; (1ea4 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    1e94:	f240 1111 	movw	r1, #273	; 0x111
    1e98:	f004 b9e4 	b.w	6264 <assert_post_action>
}
    1e9c:	bd38      	pop	{r3, r4, r5, pc}
    1e9e:	bf00      	nop
    1ea0:	20000b70 	.word	0x20000b70
    1ea4:	00007409 	.word	0x00007409
    1ea8:	00007091 	.word	0x00007091
    1eac:	00006f96 	.word	0x00006f96
    1eb0:	00007440 	.word	0x00007440

00001eb4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1eb4:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1eb6:	4a12      	ldr	r2, [pc, #72]	; (1f00 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    1eb8:	2300      	movs	r3, #0
    1eba:	7812      	ldrb	r2, [r2, #0]
    1ebc:	460c      	mov	r4, r1
    1ebe:	f7ff ff7f 	bl	1dc0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1ec2:	f110 0f16 	cmn.w	r0, #22
    1ec6:	d008      	beq.n	1eda <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    1ec8:	4b0e      	ldr	r3, [pc, #56]	; (1f04 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    1eca:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ecc:	2807      	cmp	r0, #7
    1ece:	dd00      	ble.n	1ed2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1ed0:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    1ed2:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1ed4:	611a      	str	r2, [r3, #16]
    1ed6:	3001      	adds	r0, #1
    1ed8:	e7f8      	b.n	1ecc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1eda:	4a0b      	ldr	r2, [pc, #44]	; (1f08 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1edc:	490b      	ldr	r1, [pc, #44]	; (1f0c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    1ede:	480c      	ldr	r0, [pc, #48]	; (1f10 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    1ee0:	f44f 7398 	mov.w	r3, #304	; 0x130
    1ee4:	f004 fa97 	bl	6416 <printk>
    1ee8:	4621      	mov	r1, r4
    1eea:	480a      	ldr	r0, [pc, #40]	; (1f14 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    1eec:	f004 fa93 	bl	6416 <printk>
}
    1ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    1ef4:	4804      	ldr	r0, [pc, #16]	; (1f08 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    1ef6:	f44f 7198 	mov.w	r1, #304	; 0x130
    1efa:	f004 b9b3 	b.w	6264 <assert_post_action>
    1efe:	bf00      	nop
    1f00:	20000b70 	.word	0x20000b70
    1f04:	e000ed90 	.word	0xe000ed90
    1f08:	00007409 	.word	0x00007409
    1f0c:	00007091 	.word	0x00007091
    1f10:	00006f96 	.word	0x00006f96
    1f14:	0000746c 	.word	0x0000746c

00001f18 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1f18:	4925      	ldr	r1, [pc, #148]	; (1fb0 <z_arm_mpu_init+0x98>)
{
    1f1a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1f1c:	680c      	ldr	r4, [r1, #0]
    1f1e:	2c08      	cmp	r4, #8
    1f20:	d913      	bls.n	1f4a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    1f22:	f44f 73a4 	mov.w	r3, #328	; 0x148
    1f26:	4a23      	ldr	r2, [pc, #140]	; (1fb4 <z_arm_mpu_init+0x9c>)
    1f28:	4923      	ldr	r1, [pc, #140]	; (1fb8 <z_arm_mpu_init+0xa0>)
    1f2a:	4824      	ldr	r0, [pc, #144]	; (1fbc <z_arm_mpu_init+0xa4>)
    1f2c:	f004 fa73 	bl	6416 <printk>
    1f30:	4823      	ldr	r0, [pc, #140]	; (1fc0 <z_arm_mpu_init+0xa8>)
    1f32:	2208      	movs	r2, #8
    1f34:	4621      	mov	r1, r4
    1f36:	f004 fa6e 	bl	6416 <printk>
    1f3a:	481e      	ldr	r0, [pc, #120]	; (1fb4 <z_arm_mpu_init+0x9c>)
    1f3c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    1f40:	f004 f990 	bl	6264 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    1f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    1f48:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    1f4a:	f7ff ff83 	bl	1e54 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f4e:	6848      	ldr	r0, [r1, #4]
    1f50:	491c      	ldr	r1, [pc, #112]	; (1fc4 <z_arm_mpu_init+0xac>)
    1f52:	2200      	movs	r2, #0
    1f54:	4294      	cmp	r4, r2
    1f56:	f100 000c 	add.w	r0, r0, #12
    1f5a:	d119      	bne.n	1f90 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    1f5c:	4b1a      	ldr	r3, [pc, #104]	; (1fc8 <z_arm_mpu_init+0xb0>)
    1f5e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1f60:	f7ff ff6e 	bl	1e40 <arm_core_mpu_enable>
	__ASSERT(
    1f64:	680b      	ldr	r3, [r1, #0]
    1f66:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1f6a:	2b08      	cmp	r3, #8
    1f6c:	d00e      	beq.n	1f8c <z_arm_mpu_init+0x74>
    1f6e:	4917      	ldr	r1, [pc, #92]	; (1fcc <z_arm_mpu_init+0xb4>)
    1f70:	4a10      	ldr	r2, [pc, #64]	; (1fb4 <z_arm_mpu_init+0x9c>)
    1f72:	4812      	ldr	r0, [pc, #72]	; (1fbc <z_arm_mpu_init+0xa4>)
    1f74:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    1f78:	f004 fa4d 	bl	6416 <printk>
    1f7c:	4814      	ldr	r0, [pc, #80]	; (1fd0 <z_arm_mpu_init+0xb8>)
    1f7e:	f004 fa4a 	bl	6416 <printk>
    1f82:	480c      	ldr	r0, [pc, #48]	; (1fb4 <z_arm_mpu_init+0x9c>)
    1f84:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    1f88:	f004 f96c 	bl	6264 <assert_post_action>
	return 0;
    1f8c:	2000      	movs	r0, #0
    1f8e:	e7db      	b.n	1f48 <z_arm_mpu_init+0x30>
    1f90:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1f92:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    1f96:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1f9a:	4313      	orrs	r3, r2
    1f9c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fa0:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1fa6:	f043 0301 	orr.w	r3, r3, #1
    1faa:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1fac:	3201      	adds	r2, #1
    1fae:	e7d1      	b.n	1f54 <z_arm_mpu_init+0x3c>
    1fb0:	00006c20 	.word	0x00006c20
    1fb4:	00007409 	.word	0x00007409
    1fb8:	00007091 	.word	0x00007091
    1fbc:	00006f96 	.word	0x00006f96
    1fc0:	00007499 	.word	0x00007499
    1fc4:	e000ed90 	.word	0xe000ed90
    1fc8:	20000b70 	.word	0x20000b70
    1fcc:	000074cd 	.word	0x000074cd
    1fd0:	0000751d 	.word	0x0000751d

00001fd4 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    1fd4:	b40f      	push	{r0, r1, r2, r3}
    1fd6:	b507      	push	{r0, r1, r2, lr}
    1fd8:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1fda:	2102      	movs	r1, #2
{
    1fdc:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1fe0:	4804      	ldr	r0, [pc, #16]	; (1ff4 <printf+0x20>)
	va_start(vargs, format);
    1fe2:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    1fe4:	f7fe fb18 	bl	618 <cbvprintf>
	va_end(vargs);

	return r;
}
    1fe8:	b003      	add	sp, #12
    1fea:	f85d eb04 	ldr.w	lr, [sp], #4
    1fee:	b004      	add	sp, #16
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	0000646d 	.word	0x0000646d

00001ff8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1ff8:	4b01      	ldr	r3, [pc, #4]	; (2000 <__stdout_hook_install+0x8>)
    1ffa:	6018      	str	r0, [r3, #0]
}
    1ffc:	4770      	bx	lr
    1ffe:	bf00      	nop
    2000:	20000030 	.word	0x20000030

00002004 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2004:	3902      	subs	r1, #2
    2006:	2901      	cmp	r1, #1
    2008:	d802      	bhi.n	2010 <z_impl_zephyr_fputc+0xc>
    200a:	4b03      	ldr	r3, [pc, #12]	; (2018 <z_impl_zephyr_fputc+0x14>)
    200c:	681b      	ldr	r3, [r3, #0]
    200e:	4718      	bx	r3
}
    2010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2014:	4770      	bx	lr
    2016:	bf00      	nop
    2018:	20000030 	.word	0x20000030

0000201c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    201c:	f04f 0320 	mov.w	r3, #32
    2020:	f3ef 8211 	mrs	r2, BASEPRI
    2024:	f383 8812 	msr	BASEPRI_MAX, r3
    2028:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    202c:	4906      	ldr	r1, [pc, #24]	; (2048 <nordicsemi_nrf52_init+0x2c>)
    202e:	2301      	movs	r3, #1
    2030:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2034:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2038:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    203c:	f382 8811 	msr	BASEPRI, r2
    2040:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2044:	2000      	movs	r0, #0
    2046:	4770      	bx	lr
    2048:	4001e000 	.word	0x4001e000

0000204c <sys_arch_reboot>:
    *p_gpregret = val;
    204c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2050:	b2c0      	uxtb	r0, r0
    2052:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2056:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    205a:	4905      	ldr	r1, [pc, #20]	; (2070 <sys_arch_reboot+0x24>)
    205c:	4b05      	ldr	r3, [pc, #20]	; (2074 <sys_arch_reboot+0x28>)
    205e:	68ca      	ldr	r2, [r1, #12]
    2060:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2064:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2066:	60cb      	str	r3, [r1, #12]
    2068:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    206c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    206e:	e7fd      	b.n	206c <sys_arch_reboot+0x20>
    2070:	e000ed00 	.word	0xe000ed00
    2074:	05fa0004 	.word	0x05fa0004

00002078 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2078:	b120      	cbz	r0, 2084 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    207a:	4b03      	ldr	r3, [pc, #12]	; (2088 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    207c:	0180      	lsls	r0, r0, #6
    207e:	f043 0301 	orr.w	r3, r3, #1
    2082:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2084:	4770      	bx	lr
    2086:	bf00      	nop
    2088:	00006be0 	.word	0x00006be0

0000208c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2090:	4c10      	ldr	r4, [pc, #64]	; (20d4 <onoff_start+0x48>)
    2092:	1b07      	subs	r7, r0, r4
    2094:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    2098:	f04f 080c 	mov.w	r8, #12
    209c:	fb08 f807 	mul.w	r8, r8, r7
{
    20a0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    20a2:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    20a6:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    20a8:	4420      	add	r0, r4
    20aa:	2140      	movs	r1, #64	; 0x40
    20ac:	f004 fa2c 	bl	6508 <set_starting_state>
	if (err < 0) {
    20b0:	1e01      	subs	r1, r0, #0
    20b2:	db09      	blt.n	20c8 <onoff_start+0x3c>
	subdata->cb = cb;
    20b4:	4b08      	ldr	r3, [pc, #32]	; (20d8 <onoff_start+0x4c>)
    20b6:	4444      	add	r4, r8
	subdata->user_data = user_data;
    20b8:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    20bc:	4b07      	ldr	r3, [pc, #28]	; (20dc <onoff_start+0x50>)
    20be:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    20c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    20c6:	4718      	bx	r3
		notify(mgr, err);
    20c8:	4630      	mov	r0, r6
    20ca:	462b      	mov	r3, r5
}
    20cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    20d0:	4718      	bx	r3
    20d2:	bf00      	nop
    20d4:	20000954 	.word	0x20000954
    20d8:	0000656b 	.word	0x0000656b
    20dc:	00006c54 	.word	0x00006c54

000020e0 <get_status>:
{
    20e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20e2:	b2cc      	uxtb	r4, r1
    20e4:	2c01      	cmp	r4, #1
{
    20e6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    20e8:	d909      	bls.n	20fe <get_status+0x1e>
    20ea:	4909      	ldr	r1, [pc, #36]	; (2110 <get_status+0x30>)
    20ec:	4809      	ldr	r0, [pc, #36]	; (2114 <get_status+0x34>)
    20ee:	4a0a      	ldr	r2, [pc, #40]	; (2118 <get_status+0x38>)
    20f0:	237e      	movs	r3, #126	; 0x7e
    20f2:	f004 f990 	bl	6416 <printk>
    20f6:	4808      	ldr	r0, [pc, #32]	; (2118 <get_status+0x38>)
    20f8:	217e      	movs	r1, #126	; 0x7e
    20fa:	f004 f8b3 	bl	6264 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    20fe:	692b      	ldr	r3, [r5, #16]
    2100:	210c      	movs	r1, #12
    2102:	fb04 3401 	mla	r4, r4, r1, r3
    2106:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    2108:	f000 0007 	and.w	r0, r0, #7
    210c:	bd38      	pop	{r3, r4, r5, pc}
    210e:	bf00      	nop
    2110:	0000758a 	.word	0x0000758a
    2114:	00006f96 	.word	0x00006f96
    2118:	0000754d 	.word	0x0000754d

0000211c <stop>:
{
    211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    211e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2120:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    2122:	6907      	ldr	r7, [r0, #16]
{
    2124:	4605      	mov	r5, r0
    2126:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2128:	d90b      	bls.n	2142 <stop+0x26>
    212a:	4918      	ldr	r1, [pc, #96]	; (218c <stop+0x70>)
    212c:	4818      	ldr	r0, [pc, #96]	; (2190 <stop+0x74>)
    212e:	4a19      	ldr	r2, [pc, #100]	; (2194 <stop+0x78>)
    2130:	f240 1353 	movw	r3, #339	; 0x153
    2134:	f004 f96f 	bl	6416 <printk>
    2138:	4816      	ldr	r0, [pc, #88]	; (2194 <stop+0x78>)
    213a:	f240 1153 	movw	r1, #339	; 0x153
    213e:	f004 f891 	bl	6264 <assert_post_action>
	__asm__ volatile(
    2142:	f04f 0320 	mov.w	r3, #32
    2146:	f3ef 8211 	mrs	r2, BASEPRI
    214a:	f383 8812 	msr	BASEPRI_MAX, r3
    214e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    2152:	230c      	movs	r3, #12
    2154:	fb03 7104 	mla	r1, r3, r4, r7
    2158:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    215a:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    215e:	d001      	beq.n	2164 <stop+0x48>
    2160:	428e      	cmp	r6, r1
    2162:	d110      	bne.n	2186 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    2164:	fb03 7304 	mla	r3, r3, r4, r7
    2168:	2101      	movs	r1, #1
    216a:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    216c:	2000      	movs	r0, #0
	__asm__ volatile(
    216e:	f382 8811 	msr	BASEPRI, r2
    2172:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2176:	b928      	cbnz	r0, 2184 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2178:	6869      	ldr	r1, [r5, #4]
    217a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    217e:	6863      	ldr	r3, [r4, #4]
    2180:	4798      	blx	r3
	return 0;
    2182:	2000      	movs	r0, #0
}
    2184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    218a:	e7f0      	b.n	216e <stop+0x52>
    218c:	0000758a 	.word	0x0000758a
    2190:	00006f96 	.word	0x00006f96
    2194:	0000754d 	.word	0x0000754d

00002198 <onoff_stop>:
{
    2198:	b570      	push	{r4, r5, r6, lr}
    219a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    219c:	4906      	ldr	r1, [pc, #24]	; (21b8 <onoff_stop+0x20>)
    219e:	1a41      	subs	r1, r0, r1
{
    21a0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    21a2:	1149      	asrs	r1, r1, #5
    21a4:	4805      	ldr	r0, [pc, #20]	; (21bc <onoff_stop+0x24>)
    21a6:	2240      	movs	r2, #64	; 0x40
    21a8:	f7ff ffb8 	bl	211c <stop>
	notify(mgr, res);
    21ac:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    21ae:	4601      	mov	r1, r0
	notify(mgr, res);
    21b0:	4620      	mov	r0, r4
}
    21b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    21b6:	4718      	bx	r3
    21b8:	20000954 	.word	0x20000954
    21bc:	000069a8 	.word	0x000069a8

000021c0 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21c0:	2200      	movs	r2, #0
{
    21c2:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21c4:	2101      	movs	r1, #1
{
    21c6:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    21c8:	4610      	mov	r0, r2
    21ca:	f7ff fb3d 	bl	1848 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    21ce:	2000      	movs	r0, #0
    21d0:	f7ff fb1c 	bl	180c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    21d4:	480f      	ldr	r0, [pc, #60]	; (2214 <clk_init+0x54>)
    21d6:	f001 f8e7 	bl	33a8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    21da:	4b0f      	ldr	r3, [pc, #60]	; (2218 <clk_init+0x58>)
    21dc:	4298      	cmp	r0, r3
    21de:	d115      	bne.n	220c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    21e0:	f001 f906 	bl	33f0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    21e4:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    21e6:	490d      	ldr	r1, [pc, #52]	; (221c <clk_init+0x5c>)
    21e8:	4630      	mov	r0, r6
    21ea:	f004 f8fa 	bl	63e2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    21ee:	2800      	cmp	r0, #0
    21f0:	db0b      	blt.n	220a <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    21f2:	2501      	movs	r5, #1
    21f4:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    21f6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    21f8:	4908      	ldr	r1, [pc, #32]	; (221c <clk_init+0x5c>)
    21fa:	f104 0020 	add.w	r0, r4, #32
    21fe:	f004 f8f0 	bl	63e2 <onoff_manager_init>
		if (err < 0) {
    2202:	2800      	cmp	r0, #0
    2204:	db01      	blt.n	220a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2206:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    2208:	2000      	movs	r0, #0
}
    220a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    220c:	f06f 0004 	mvn.w	r0, #4
    2210:	e7fb      	b.n	220a <clk_init+0x4a>
    2212:	bf00      	nop
    2214:	00002255 	.word	0x00002255
    2218:	0bad0000 	.word	0x0bad0000
    221c:	00006c64 	.word	0x00006c64

00002220 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2220:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2222:	230c      	movs	r3, #12
    2224:	4809      	ldr	r0, [pc, #36]	; (224c <clkstarted_handle.constprop.0+0x2c>)
    2226:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2228:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    222a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    222c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    2230:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2232:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    2234:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    2236:	4418      	add	r0, r3
    2238:	f004 f984 	bl	6544 <set_on_state>
	if (callback) {
    223c:	b12d      	cbz	r5, 224a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    223e:	4632      	mov	r2, r6
    2240:	462b      	mov	r3, r5
    2242:	4803      	ldr	r0, [pc, #12]	; (2250 <clkstarted_handle.constprop.0+0x30>)
}
    2244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2248:	4718      	bx	r3
}
    224a:	bd70      	pop	{r4, r5, r6, pc}
    224c:	20000954 	.word	0x20000954
    2250:	000069a8 	.word	0x000069a8

00002254 <clock_event_handler>:
	switch (event) {
    2254:	2801      	cmp	r0, #1
{
    2256:	b508      	push	{r3, lr}
	switch (event) {
    2258:	d006      	beq.n	2268 <clock_event_handler+0x14>
    225a:	2803      	cmp	r0, #3
    225c:	d008      	beq.n	2270 <clock_event_handler+0x1c>
    225e:	b9a8      	cbnz	r0, 228c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2260:	4b10      	ldr	r3, [pc, #64]	; (22a4 <clock_event_handler+0x50>)
    2262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2264:	075b      	lsls	r3, r3, #29
    2266:	d11b      	bne.n	22a0 <clock_event_handler+0x4c>
}
    2268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    226c:	f7ff bfd8 	b.w	2220 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    2270:	490d      	ldr	r1, [pc, #52]	; (22a8 <clock_event_handler+0x54>)
    2272:	4a0e      	ldr	r2, [pc, #56]	; (22ac <clock_event_handler+0x58>)
    2274:	480e      	ldr	r0, [pc, #56]	; (22b0 <clock_event_handler+0x5c>)
    2276:	f240 2366 	movw	r3, #614	; 0x266
    227a:	f004 f8cc 	bl	6416 <printk>
    227e:	f240 2166 	movw	r1, #614	; 0x266
}
    2282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2286:	4809      	ldr	r0, [pc, #36]	; (22ac <clock_event_handler+0x58>)
    2288:	f003 bfec 	b.w	6264 <assert_post_action>
    228c:	4906      	ldr	r1, [pc, #24]	; (22a8 <clock_event_handler+0x54>)
    228e:	4a07      	ldr	r2, [pc, #28]	; (22ac <clock_event_handler+0x58>)
    2290:	4807      	ldr	r0, [pc, #28]	; (22b0 <clock_event_handler+0x5c>)
    2292:	f240 236a 	movw	r3, #618	; 0x26a
    2296:	f004 f8be 	bl	6416 <printk>
    229a:	f240 216a 	movw	r1, #618	; 0x26a
    229e:	e7f0      	b.n	2282 <clock_event_handler+0x2e>
}
    22a0:	bd08      	pop	{r3, pc}
    22a2:	bf00      	nop
    22a4:	20000954 	.word	0x20000954
    22a8:	00007091 	.word	0x00007091
    22ac:	0000754d 	.word	0x0000754d
    22b0:	00006f96 	.word	0x00006f96

000022b4 <generic_hfclk_start>:
{
    22b4:	b508      	push	{r3, lr}
	__asm__ volatile(
    22b6:	f04f 0320 	mov.w	r3, #32
    22ba:	f3ef 8111 	mrs	r1, BASEPRI
    22be:	f383 8812 	msr	BASEPRI_MAX, r3
    22c2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    22c6:	4a12      	ldr	r2, [pc, #72]	; (2310 <generic_hfclk_start+0x5c>)
    22c8:	6813      	ldr	r3, [r2, #0]
    22ca:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    22ce:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    22d2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    22d4:	d00c      	beq.n	22f0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    22d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    22da:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    22de:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    22e2:	f013 0301 	ands.w	r3, r3, #1
    22e6:	d003      	beq.n	22f0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    22e8:	480a      	ldr	r0, [pc, #40]	; (2314 <generic_hfclk_start+0x60>)
    22ea:	f004 f92b 	bl	6544 <set_on_state>
			already_started = true;
    22ee:	2301      	movs	r3, #1
	__asm__ volatile(
    22f0:	f381 8811 	msr	BASEPRI, r1
    22f4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    22f8:	b123      	cbz	r3, 2304 <generic_hfclk_start+0x50>
}
    22fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    22fe:	2000      	movs	r0, #0
    2300:	f7ff bf8e 	b.w	2220 <clkstarted_handle.constprop.0>
}
    2304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2308:	2001      	movs	r0, #1
    230a:	f001 b891 	b.w	3430 <nrfx_clock_start>
    230e:	bf00      	nop
    2310:	200009ac 	.word	0x200009ac
    2314:	2000099c 	.word	0x2000099c

00002318 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2318:	4b09      	ldr	r3, [pc, #36]	; (2340 <generic_hfclk_stop+0x28>)
    231a:	f3bf 8f5b 	dmb	ish
    231e:	e853 2f00 	ldrex	r2, [r3]
    2322:	f022 0102 	bic.w	r1, r2, #2
    2326:	e843 1000 	strex	r0, r1, [r3]
    232a:	2800      	cmp	r0, #0
    232c:	d1f7      	bne.n	231e <generic_hfclk_stop+0x6>
    232e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2332:	07d3      	lsls	r3, r2, #31
    2334:	d402      	bmi.n	233c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2336:	2001      	movs	r0, #1
    2338:	f001 b8ce 	b.w	34d8 <nrfx_clock_stop>
}
    233c:	4770      	bx	lr
    233e:	bf00      	nop
    2340:	200009ac 	.word	0x200009ac

00002344 <api_blocking_start>:
{
    2344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2346:	2200      	movs	r2, #0
    2348:	2301      	movs	r3, #1
    234a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    234e:	4a09      	ldr	r2, [pc, #36]	; (2374 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2350:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2354:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2356:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    235a:	f004 f918 	bl	658e <api_start>
	if (err < 0) {
    235e:	2800      	cmp	r0, #0
    2360:	db05      	blt.n	236e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2366:	2300      	movs	r3, #0
    2368:	4668      	mov	r0, sp
    236a:	f003 f84f 	bl	540c <z_impl_k_sem_take>
}
    236e:	b005      	add	sp, #20
    2370:	f85d fb04 	ldr.w	pc, [sp], #4
    2374:	00006589 	.word	0x00006589

00002378 <z_nrf_clock_control_lf_on>:
{
    2378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    237c:	4949      	ldr	r1, [pc, #292]	; (24a4 <z_nrf_clock_control_lf_on+0x12c>)
    237e:	f3bf 8f5b 	dmb	ish
    2382:	4605      	mov	r5, r0
    2384:	2201      	movs	r2, #1
    2386:	e851 3f00 	ldrex	r3, [r1]
    238a:	e841 2000 	strex	r0, r2, [r1]
    238e:	2800      	cmp	r0, #0
    2390:	d1f9      	bne.n	2386 <z_nrf_clock_control_lf_on+0xe>
    2392:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2396:	b9a3      	cbnz	r3, 23c2 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2398:	4943      	ldr	r1, [pc, #268]	; (24a8 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    239a:	4844      	ldr	r0, [pc, #272]	; (24ac <z_nrf_clock_control_lf_on+0x134>)
    239c:	604b      	str	r3, [r1, #4]
    239e:	60cb      	str	r3, [r1, #12]
    23a0:	608a      	str	r2, [r1, #8]
    23a2:	f7ff f80f 	bl	13c4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    23a6:	2800      	cmp	r0, #0
    23a8:	da0b      	bge.n	23c2 <z_nrf_clock_control_lf_on+0x4a>
    23aa:	4941      	ldr	r1, [pc, #260]	; (24b0 <z_nrf_clock_control_lf_on+0x138>)
    23ac:	4841      	ldr	r0, [pc, #260]	; (24b4 <z_nrf_clock_control_lf_on+0x13c>)
    23ae:	4a42      	ldr	r2, [pc, #264]	; (24b8 <z_nrf_clock_control_lf_on+0x140>)
    23b0:	f240 2326 	movw	r3, #550	; 0x226
    23b4:	f004 f82f 	bl	6416 <printk>
    23b8:	483f      	ldr	r0, [pc, #252]	; (24b8 <z_nrf_clock_control_lf_on+0x140>)
    23ba:	f240 2126 	movw	r1, #550	; 0x226
    23be:	f003 ff51 	bl	6264 <assert_post_action>
	switch (start_mode) {
    23c2:	b3ad      	cbz	r5, 2430 <z_nrf_clock_control_lf_on+0xb8>
    23c4:	1e6b      	subs	r3, r5, #1
    23c6:	2b01      	cmp	r3, #1
    23c8:	d856      	bhi.n	2478 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23ca:	2d01      	cmp	r5, #1
    23cc:	d107      	bne.n	23de <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23d2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    23d6:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    23da:	2b01      	cmp	r3, #1
    23dc:	d028      	beq.n	2430 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23de:	f004 fa9b 	bl	6918 <k_is_in_isr>
    23e2:	4604      	mov	r4, r0
    23e4:	b918      	cbnz	r0, 23ee <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    23e6:	4b35      	ldr	r3, [pc, #212]	; (24bc <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d152      	bne.n	2494 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    23ee:	f04f 0320 	mov.w	r3, #32
    23f2:	f3ef 8611 	mrs	r6, BASEPRI
    23f6:	f383 8812 	msr	BASEPRI_MAX, r3
    23fa:	f3bf 8f6f 	isb	sy
    23fe:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2400:	4f2f      	ldr	r7, [pc, #188]	; (24c0 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2402:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 24c8 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2406:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 24cc <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    240a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    240e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2412:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2416:	03d2      	lsls	r2, r2, #15
    2418:	d50c      	bpl.n	2434 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    241a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    241e:	2b01      	cmp	r3, #1
    2420:	d001      	beq.n	2426 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2422:	2d01      	cmp	r5, #1
    2424:	d106      	bne.n	2434 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    2426:	b30c      	cbz	r4, 246c <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    2428:	f386 8811 	msr	BASEPRI, r6
    242c:	f3bf 8f6f 	isb	sy
}
    2430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2434:	b1ac      	cbz	r4, 2462 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2436:	4630      	mov	r0, r6
    2438:	f7ff f980 	bl	173c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    243c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2440:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2444:	2b00      	cmp	r3, #0
    2446:	d1e0      	bne.n	240a <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2448:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    244a:	2900      	cmp	r1, #0
    244c:	d0dd      	beq.n	240a <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    244e:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2450:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2452:	2301      	movs	r3, #1
    2454:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2458:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    245c:	f8c9 3000 	str.w	r3, [r9]
}
    2460:	e7d3      	b.n	240a <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    2462:	2100      	movs	r1, #0
    2464:	2021      	movs	r0, #33	; 0x21
    2466:	f002 fea1 	bl	51ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    246a:	e7e7      	b.n	243c <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    246c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2470:	2202      	movs	r2, #2
    2472:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2476:	e7db      	b.n	2430 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    2478:	4912      	ldr	r1, [pc, #72]	; (24c4 <z_nrf_clock_control_lf_on+0x14c>)
    247a:	480e      	ldr	r0, [pc, #56]	; (24b4 <z_nrf_clock_control_lf_on+0x13c>)
    247c:	4a0e      	ldr	r2, [pc, #56]	; (24b8 <z_nrf_clock_control_lf_on+0x140>)
    247e:	f44f 730e 	mov.w	r3, #568	; 0x238
    2482:	f003 ffc8 	bl	6416 <printk>
}
    2486:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    248a:	480b      	ldr	r0, [pc, #44]	; (24b8 <z_nrf_clock_control_lf_on+0x140>)
    248c:	f44f 710e 	mov.w	r1, #568	; 0x238
    2490:	f003 bee8 	b.w	6264 <assert_post_action>
    p_reg->INTENCLR = mask;
    2494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2498:	2202      	movs	r2, #2
    249a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    249e:	4606      	mov	r6, r0
}
    24a0:	e7ae      	b.n	2400 <z_nrf_clock_control_lf_on+0x88>
    24a2:	bf00      	nop
    24a4:	200009b0 	.word	0x200009b0
    24a8:	20000944 	.word	0x20000944
    24ac:	20000974 	.word	0x20000974
    24b0:	000075ae 	.word	0x000075ae
    24b4:	00006f96 	.word	0x00006f96
    24b8:	0000754d 	.word	0x0000754d
    24bc:	20000f82 	.word	0x20000f82
    24c0:	40000104 	.word	0x40000104
    24c4:	00007091 	.word	0x00007091
    24c8:	e000e100 	.word	0xe000e100
    24cc:	40000008 	.word	0x40000008

000024d0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    24d0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24d2:	4b08      	ldr	r3, [pc, #32]	; (24f4 <uart_console_init+0x24>)
    24d4:	4808      	ldr	r0, [pc, #32]	; (24f8 <uart_console_init+0x28>)
    24d6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    24d8:	f004 f9be 	bl	6858 <z_device_ready>
    24dc:	b138      	cbz	r0, 24ee <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    24de:	4807      	ldr	r0, [pc, #28]	; (24fc <uart_console_init+0x2c>)
    24e0:	f7ff fd8a 	bl	1ff8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    24e4:	4805      	ldr	r0, [pc, #20]	; (24fc <uart_console_init+0x2c>)
    24e6:	f7ff f8e9 	bl	16bc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    24ea:	2000      	movs	r0, #0
}
    24ec:	bd08      	pop	{r3, pc}
		return -ENODEV;
    24ee:	f06f 0012 	mvn.w	r0, #18
    24f2:	e7fb      	b.n	24ec <uart_console_init+0x1c>
    24f4:	200009b4 	.word	0x200009b4
    24f8:	000069d8 	.word	0x000069d8
    24fc:	00002501 	.word	0x00002501

00002500 <console_out>:
	if ('\n' == c) {
    2500:	280a      	cmp	r0, #10
{
    2502:	b538      	push	{r3, r4, r5, lr}
    2504:	4d07      	ldr	r5, [pc, #28]	; (2524 <console_out+0x24>)
    2506:	4604      	mov	r4, r0
	if ('\n' == c) {
    2508:	d104      	bne.n	2514 <console_out+0x14>
    250a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    250c:	6883      	ldr	r3, [r0, #8]
    250e:	210d      	movs	r1, #13
    2510:	685b      	ldr	r3, [r3, #4]
    2512:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2514:	6828      	ldr	r0, [r5, #0]
    2516:	6883      	ldr	r3, [r0, #8]
    2518:	b2e1      	uxtb	r1, r4
    251a:	685b      	ldr	r3, [r3, #4]
    251c:	4798      	blx	r3
}
    251e:	4620      	mov	r0, r4
    2520:	bd38      	pop	{r3, r4, r5, pc}
    2522:	bf00      	nop
    2524:	200009b4 	.word	0x200009b4

00002528 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2528:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    252a:	6905      	ldr	r5, [r0, #16]
{
    252c:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    252e:	460c      	mov	r4, r1
    2530:	b961      	cbnz	r1, 254c <gpio_nrfx_manage_callback+0x24>
    2532:	4922      	ldr	r1, [pc, #136]	; (25bc <gpio_nrfx_manage_callback+0x94>)
    2534:	4a22      	ldr	r2, [pc, #136]	; (25c0 <gpio_nrfx_manage_callback+0x98>)
    2536:	4823      	ldr	r0, [pc, #140]	; (25c4 <gpio_nrfx_manage_callback+0x9c>)
    2538:	2324      	movs	r3, #36	; 0x24
    253a:	f003 ff6c 	bl	6416 <printk>
    253e:	4822      	ldr	r0, [pc, #136]	; (25c8 <gpio_nrfx_manage_callback+0xa0>)
    2540:	f003 ff69 	bl	6416 <printk>
    2544:	481e      	ldr	r0, [pc, #120]	; (25c0 <gpio_nrfx_manage_callback+0x98>)
    2546:	2124      	movs	r1, #36	; 0x24
    2548:	f003 fe8c 	bl	6264 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    254c:	6863      	ldr	r3, [r4, #4]
    254e:	b963      	cbnz	r3, 256a <gpio_nrfx_manage_callback+0x42>
    2550:	491e      	ldr	r1, [pc, #120]	; (25cc <gpio_nrfx_manage_callback+0xa4>)
    2552:	4a1b      	ldr	r2, [pc, #108]	; (25c0 <gpio_nrfx_manage_callback+0x98>)
    2554:	481b      	ldr	r0, [pc, #108]	; (25c4 <gpio_nrfx_manage_callback+0x9c>)
    2556:	2325      	movs	r3, #37	; 0x25
    2558:	f003 ff5d 	bl	6416 <printk>
    255c:	481c      	ldr	r0, [pc, #112]	; (25d0 <gpio_nrfx_manage_callback+0xa8>)
    255e:	f003 ff5a 	bl	6416 <printk>
    2562:	4817      	ldr	r0, [pc, #92]	; (25c0 <gpio_nrfx_manage_callback+0x98>)
    2564:	2125      	movs	r1, #37	; 0x25
    2566:	f003 fe7d 	bl	6264 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    256a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    256c:	b15b      	cbz	r3, 2586 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    256e:	2200      	movs	r2, #0
    2570:	429c      	cmp	r4, r3
    2572:	d113      	bne.n	259c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    2574:	6823      	ldr	r3, [r4, #0]
    2576:	b95a      	cbnz	r2, 2590 <gpio_nrfx_manage_callback+0x68>
    2578:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    257a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    257c:	4294      	cmp	r4, r2
    257e:	d100      	bne.n	2582 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    2580:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    2582:	2300      	movs	r3, #0
    2584:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2586:	b976      	cbnz	r6, 25a6 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2588:	2000      	movs	r0, #0
				     callback, set);
}
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	460b      	mov	r3, r1
    258e:	e7ef      	b.n	2570 <gpio_nrfx_manage_callback+0x48>
    2590:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    2592:	68ab      	ldr	r3, [r5, #8]
    2594:	429c      	cmp	r4, r3
	list->tail = node;
    2596:	bf08      	it	eq
    2598:	60aa      	streq	r2, [r5, #8]
}
    259a:	e7f2      	b.n	2582 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    259c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    259e:	461a      	mov	r2, r3
    25a0:	2900      	cmp	r1, #0
    25a2:	d1f3      	bne.n	258c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    25a4:	b13e      	cbz	r6, 25b6 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    25a6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    25a8:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    25aa:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    25ac:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    25ae:	2800      	cmp	r0, #0
    25b0:	d1ea      	bne.n	2588 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    25b2:	60ac      	str	r4, [r5, #8]
}
    25b4:	e7e9      	b.n	258a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    25b6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    25ba:	e7e6      	b.n	258a <gpio_nrfx_manage_callback+0x62>
    25bc:	000075ea 	.word	0x000075ea
    25c0:	000075bd 	.word	0x000075bd
    25c4:	00006f96 	.word	0x00006f96
    25c8:	000075f3 	.word	0x000075f3
    25cc:	00007602 	.word	0x00007602
    25d0:	00007614 	.word	0x00007614

000025d4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    25d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25d8:	6804      	ldr	r4, [r0, #0]
{
    25da:	460f      	mov	r7, r1
    25dc:	4616      	mov	r6, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    25de:	b34c      	cbz	r4, 2634 <gpio_fire_callbacks+0x60>
	return node->next;
    25e0:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    25e2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 263c <gpio_fire_callbacks+0x68>
    25e6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2640 <gpio_fire_callbacks+0x6c>
    25ea:	f8df a058 	ldr.w	sl, [pc, #88]	; 2644 <gpio_fire_callbacks+0x70>
    25ee:	2d00      	cmp	r5, #0
    25f0:	bf38      	it	cc
    25f2:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    25f4:	68a3      	ldr	r3, [r4, #8]
    25f6:	421e      	tst	r6, r3
    25f8:	d014      	beq.n	2624 <gpio_fire_callbacks+0x50>
			__ASSERT(cb->handler, "No callback handler!");
    25fa:	6863      	ldr	r3, [r4, #4]
    25fc:	b963      	cbnz	r3, 2618 <gpio_fire_callbacks+0x44>
    25fe:	4649      	mov	r1, r9
    2600:	2345      	movs	r3, #69	; 0x45
    2602:	4642      	mov	r2, r8
    2604:	4650      	mov	r0, sl
    2606:	f003 ff06 	bl	6416 <printk>
    260a:	480b      	ldr	r0, [pc, #44]	; (2638 <gpio_fire_callbacks+0x64>)
    260c:	f003 ff03 	bl	6416 <printk>
    2610:	2145      	movs	r1, #69	; 0x45
    2612:	4640      	mov	r0, r8
    2614:	f003 fe26 	bl	6264 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2618:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    261c:	4621      	mov	r1, r4
    261e:	4032      	ands	r2, r6
    2620:	4638      	mov	r0, r7
    2622:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2624:	b135      	cbz	r5, 2634 <gpio_fire_callbacks+0x60>
    2626:	682b      	ldr	r3, [r5, #0]
    2628:	2b00      	cmp	r3, #0
    262a:	bf38      	it	cc
    262c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    262e:	462c      	mov	r4, r5
    2630:	461d      	mov	r5, r3
    2632:	e7df      	b.n	25f4 <gpio_fire_callbacks+0x20>
		}
	}
}
    2634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2638:	00007614 	.word	0x00007614
    263c:	000075bd 	.word	0x000075bd
    2640:	0000762b 	.word	0x0000762b
    2644:	00006f96 	.word	0x00006f96

00002648 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2648:	6802      	ldr	r2, [r0, #0]
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    264a:	0953      	lsrs	r3, r2, #5
{
    264c:	b510      	push	{r4, lr}
    264e:	4604      	mov	r4, r0
    switch (port)
    2650:	d02c      	beq.n	26ac <nrf_gpio_pin_port_decode+0x64>
    2652:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2654:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2658:	bf18      	it	ne
    265a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    265c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    2660:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2662:	07db      	lsls	r3, r3, #31
    2664:	d40b      	bmi.n	267e <nrf_gpio_pin_port_decode+0x36>
    2666:	4914      	ldr	r1, [pc, #80]	; (26b8 <nrf_gpio_pin_port_decode+0x70>)
    2668:	4814      	ldr	r0, [pc, #80]	; (26bc <nrf_gpio_pin_port_decode+0x74>)
    266a:	4a15      	ldr	r2, [pc, #84]	; (26c0 <nrf_gpio_pin_port_decode+0x78>)
    266c:	f44f 7305 	mov.w	r3, #532	; 0x214
    2670:	f003 fed1 	bl	6416 <printk>
    2674:	4812      	ldr	r0, [pc, #72]	; (26c0 <nrf_gpio_pin_port_decode+0x78>)
    2676:	f44f 7105 	mov.w	r1, #532	; 0x214
    267a:	f003 fdf3 	bl	6264 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    267e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2680:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2684:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2686:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2688:	d00d      	beq.n	26a6 <nrf_gpio_pin_port_decode+0x5e>
    268a:	2b01      	cmp	r3, #1
    268c:	d011      	beq.n	26b2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    268e:	490d      	ldr	r1, [pc, #52]	; (26c4 <nrf_gpio_pin_port_decode+0x7c>)
    2690:	480a      	ldr	r0, [pc, #40]	; (26bc <nrf_gpio_pin_port_decode+0x74>)
    2692:	4a0b      	ldr	r2, [pc, #44]	; (26c0 <nrf_gpio_pin_port_decode+0x78>)
    2694:	f240 2319 	movw	r3, #537	; 0x219
    2698:	f003 febd 	bl	6416 <printk>
    269c:	4808      	ldr	r0, [pc, #32]	; (26c0 <nrf_gpio_pin_port_decode+0x78>)
    269e:	f240 2119 	movw	r1, #537	; 0x219
    26a2:	f003 fddf 	bl	6264 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    26a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    26aa:	bd10      	pop	{r4, pc}
    switch (port)
    26ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    26b0:	e7d4      	b.n	265c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    26b2:	4805      	ldr	r0, [pc, #20]	; (26c8 <nrf_gpio_pin_port_decode+0x80>)
    26b4:	e7f9      	b.n	26aa <nrf_gpio_pin_port_decode+0x62>
    26b6:	bf00      	nop
    26b8:	0000766a 	.word	0x0000766a
    26bc:	00006f96 	.word	0x00006f96
    26c0:	00007637 	.word	0x00007637
    26c4:	00007091 	.word	0x00007091
    26c8:	50000300 	.word	0x50000300

000026cc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    26cc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    26ce:	4b09      	ldr	r3, [pc, #36]	; (26f4 <gpio_nrfx_init+0x28>)
    26d0:	781a      	ldrb	r2, [r3, #0]
    26d2:	b96a      	cbnz	r2, 26f0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    26d4:	2101      	movs	r1, #1
    26d6:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    26d8:	2006      	movs	r0, #6
    26da:	2105      	movs	r1, #5
    26dc:	f7ff f8b4 	bl	1848 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    26e0:	2006      	movs	r0, #6
    26e2:	f7ff f893 	bl	180c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    26e6:	4b04      	ldr	r3, [pc, #16]	; (26f8 <gpio_nrfx_init+0x2c>)
    26e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    26ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    26f0:	2000      	movs	r0, #0
    26f2:	bd08      	pop	{r3, pc}
    26f4:	20000b71 	.word	0x20000b71
    26f8:	40006000 	.word	0x40006000

000026fc <gpio_nrfx_pin_interrupt_configure>:
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    26fc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
    2700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
    2704:	6904      	ldr	r4, [r0, #16]
{
    2706:	4607      	mov	r7, r0
    2708:	460e      	mov	r6, r1
    270a:	4690      	mov	r8, r2
    270c:	4699      	mov	r9, r3
    270e:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    2712:	f040 80ab 	bne.w	286c <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2716:	6843      	ldr	r3, [r0, #4]
    2718:	7a1b      	ldrb	r3, [r3, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    271a:	a801      	add	r0, sp, #4
    271c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
    2720:	9301      	str	r3, [sp, #4]
    2722:	f7ff ff91 	bl	2648 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2726:	9b01      	ldr	r3, [sp, #4]
    2728:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    272c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2730:	07d8      	lsls	r0, r3, #31
    2732:	f100 80bb 	bmi.w	28ac <gpio_nrfx_pin_interrupt_configure+0x1b0>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2736:	68e3      	ldr	r3, [r4, #12]
    2738:	2101      	movs	r1, #1
    273a:	40b1      	lsls	r1, r6
    273c:	4319      	orrs	r1, r3
    273e:	6963      	ldr	r3, [r4, #20]
    2740:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2742:	2101      	movs	r1, #1
    2744:	40b1      	lsls	r1, r6
    2746:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
    274a:	bf0c      	ite	eq
    274c:	430b      	orreq	r3, r1
    274e:	438b      	bicne	r3, r1
    2750:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2752:	69a3      	ldr	r3, [r4, #24]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2754:	4a57      	ldr	r2, [pc, #348]	; (28b4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	struct gpio_nrfx_data *data = get_port_data(port);
    2756:	f8d7 8010 	ldr.w	r8, [r7, #16]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    275a:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
    275e:	bf0c      	ite	eq
    2760:	430b      	orreq	r3, r1
    2762:	438b      	bicne	r3, r1
    2764:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2766:	6923      	ldr	r3, [r4, #16]
    2768:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
    276c:	bf0c      	ite	eq
    276e:	4319      	orreq	r1, r3
    2770:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2774:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2776:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2778:	7a1b      	ldrb	r3, [r3, #8]
    277a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
    277e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2782:	2000      	movs	r0, #0
    2784:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2786:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    278a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    278e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2792:	428d      	cmp	r5, r1
    2794:	d175      	bne.n	2882 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
    2796:	fa23 f100 	lsr.w	r1, r3, r0
    279a:	07c9      	lsls	r1, r1, #31
    279c:	d571      	bpl.n	2882 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    279e:	0083      	lsls	r3, r0, #2
    27a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    27a4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    27a8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    27ac:	f021 0101 	bic.w	r1, r1, #1
    27b0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    27b4:	2301      	movs	r3, #1
    27b6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    27b8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    27bc:	b2c0      	uxtb	r0, r0
    27be:	f000 ff2d 	bl	361c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    27c2:	4628      	mov	r0, r5
    27c4:	2100      	movs	r1, #0
    27c6:	f003 ff24 	bl	6612 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    27ca:	f8d8 000c 	ldr.w	r0, [r8, #12]
    27ce:	40f0      	lsrs	r0, r6
    27d0:	f010 0001 	ands.w	r0, r0, #1
    27d4:	d047      	beq.n	2866 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    27d6:	f8d8 0014 	ldr.w	r0, [r8, #20]
    27da:	40f0      	lsrs	r0, r6
    27dc:	f010 0401 	ands.w	r4, r0, #1
    27e0:	d057      	beq.n	2892 <gpio_nrfx_pin_interrupt_configure+0x196>
				if (data->double_edge & BIT(pin)) {
    27e2:	f8d8 3018 	ldr.w	r3, [r8, #24]
    27e6:	40f3      	lsrs	r3, r6
    27e8:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    27ea:	bf5f      	itttt	pl
    27ec:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
    27f0:	fa21 f606 	lsrpl.w	r6, r1, r6
    27f4:	f006 0601 	andpl.w	r6, r6, #1
    27f8:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    27fc:	a801      	add	r0, sp, #4
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    27fe:	bf54      	ite	pl
    2800:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2802:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2804:	f000 ff2c 	bl	3660 <nrfx_gpiote_channel_alloc>
    2808:	4b2b      	ldr	r3, [pc, #172]	; (28b8 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
    280a:	4298      	cmp	r0, r3
    280c:	d13e      	bne.n	288c <gpio_nrfx_pin_interrupt_configure+0x190>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    280e:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2812:	008b      	lsls	r3, r1, #2
    2814:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2818:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    281c:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    281e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2822:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
    2826:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    282a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    282e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2832:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
    2836:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2838:	008a      	lsls	r2, r1, #2
    283a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    283e:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2842:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2846:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2848:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    284c:	6010      	str	r0, [r2, #0]
    284e:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2850:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2854:	f042 0201 	orr.w	r2, r2, #1
    2858:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    285c:	4a15      	ldr	r2, [pc, #84]	; (28b4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    285e:	2301      	movs	r3, #1
    2860:	408b      	lsls	r3, r1
    2862:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2866:	b003      	add	sp, #12
    2868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    286c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2870:	f47f af61 	bne.w	2736 <gpio_nrfx_pin_interrupt_configure+0x3a>
    2874:	2101      	movs	r1, #1
    2876:	fa01 f306 	lsl.w	r3, r1, r6
    287a:	68e1      	ldr	r1, [r4, #12]
    287c:	ea21 0103 	bic.w	r1, r1, r3
    2880:	e75d      	b.n	273e <gpio_nrfx_pin_interrupt_configure+0x42>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2882:	3001      	adds	r0, #1
    2884:	2808      	cmp	r0, #8
    2886:	f47f af7e 	bne.w	2786 <gpio_nrfx_pin_interrupt_configure+0x8a>
    288a:	e79a      	b.n	27c2 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    288c:	f06f 0012 	mvn.w	r0, #18
    2890:	e7e9      	b.n	2866 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2892:	f8d8 1010 	ldr.w	r1, [r8, #16]
    2896:	40f1      	lsrs	r1, r6
    2898:	f001 0101 	and.w	r1, r1, #1
    289c:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    28a0:	4628      	mov	r0, r5
    28a2:	b2c9      	uxtb	r1, r1
    28a4:	f003 feb5 	bl	6612 <nrf_gpio_cfg_sense_set>
	int res = 0;
    28a8:	4620      	mov	r0, r4
    28aa:	e7dc      	b.n	2866 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
    28ac:	f06f 0085 	mvn.w	r0, #133	; 0x85
    28b0:	e7d9      	b.n	2866 <gpio_nrfx_pin_interrupt_configure+0x16a>
    28b2:	bf00      	nop
    28b4:	40006000 	.word	0x40006000
    28b8:	0bad0000 	.word	0x0bad0000

000028bc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28bc:	4b2e      	ldr	r3, [pc, #184]	; (2978 <gpio_nrfx_config+0xbc>)
{
    28be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28c0:	4c2e      	ldr	r4, [pc, #184]	; (297c <gpio_nrfx_config+0xc0>)
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    28c2:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28c4:	4013      	ands	r3, r2
    28c6:	42a3      	cmp	r3, r4
    28c8:	d045      	beq.n	2956 <gpio_nrfx_config+0x9a>
    28ca:	d80e      	bhi.n	28ea <gpio_nrfx_config+0x2e>
    28cc:	2b06      	cmp	r3, #6
    28ce:	d044      	beq.n	295a <gpio_nrfx_config+0x9e>
    28d0:	d806      	bhi.n	28e0 <gpio_nrfx_config+0x24>
    28d2:	2b00      	cmp	r3, #0
    28d4:	d041      	beq.n	295a <gpio_nrfx_config+0x9e>
    28d6:	2b02      	cmp	r3, #2
    28d8:	d041      	beq.n	295e <gpio_nrfx_config+0xa2>
    28da:	f06f 0015 	mvn.w	r0, #21
    28de:	e038      	b.n	2952 <gpio_nrfx_config+0x96>
    28e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    28e4:	d1f9      	bne.n	28da <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
    28e6:	2401      	movs	r4, #1
    28e8:	e009      	b.n	28fe <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    28ea:	4c25      	ldr	r4, [pc, #148]	; (2980 <gpio_nrfx_config+0xc4>)
    28ec:	42a3      	cmp	r3, r4
    28ee:	d038      	beq.n	2962 <gpio_nrfx_config+0xa6>
    28f0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    28f4:	d037      	beq.n	2966 <gpio_nrfx_config+0xaa>
    28f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    28fa:	d1ee      	bne.n	28da <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
    28fc:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    28fe:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2900:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
    2904:	bf54      	ite	pl
    2906:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    290a:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    290c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2910:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    2912:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2916:	d507      	bpl.n	2928 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2918:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    291a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    291e:	d524      	bpl.n	296a <gpio_nrfx_config+0xae>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2920:	2301      	movs	r3, #1
    2922:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2924:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    2928:	7a03      	ldrb	r3, [r0, #8]
    292a:	f001 011f 	and.w	r1, r1, #31
    292e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2932:	a801      	add	r0, sp, #4
    2934:	9101      	str	r1, [sp, #4]
    2936:	f7ff fe87 	bl	2648 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    293a:	9a01      	ldr	r2, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    293c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
    2940:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2944:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2948:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    294c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
    2950:	2000      	movs	r0, #0
}
    2952:	b003      	add	sp, #12
    2954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2956:	2407      	movs	r4, #7
    2958:	e7d1      	b.n	28fe <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    295a:	461c      	mov	r4, r3
    295c:	e7cf      	b.n	28fe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
    295e:	2404      	movs	r4, #4
    2960:	e7cd      	b.n	28fe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
    2962:	2405      	movs	r4, #5
    2964:	e7cb      	b.n	28fe <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
    2966:	2403      	movs	r4, #3
    2968:	e7c9      	b.n	28fe <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    296a:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    296c:	bf42      	ittt	mi
    296e:	2301      	movmi	r3, #1
    2970:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
    2972:	f8cc 350c 	strmi.w	r3, [ip, #1292]	; 0x50c
}
    2976:	e7d7      	b.n	2928 <gpio_nrfx_config+0x6c>
    2978:	00f00006 	.word	0x00f00006
    297c:	00100006 	.word	0x00100006
    2980:	00400002 	.word	0x00400002

00002984 <gpiote_event_handler>:
{
    2984:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2986:	2400      	movs	r4, #0
{
    2988:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    298a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    298e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2992:	4e26      	ldr	r6, [pc, #152]	; (2a2c <gpiote_event_handler+0xa8>)
    2994:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
    2996:	b15d      	cbz	r5, 29b0 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    2998:	a902      	add	r1, sp, #8
    299a:	4825      	ldr	r0, [pc, #148]	; (2a30 <gpiote_event_handler+0xac>)
    299c:	f003 fe4c 	bl	6638 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    29a0:	a903      	add	r1, sp, #12
		fired_triggers[0] =
    29a2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    29a4:	4823      	ldr	r0, [pc, #140]	; (2a34 <gpiote_event_handler+0xb0>)
    29a6:	f003 fe47 	bl	6638 <check_level_trigger_pins>
		fired_triggers[1] =
    29aa:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    29ac:	6034      	str	r4, [r6, #0]
    29ae:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
    29b0:	4c21      	ldr	r4, [pc, #132]	; (2a38 <gpiote_event_handler+0xb4>)
{
    29b2:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    29b4:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    29b6:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
    29b8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    29bc:	fa06 f102 	lsl.w	r1, r6, r2
    29c0:	4219      	tst	r1, r3
    29c2:	d01b      	beq.n	29fc <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29c4:	0091      	lsls	r1, r2, #2
    29c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    29ca:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    29ce:	680b      	ldr	r3, [r1, #0]
    29d0:	b1a3      	cbz	r3, 29fc <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    29d2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    29d6:	af04      	add	r7, sp, #16
    29d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    29dc:	f8c1 c000 	str.w	ip, [r1]
    29e0:	f3c3 3040 	ubfx	r0, r3, #13, #1
    29e4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    29e8:	f3c3 2304 	ubfx	r3, r3, #8, #5
    29ec:	f850 7c10 	ldr.w	r7, [r0, #-16]
    29f0:	fa06 f303 	lsl.w	r3, r6, r3
    29f4:	433b      	orrs	r3, r7
    29f6:	f840 3c10 	str.w	r3, [r0, #-16]
    29fa:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    29fc:	3201      	adds	r2, #1
    29fe:	2a08      	cmp	r2, #8
    2a00:	d1da      	bne.n	29b8 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
    2a02:	9a00      	ldr	r2, [sp, #0]
    2a04:	b11a      	cbz	r2, 2a0e <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
    2a06:	490a      	ldr	r1, [pc, #40]	; (2a30 <gpiote_event_handler+0xac>)
    2a08:	480c      	ldr	r0, [pc, #48]	; (2a3c <gpiote_event_handler+0xb8>)
    2a0a:	f7ff fde3 	bl	25d4 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
    2a0e:	9a01      	ldr	r2, [sp, #4]
    2a10:	b11a      	cbz	r2, 2a1a <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
    2a12:	4908      	ldr	r1, [pc, #32]	; (2a34 <gpiote_event_handler+0xb0>)
    2a14:	480a      	ldr	r0, [pc, #40]	; (2a40 <gpiote_event_handler+0xbc>)
    2a16:	f7ff fddd 	bl	25d4 <gpio_fire_callbacks>
	if (port_event) {
    2a1a:	b12d      	cbz	r5, 2a28 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    2a1c:	4804      	ldr	r0, [pc, #16]	; (2a30 <gpiote_event_handler+0xac>)
    2a1e:	f003 fe4f 	bl	66c0 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    2a22:	4804      	ldr	r0, [pc, #16]	; (2a34 <gpiote_event_handler+0xb0>)
    2a24:	f003 fe4c 	bl	66c0 <cfg_level_pins>
}
    2a28:	b005      	add	sp, #20
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a2c:	4000617c 	.word	0x4000617c
    2a30:	00006a08 	.word	0x00006a08
    2a34:	00006a20 	.word	0x00006a20
    2a38:	40006000 	.word	0x40006000
    2a3c:	200009bc 	.word	0x200009bc
    2a40:	200009d8 	.word	0x200009d8

00002a44 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2a44:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2a46:	794b      	ldrb	r3, [r1, #5]
    2a48:	2b01      	cmp	r3, #1
    2a4a:	d02a      	beq.n	2aa2 <uarte_nrfx_configure+0x5e>
    2a4c:	2b03      	cmp	r3, #3
    2a4e:	d125      	bne.n	2a9c <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2a50:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2a52:	798b      	ldrb	r3, [r1, #6]
    2a54:	2b03      	cmp	r3, #3
    2a56:	d121      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2a58:	79cc      	ldrb	r4, [r1, #7]
    2a5a:	b12c      	cbz	r4, 2a68 <uarte_nrfx_configure+0x24>
    2a5c:	2c01      	cmp	r4, #1
    2a5e:	d11d      	bne.n	2a9c <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2a60:	6843      	ldr	r3, [r0, #4]
    2a62:	685b      	ldr	r3, [r3, #4]
    2a64:	079b      	lsls	r3, r3, #30
    2a66:	d019      	beq.n	2a9c <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2a68:	790a      	ldrb	r2, [r1, #4]
    2a6a:	b112      	cbz	r2, 2a72 <uarte_nrfx_configure+0x2e>
    2a6c:	2a02      	cmp	r2, #2
    2a6e:	d115      	bne.n	2a9c <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2a70:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2a72:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2a74:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2a76:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2a7a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2a7c:	d065      	beq.n	2b4a <uarte_nrfx_configure+0x106>
    2a7e:	d82d      	bhi.n	2adc <uarte_nrfx_configure+0x98>
    2a80:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2a84:	d064      	beq.n	2b50 <uarte_nrfx_configure+0x10c>
    2a86:	d816      	bhi.n	2ab6 <uarte_nrfx_configure+0x72>
    2a88:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2a8c:	d062      	beq.n	2b54 <uarte_nrfx_configure+0x110>
    2a8e:	d80a      	bhi.n	2aa6 <uarte_nrfx_configure+0x62>
    2a90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2a94:	d061      	beq.n	2b5a <uarte_nrfx_configure+0x116>
    2a96:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2a9a:	d061      	beq.n	2b60 <uarte_nrfx_configure+0x11c>
    2a9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2aa0:	e052      	b.n	2b48 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    2aa2:	2600      	movs	r6, #0
    2aa4:	e7d5      	b.n	2a52 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2aa6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2aaa:	d05c      	beq.n	2b66 <uarte_nrfx_configure+0x122>
    2aac:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2ab0:	d1f4      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2ab2:	4b37      	ldr	r3, [pc, #220]	; (2b90 <uarte_nrfx_configure+0x14c>)
    2ab4:	e03c      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2ab6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2aba:	d057      	beq.n	2b6c <uarte_nrfx_configure+0x128>
    2abc:	d807      	bhi.n	2ace <uarte_nrfx_configure+0x8a>
    2abe:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2ac2:	d055      	beq.n	2b70 <uarte_nrfx_configure+0x12c>
    2ac4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2ac8:	d1e8      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2aca:	4b32      	ldr	r3, [pc, #200]	; (2b94 <uarte_nrfx_configure+0x150>)
    2acc:	e030      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2ace:	f647 2712 	movw	r7, #31250	; 0x7a12
    2ad2:	42bb      	cmp	r3, r7
    2ad4:	d1e2      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2ad6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2ada:	e029      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2adc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2ae0:	d048      	beq.n	2b74 <uarte_nrfx_configure+0x130>
    2ae2:	d813      	bhi.n	2b0c <uarte_nrfx_configure+0xc8>
    2ae4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2ae8:	d047      	beq.n	2b7a <uarte_nrfx_configure+0x136>
    2aea:	d809      	bhi.n	2b00 <uarte_nrfx_configure+0xbc>
    2aec:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2af0:	42bb      	cmp	r3, r7
    2af2:	d044      	beq.n	2b7e <uarte_nrfx_configure+0x13a>
    2af4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2af8:	d1d0      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2afa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2afe:	e017      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b00:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2b04:	d1ca      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2b06:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2b0a:	e011      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b0c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2b10:	d038      	beq.n	2b84 <uarte_nrfx_configure+0x140>
    2b12:	d808      	bhi.n	2b26 <uarte_nrfx_configure+0xe2>
    2b14:	4f20      	ldr	r7, [pc, #128]	; (2b98 <uarte_nrfx_configure+0x154>)
    2b16:	42bb      	cmp	r3, r7
    2b18:	d037      	beq.n	2b8a <uarte_nrfx_configure+0x146>
    2b1a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2b1e:	d1bd      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2b20:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2b24:	e004      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b26:	4f1d      	ldr	r7, [pc, #116]	; (2b9c <uarte_nrfx_configure+0x158>)
    2b28:	42bb      	cmp	r3, r7
    2b2a:	d1b7      	bne.n	2a9c <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2b2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2b30:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2b34:	6903      	ldr	r3, [r0, #16]
    2b36:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    2b38:	4334      	orrs	r4, r6
    2b3a:	4322      	orrs	r2, r4
    2b3c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2b3e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2b42:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2b46:	2000      	movs	r0, #0
}
    2b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2b4a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2b4e:	e7ef      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2b50:	4b13      	ldr	r3, [pc, #76]	; (2ba0 <uarte_nrfx_configure+0x15c>)
    2b52:	e7ed      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2b54:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2b58:	e7ea      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    2b5a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2b5e:	e7e7      	b.n	2b30 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2b60:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2b64:	e7e4      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2b66:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2b6a:	e7e1      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2b6c:	4b0d      	ldr	r3, [pc, #52]	; (2ba4 <uarte_nrfx_configure+0x160>)
    2b6e:	e7df      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <uarte_nrfx_configure+0x164>)
    2b72:	e7dd      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2b74:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2b78:	e7da      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2b7a:	4b0c      	ldr	r3, [pc, #48]	; (2bac <uarte_nrfx_configure+0x168>)
    2b7c:	e7d8      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2b7e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2b82:	e7d5      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2b84:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2b88:	e7d2      	b.n	2b30 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2b8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2b8e:	e7cf      	b.n	2b30 <uarte_nrfx_configure+0xec>
    2b90:	0013b000 	.word	0x0013b000
    2b94:	004ea000 	.word	0x004ea000
    2b98:	0003d090 	.word	0x0003d090
    2b9c:	000f4240 	.word	0x000f4240
    2ba0:	00275000 	.word	0x00275000
    2ba4:	0075c000 	.word	0x0075c000
    2ba8:	003af000 	.word	0x003af000
    2bac:	013a9000 	.word	0x013a9000

00002bb0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2bb0:	6802      	ldr	r2, [r0, #0]
    switch (port)
    2bb2:	0953      	lsrs	r3, r2, #5
{
    2bb4:	b510      	push	{r4, lr}
    2bb6:	4604      	mov	r4, r0
    switch (port)
    2bb8:	d02c      	beq.n	2c14 <nrf_gpio_pin_port_decode+0x64>
    2bba:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    2bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bc0:	bf18      	it	ne
    2bc2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    2bc4:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    2bc8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    2bca:	07db      	lsls	r3, r3, #31
    2bcc:	d40b      	bmi.n	2be6 <nrf_gpio_pin_port_decode+0x36>
    2bce:	4914      	ldr	r1, [pc, #80]	; (2c20 <nrf_gpio_pin_port_decode+0x70>)
    2bd0:	4814      	ldr	r0, [pc, #80]	; (2c24 <nrf_gpio_pin_port_decode+0x74>)
    2bd2:	4a15      	ldr	r2, [pc, #84]	; (2c28 <nrf_gpio_pin_port_decode+0x78>)
    2bd4:	f44f 7305 	mov.w	r3, #532	; 0x214
    2bd8:	f003 fc1d 	bl	6416 <printk>
    2bdc:	4812      	ldr	r0, [pc, #72]	; (2c28 <nrf_gpio_pin_port_decode+0x78>)
    2bde:	f44f 7105 	mov.w	r1, #532	; 0x214
    2be2:	f003 fb3f 	bl	6264 <assert_post_action>
    uint32_t pin_number = *p_pin;
    2be6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    2be8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bec:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    2bee:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bf0:	d00d      	beq.n	2c0e <nrf_gpio_pin_port_decode+0x5e>
    2bf2:	2b01      	cmp	r3, #1
    2bf4:	d011      	beq.n	2c1a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    2bf6:	490d      	ldr	r1, [pc, #52]	; (2c2c <nrf_gpio_pin_port_decode+0x7c>)
    2bf8:	480a      	ldr	r0, [pc, #40]	; (2c24 <nrf_gpio_pin_port_decode+0x74>)
    2bfa:	4a0b      	ldr	r2, [pc, #44]	; (2c28 <nrf_gpio_pin_port_decode+0x78>)
    2bfc:	f240 2319 	movw	r3, #537	; 0x219
    2c00:	f003 fc09 	bl	6416 <printk>
    2c04:	4808      	ldr	r0, [pc, #32]	; (2c28 <nrf_gpio_pin_port_decode+0x78>)
    2c06:	f240 2119 	movw	r1, #537	; 0x219
    2c0a:	f003 fb2b 	bl	6264 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    2c12:	bd10      	pop	{r4, pc}
    switch (port)
    2c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c18:	e7d4      	b.n	2bc4 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    2c1a:	4805      	ldr	r0, [pc, #20]	; (2c30 <nrf_gpio_pin_port_decode+0x80>)
    2c1c:	e7f9      	b.n	2c12 <nrf_gpio_pin_port_decode+0x62>
    2c1e:	bf00      	nop
    2c20:	0000766a 	.word	0x0000766a
    2c24:	00006f96 	.word	0x00006f96
    2c28:	00007637 	.word	0x00007637
    2c2c:	00007091 	.word	0x00007091
    2c30:	50000300 	.word	0x50000300

00002c34 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2c36:	6906      	ldr	r6, [r0, #16]
{
    2c38:	4605      	mov	r5, r0
    2c3a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2c3c:	f003 fe6c 	bl	6918 <k_is_in_isr>
    2c40:	b910      	cbnz	r0, 2c48 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2c42:	4b2c      	ldr	r3, [pc, #176]	; (2cf4 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	b983      	cbnz	r3, 2c6a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2c48:	f04f 0320 	mov.w	r3, #32
    2c4c:	f3ef 8411 	mrs	r4, BASEPRI
    2c50:	f383 8812 	msr	BASEPRI_MAX, r3
    2c54:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2c58:	4628      	mov	r0, r5
    2c5a:	f003 fda0 	bl	679e <is_tx_ready>
    2c5e:	bb28      	cbnz	r0, 2cac <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2c60:	f384 8811 	msr	BASEPRI, r4
    2c64:	f3bf 8f6f 	isb	sy
}
    2c68:	e7ee      	b.n	2c48 <uarte_nrfx_poll_out+0x14>
{
    2c6a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2c6c:	4628      	mov	r0, r5
    2c6e:	f003 fd96 	bl	679e <is_tx_ready>
    2c72:	b970      	cbnz	r0, 2c92 <uarte_nrfx_poll_out+0x5e>
    2c74:	2001      	movs	r0, #1
    2c76:	f003 fde5 	bl	6844 <nrfx_busy_wait>
    2c7a:	3c01      	subs	r4, #1
    2c7c:	d1f6      	bne.n	2c6c <uarte_nrfx_poll_out+0x38>
    2c7e:	2100      	movs	r1, #0
    2c80:	2021      	movs	r0, #33	; 0x21
    2c82:	f002 fa93 	bl	51ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c86:	e7f0      	b.n	2c6a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2c88:	f384 8811 	msr	BASEPRI, r4
    2c8c:	f3bf 8f6f 	isb	sy
}
    2c90:	e7f5      	b.n	2c7e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2c92:	f04f 0320 	mov.w	r3, #32
    2c96:	f3ef 8411 	mrs	r4, BASEPRI
    2c9a:	f383 8812 	msr	BASEPRI_MAX, r3
    2c9e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2ca2:	4628      	mov	r0, r5
    2ca4:	f003 fd7b 	bl	679e <is_tx_ready>
    2ca8:	2800      	cmp	r0, #0
    2caa:	d0ed      	beq.n	2c88 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2cac:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2cb0:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2cb2:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2cb4:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2cb6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2cba:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cbe:	2200      	movs	r2, #0
    2cc0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2cc4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2cc8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2ccc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2cd0:	684a      	ldr	r2, [r1, #4]
    2cd2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2cd4:	bf41      	itttt	mi
    2cd6:	2208      	movmi	r2, #8
    2cd8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2cdc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2ce0:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ce4:	2201      	movs	r2, #1
    2ce6:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2ce8:	f384 8811 	msr	BASEPRI, r4
    2cec:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf2:	bf00      	nop
    2cf4:	20000f82 	.word	0x20000f82

00002cf8 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2cf8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2cfc:	6845      	ldr	r5, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2cfe:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d00:	682c      	ldr	r4, [r5, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d02:	2300      	movs	r3, #0
    2d04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2d08:	4607      	mov	r7, r0
    2d0a:	68ab      	ldr	r3, [r5, #8]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2d0c:	6030      	str	r0, [r6, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d0e:	a801      	add	r0, sp, #4
    2d10:	9301      	str	r3, [sp, #4]
    2d12:	f7ff ff4d 	bl	2bb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d16:	9a01      	ldr	r2, [sp, #4]
    2d18:	2301      	movs	r3, #1
    2d1a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2d1c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2d20:	68ab      	ldr	r3, [r5, #8]
    2d22:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d24:	a801      	add	r0, sp, #4
    2d26:	f7ff ff43 	bl	2bb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2d2a:	9b01      	ldr	r3, [sp, #4]
    2d2c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2d30:	2203      	movs	r2, #3
    2d32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
	nrf_gpio_cfg_output(cfg->pseltxd);

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    2d36:	68eb      	ldr	r3, [r5, #12]
    2d38:	1c59      	adds	r1, r3, #1
    2d3a:	d00c      	beq.n	2d56 <uarte_instance_init.isra.0+0x5e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d3c:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    2d3e:	f895 8018 	ldrb.w	r8, [r5, #24]
    nrf_gpio_cfg(
    2d42:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d44:	f7ff ff34 	bl	2bb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2d4e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2d52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    2d56:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    p_reg->PSEL.TXD = pseltxd;
    2d5a:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2d5e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    2d62:	692b      	ldr	r3, [r5, #16]
    2d64:	1c5a      	adds	r2, r3, #1
    2d66:	d00c      	beq.n	2d82 <uarte_instance_init.isra.0+0x8a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d68:	a801      	add	r0, sp, #4
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    2d6a:	f895 8019 	ldrb.w	r8, [r5, #25]
    nrf_gpio_cfg(
    2d6e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d70:	f7ff ff1e 	bl	2bb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2d74:	9b01      	ldr	r3, [sp, #4]
    2d76:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2d7a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    2d7e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    2d82:	696b      	ldr	r3, [r5, #20]
    2d84:	1c58      	adds	r0, r3, #1
    2d86:	d013      	beq.n	2db0 <uarte_instance_init.isra.0+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d88:	a801      	add	r0, sp, #4
    2d8a:	9301      	str	r3, [sp, #4]
    2d8c:	f7ff ff10 	bl	2bb0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2d90:	9a01      	ldr	r2, [sp, #4]
    2d92:	2301      	movs	r3, #1
    2d94:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    2d96:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    2d9a:	696b      	ldr	r3, [r5, #20]
    2d9c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2d9e:	a801      	add	r0, sp, #4
    2da0:	f7ff ff06 	bl	2bb0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    2da4:	9b01      	ldr	r3, [sp, #4]
    2da6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2daa:	2203      	movs	r2, #3
    2dac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    2db0:	e9d5 3204 	ldrd	r3, r2, [r5, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2db4:	6939      	ldr	r1, [r7, #16]
    p_reg->PSEL.RTS = pselrts;
    2db6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    2dba:	4638      	mov	r0, r7
    p_reg->PSEL.CTS = pselcts;
    2dbc:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    2dc0:	3104      	adds	r1, #4
    2dc2:	f7ff fe3f 	bl	2a44 <uarte_nrfx_configure>
	if (err) {
    2dc6:	4607      	mov	r7, r0
    2dc8:	2800      	cmp	r0, #0
    2dca:	d145      	bne.n	2e58 <uarte_instance_init.isra.0+0x160>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2dcc:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2dce:	0719      	lsls	r1, r3, #28
    2dd0:	d519      	bpl.n	2e06 <uarte_instance_init.isra.0+0x10e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2dd2:	f106 0012 	add.w	r0, r6, #18
    2dd6:	f000 fc7b 	bl	36d0 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2dda:	4b23      	ldr	r3, [pc, #140]	; (2e68 <uarte_instance_init.isra.0+0x170>)
    2ddc:	4298      	cmp	r0, r3
    2dde:	d13f      	bne.n	2e60 <uarte_instance_init.isra.0+0x168>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2de0:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2de2:	00c3      	lsls	r3, r0, #3
    2de4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2de8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2dec:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2df0:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2df4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2df8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2dfc:	4a1b      	ldr	r2, [pc, #108]	; (2e6c <uarte_instance_init.isra.0+0x174>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2dfe:	2301      	movs	r3, #1
    2e00:	4083      	lsls	r3, r0
    2e02:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2e06:	2308      	movs	r3, #8
    2e08:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    2e0c:	68eb      	ldr	r3, [r5, #12]
    2e0e:	3301      	adds	r3, #1
    2e10:	d00c      	beq.n	2e2c <uarte_instance_init.isra.0+0x134>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e12:	2300      	movs	r3, #0
    2e14:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2e18:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2e1c:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2e20:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2e24:	2301      	movs	r3, #1
    2e26:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e2a:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e2c:	686b      	ldr	r3, [r5, #4]
    2e2e:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    2e30:	bf5c      	itt	pl
    2e32:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2e36:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e3a:	06db      	lsls	r3, r3, #27
    2e3c:	bf44      	itt	mi
    2e3e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e42:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2e46:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    2e48:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e4a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e4e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e52:	2301      	movs	r3, #1
    2e54:	60a3      	str	r3, [r4, #8]
    2e56:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2e58:	4638      	mov	r0, r7
    2e5a:	b002      	add	sp, #8
    2e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
    2e60:	f06f 0704 	mvn.w	r7, #4
    2e64:	e7f8      	b.n	2e58 <uarte_instance_init.isra.0+0x160>
    2e66:	bf00      	nop
    2e68:	0bad0000 	.word	0x0bad0000
    2e6c:	4001f000 	.word	0x4001f000

00002e70 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2e70:	4919      	ldr	r1, [pc, #100]	; (2ed8 <sys_clock_timeout_handler+0x68>)
{
    2e72:	b570      	push	{r4, r5, r6, lr}
    2e74:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2e76:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2e7a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2e7c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2e80:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2e84:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2e86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2e8a:	f04f 0500 	mov.w	r5, #0
    2e8e:	d20a      	bcs.n	2ea6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2e90:	4b12      	ldr	r3, [pc, #72]	; (2edc <sys_clock_timeout_handler+0x6c>)
    2e92:	6819      	ldr	r1, [r3, #0]
    2e94:	060a      	lsls	r2, r1, #24
    2e96:	0a0b      	lsrs	r3, r1, #8
    2e98:	1992      	adds	r2, r2, r6
    2e9a:	4911      	ldr	r1, [pc, #68]	; (2ee0 <sys_clock_timeout_handler+0x70>)
    2e9c:	f143 0300 	adc.w	r3, r3, #0
    2ea0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    2ea4:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2ea6:	f002 fead 	bl	5c04 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2eaa:	00a3      	lsls	r3, r4, #2
    2eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2eb0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2eb4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2eb8:	42b2      	cmp	r2, r6
    2eba:	d10b      	bne.n	2ed4 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2ebc:	b91d      	cbnz	r5, 2ec6 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    2ebe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2ec2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2ec6:	4b07      	ldr	r3, [pc, #28]	; (2ee4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2ec8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2ecc:	fa00 f404 	lsl.w	r4, r0, r4
    2ed0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2ed4:	bd70      	pop	{r4, r5, r6, pc}
    2ed6:	bf00      	nop
    2ed8:	200002c8 	.word	0x200002c8
    2edc:	200009f8 	.word	0x200009f8
    2ee0:	200002b0 	.word	0x200002b0
    2ee4:	40011000 	.word	0x40011000

00002ee8 <compare_int_lock>:
{
    2ee8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2eea:	2301      	movs	r3, #1
    2eec:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2eee:	4a11      	ldr	r2, [pc, #68]	; (2f34 <compare_int_lock+0x4c>)
    2ef0:	f3bf 8f5b 	dmb	ish
    2ef4:	43dc      	mvns	r4, r3
    2ef6:	e852 1f00 	ldrex	r1, [r2]
    2efa:	ea01 0c04 	and.w	ip, r1, r4
    2efe:	e842 ce00 	strex	lr, ip, [r2]
    2f02:	f1be 0f00 	cmp.w	lr, #0
    2f06:	d1f6      	bne.n	2ef6 <compare_int_lock+0xe>
    2f08:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2f10:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2f14:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2f1c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2f20:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f24:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    2f28:	420b      	tst	r3, r1
}
    2f2a:	bf14      	ite	ne
    2f2c:	2001      	movne	r0, #1
    2f2e:	2000      	moveq	r0, #0
    2f30:	bd10      	pop	{r4, pc}
    2f32:	bf00      	nop
    2f34:	200009f4 	.word	0x200009f4

00002f38 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    2f38:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2f3a:	4a12      	ldr	r2, [pc, #72]	; (2f84 <compare_int_unlock.part.0+0x4c>)
    2f3c:	f3bf 8f5b 	dmb	ish
    2f40:	4083      	lsls	r3, r0
    2f42:	e852 1f00 	ldrex	r1, [r2]
    2f46:	4319      	orrs	r1, r3
    2f48:	e842 1c00 	strex	ip, r1, [r2]
    2f4c:	f1bc 0f00 	cmp.w	ip, #0
    2f50:	d1f7      	bne.n	2f42 <compare_int_unlock.part.0+0xa>
    2f52:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2f56:	4a0c      	ldr	r2, [pc, #48]	; (2f88 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2f5c:	4083      	lsls	r3, r0
    2f5e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2f62:	4b0a      	ldr	r3, [pc, #40]	; (2f8c <compare_int_unlock.part.0+0x54>)
    2f64:	f3bf 8f5b 	dmb	ish
    2f68:	681b      	ldr	r3, [r3, #0]
    2f6a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2f6e:	fa23 f000 	lsr.w	r0, r3, r0
    2f72:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2f74:	bf42      	ittt	mi
    2f76:	4b06      	ldrmi	r3, [pc, #24]	; (2f90 <compare_int_unlock.part.0+0x58>)
    2f78:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2f7c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2f80:	4770      	bx	lr
    2f82:	bf00      	nop
    2f84:	200009f4 	.word	0x200009f4
    2f88:	40011000 	.word	0x40011000
    2f8c:	200009f0 	.word	0x200009f0
    2f90:	e000e100 	.word	0xe000e100

00002f94 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2f94:	4b0d      	ldr	r3, [pc, #52]	; (2fcc <z_nrf_rtc_timer_read+0x38>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	0a19      	lsrs	r1, r3, #8
    2f9a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2f9c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2fa0:	4b0b      	ldr	r3, [pc, #44]	; (2fd0 <z_nrf_rtc_timer_read+0x3c>)
    2fa2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2fa6:	18c0      	adds	r0, r0, r3
    2fa8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2fb0:	d20a      	bcs.n	2fc8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2fb2:	4b08      	ldr	r3, [pc, #32]	; (2fd4 <z_nrf_rtc_timer_read+0x40>)
    2fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    2fb8:	4299      	cmp	r1, r3
    2fba:	bf08      	it	eq
    2fbc:	4290      	cmpeq	r0, r2
    2fbe:	d203      	bcs.n	2fc8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2fc0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2fc4:	f141 0100 	adc.w	r1, r1, #0
}
    2fc8:	4770      	bx	lr
    2fca:	bf00      	nop
    2fcc:	200009f8 	.word	0x200009f8
    2fd0:	40011000 	.word	0x40011000
    2fd4:	200002b0 	.word	0x200002b0

00002fd8 <compare_set>:
{
    2fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fdc:	b085      	sub	sp, #20
    2fde:	4616      	mov	r6, r2
    2fe0:	461f      	mov	r7, r3
    2fe2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2fe4:	f7ff ff80 	bl	2ee8 <compare_int_lock>
    2fe8:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2fea:	f7ff ffd3 	bl	2f94 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2fee:	42b9      	cmp	r1, r7
    2ff0:	bf08      	it	eq
    2ff2:	42b0      	cmpeq	r0, r6
    2ff4:	d27f      	bcs.n	30f6 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    2ff6:	ebb6 0800 	subs.w	r8, r6, r0
    2ffa:	eb67 0901 	sbc.w	r9, r7, r1
    2ffe:	2300      	movs	r3, #0
    3000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3004:	454b      	cmp	r3, r9
    3006:	bf08      	it	eq
    3008:	4542      	cmpeq	r2, r8
    300a:	f0c0 8085 	bcc.w	3118 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    300e:	4b44      	ldr	r3, [pc, #272]	; (3120 <compare_set+0x148>)
    3010:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3014:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3018:	429f      	cmp	r7, r3
    301a:	bf08      	it	eq
    301c:	4296      	cmpeq	r6, r2
    301e:	d054      	beq.n	30ca <compare_set+0xf2>
    3020:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3024:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    3028:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    302c:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3030:	fa0b f205 	lsl.w	r2, fp, r5
    3034:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3038:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    303c:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3040:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    3042:	4a38      	ldr	r2, [pc, #224]	; (3124 <compare_set+0x14c>)
    return p_reg->CC[ch];
    3044:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    3048:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    304c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    3050:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3054:	461c      	mov	r4, r3
    3056:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    3058:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    305c:	eba0 000a 	sub.w	r0, r0, sl
    3060:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3064:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3068:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    306a:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    306e:	d105      	bne.n	307c <compare_set+0xa4>
    3070:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    3072:	2013      	movs	r0, #19
    3074:	f003 fc5c 	bl	6930 <z_impl_k_busy_wait>
    3078:	4a2a      	ldr	r2, [pc, #168]	; (3124 <compare_set+0x14c>)
    307a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    307c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    307e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3082:	eba4 000c 	sub.w	r0, r4, ip
    3086:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    308a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    308e:	bf88      	it	hi
    3090:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3092:	2000      	movs	r0, #0
    3094:	f8c8 0000 	str.w	r0, [r8]
    3098:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    309c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    30a0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    30a4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    30a8:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    30ac:	4582      	cmp	sl, r0
    30ae:	d006      	beq.n	30be <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    30b0:	1a20      	subs	r0, r4, r0
    30b2:	3802      	subs	r0, #2
    30b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    30b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    30bc:	d819      	bhi.n	30f2 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    30be:	1ae4      	subs	r4, r4, r3
    30c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    30c4:	1932      	adds	r2, r6, r4
    30c6:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    30ca:	4c15      	ldr	r4, [pc, #84]	; (3120 <compare_set+0x148>)
    30cc:	0129      	lsls	r1, r5, #4
    30ce:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    30d2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    30d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    30d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    30da:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    30dc:	6043      	str	r3, [r0, #4]
	return ret;
    30de:	2400      	movs	r4, #0
	if (key) {
    30e0:	9b01      	ldr	r3, [sp, #4]
    30e2:	b113      	cbz	r3, 30ea <compare_set+0x112>
    30e4:	4628      	mov	r0, r5
    30e6:	f7ff ff27 	bl	2f38 <compare_int_unlock.part.0>
}
    30ea:	4620      	mov	r0, r4
    30ec:	b005      	add	sp, #20
    30ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30f2:	4620      	mov	r0, r4
    30f4:	e7b0      	b.n	3058 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    30f6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    30f8:	4a0b      	ldr	r2, [pc, #44]	; (3128 <compare_set+0x150>)
    30fa:	f3bf 8f5b 	dmb	ish
    30fe:	40ab      	lsls	r3, r5
    3100:	e852 1f00 	ldrex	r1, [r2]
    3104:	4319      	orrs	r1, r3
    3106:	e842 1000 	strex	r0, r1, [r2]
    310a:	2800      	cmp	r0, #0
    310c:	d1f8      	bne.n	3100 <compare_set+0x128>
    310e:	f3bf 8f5b 	dmb	ish
    3112:	4632      	mov	r2, r6
    3114:	463b      	mov	r3, r7
    3116:	e7d8      	b.n	30ca <compare_set+0xf2>
			return -EINVAL;
    3118:	f06f 0415 	mvn.w	r4, #21
    311c:	e7e0      	b.n	30e0 <compare_set+0x108>
    311e:	bf00      	nop
    3120:	200002b8 	.word	0x200002b8
    3124:	40011000 	.word	0x40011000
    3128:	200009f0 	.word	0x200009f0

0000312c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    312c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3130:	4c34      	ldr	r4, [pc, #208]	; (3204 <rtc_nrf_isr+0xd8>)
    3132:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3136:	079a      	lsls	r2, r3, #30
    3138:	d509      	bpl.n	314e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    313a:	4b33      	ldr	r3, [pc, #204]	; (3208 <rtc_nrf_isr+0xdc>)
    313c:	681a      	ldr	r2, [r3, #0]
    313e:	b132      	cbz	r2, 314e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3140:	2200      	movs	r2, #0
    3142:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    3144:	4a31      	ldr	r2, [pc, #196]	; (320c <rtc_nrf_isr+0xe0>)
    3146:	681b      	ldr	r3, [r3, #0]
    3148:	6813      	ldr	r3, [r2, #0]
    314a:	3301      	adds	r3, #1
    314c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    314e:	f04f 0320 	mov.w	r3, #32
    3152:	f3ef 8211 	mrs	r2, BASEPRI
    3156:	f383 8812 	msr	BASEPRI_MAX, r3
    315a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    315e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3162:	03db      	lsls	r3, r3, #15
    3164:	d512      	bpl.n	318c <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3166:	f3bf 8f5b 	dmb	ish
    316a:	4b29      	ldr	r3, [pc, #164]	; (3210 <rtc_nrf_isr+0xe4>)
    316c:	e853 1f00 	ldrex	r1, [r3]
    3170:	f021 0001 	bic.w	r0, r1, #1
    3174:	e843 0600 	strex	r6, r0, [r3]
    3178:	2e00      	cmp	r6, #0
    317a:	d1f7      	bne.n	316c <rtc_nrf_isr+0x40>
    317c:	f3bf 8f5b 	dmb	ish
    3180:	4b24      	ldr	r3, [pc, #144]	; (3214 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3182:	2900      	cmp	r1, #0
    3184:	d136      	bne.n	31f4 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3186:	6819      	ldr	r1, [r3, #0]
		if (result) {
    3188:	2900      	cmp	r1, #0
    318a:	d133      	bne.n	31f4 <rtc_nrf_isr+0xc8>
{
    318c:	2300      	movs	r3, #0
	__asm__ volatile(
    318e:	f382 8811 	msr	BASEPRI, r2
    3192:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3196:	b353      	cbz	r3, 31ee <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    3198:	f7ff fefc 	bl	2f94 <z_nrf_rtc_timer_read>
    319c:	4606      	mov	r6, r0
	__asm__ volatile(
    319e:	f04f 0320 	mov.w	r3, #32
    31a2:	f3ef 8011 	mrs	r0, BASEPRI
    31a6:	f383 8812 	msr	BASEPRI_MAX, r3
    31aa:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    31ae:	4b1a      	ldr	r3, [pc, #104]	; (3218 <rtc_nrf_isr+0xec>)
    31b0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    31b4:	4549      	cmp	r1, r9
    31b6:	bf08      	it	eq
    31b8:	4546      	cmpeq	r6, r8
    31ba:	f04f 0200 	mov.w	r2, #0
    31be:	d31e      	bcc.n	31fe <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    31c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    31c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    31c8:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    31cc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    31d0:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    31d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    31d6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    31da:	f380 8811 	msr	BASEPRI, r0
    31de:	f3bf 8f6f 	isb	sy
		if (handler) {
    31e2:	b121      	cbz	r1, 31ee <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    31e4:	9500      	str	r5, [sp, #0]
    31e6:	4642      	mov	r2, r8
    31e8:	464b      	mov	r3, r9
    31ea:	2000      	movs	r0, #0
    31ec:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    31ee:	b003      	add	sp, #12
    31f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    31f4:	2100      	movs	r1, #0
    31f6:	6019      	str	r1, [r3, #0]
    31f8:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    31fa:	2301      	movs	r3, #1
}
    31fc:	e7c7      	b.n	318e <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    31fe:	4611      	mov	r1, r2
    3200:	e7eb      	b.n	31da <rtc_nrf_isr+0xae>
    3202:	bf00      	nop
    3204:	40011000 	.word	0x40011000
    3208:	40011104 	.word	0x40011104
    320c:	200009f8 	.word	0x200009f8
    3210:	200009f0 	.word	0x200009f0
    3214:	40011140 	.word	0x40011140
    3218:	200002b8 	.word	0x200002b8

0000321c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    321c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    321e:	4b1a      	ldr	r3, [pc, #104]	; (3288 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
    3220:	4d1a      	ldr	r5, [pc, #104]	; (328c <sys_clock_driver_init+0x70>)
    3222:	2400      	movs	r4, #0
    3224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    322c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3230:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3238:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    323c:	4b14      	ldr	r3, [pc, #80]	; (3290 <sys_clock_driver_init+0x74>)
    323e:	2602      	movs	r6, #2
    3240:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3244:	2101      	movs	r1, #1
    3246:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    324a:	2011      	movs	r0, #17
    324c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3250:	4622      	mov	r2, r4
    3252:	f7fe faf9 	bl	1848 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3256:	2011      	movs	r0, #17
    3258:	f7fe fad8 	bl	180c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    325c:	4a0d      	ldr	r2, [pc, #52]	; (3294 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    325e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3262:	2301      	movs	r3, #1
    3264:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3266:	4a0c      	ldr	r2, [pc, #48]	; (3298 <sys_clock_driver_init+0x7c>)
    3268:	602b      	str	r3, [r5, #0]
    326a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    326c:	4b0b      	ldr	r3, [pc, #44]	; (329c <sys_clock_driver_init+0x80>)
    326e:	4a0c      	ldr	r2, [pc, #48]	; (32a0 <sys_clock_driver_init+0x84>)
    3270:	9300      	str	r3, [sp, #0]
    3272:	9401      	str	r4, [sp, #4]
    3274:	2300      	movs	r3, #0
    3276:	4620      	mov	r0, r4
    3278:	f7ff feae 	bl	2fd8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    327c:	4630      	mov	r0, r6
    327e:	f7ff f87b 	bl	2378 <z_nrf_clock_control_lf_on>

	return 0;
}
    3282:	4620      	mov	r0, r4
    3284:	b002      	add	sp, #8
    3286:	bd70      	pop	{r4, r5, r6, pc}
    3288:	200002b8 	.word	0x200002b8
    328c:	40011000 	.word	0x40011000
    3290:	e000e100 	.word	0xe000e100
    3294:	40011008 	.word	0x40011008
    3298:	200009f4 	.word	0x200009f4
    329c:	00002e71 	.word	0x00002e71
    32a0:	007fffff 	.word	0x007fffff

000032a4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    32a4:	4b14      	ldr	r3, [pc, #80]	; (32f8 <sys_clock_set_timeout+0x54>)
{
    32a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    32a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    32ac:	bf08      	it	eq
    32ae:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    32b0:	1e44      	subs	r4, r0, #1
    32b2:	2c00      	cmp	r4, #0
    32b4:	dd1e      	ble.n	32f4 <sys_clock_set_timeout+0x50>
    32b6:	429c      	cmp	r4, r3
    32b8:	bfa8      	it	ge
    32ba:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    32bc:	f7ff fe6a 	bl	2f94 <z_nrf_rtc_timer_read>
    32c0:	4b0e      	ldr	r3, [pc, #56]	; (32fc <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    32c2:	490f      	ldr	r1, [pc, #60]	; (3300 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    32c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c8:	1a80      	subs	r0, r0, r2
		ticks = 0;
    32ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    32ce:	bf28      	it	cs
    32d0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    32d2:	3001      	adds	r0, #1
    32d4:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    32d6:	4808      	ldr	r0, [pc, #32]	; (32f8 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    32d8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    32da:	4284      	cmp	r4, r0
    32dc:	bf28      	it	cs
    32de:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    32e0:	1912      	adds	r2, r2, r4
    32e2:	f04f 0000 	mov.w	r0, #0
    32e6:	9001      	str	r0, [sp, #4]
    32e8:	f143 0300 	adc.w	r3, r3, #0
    32ec:	f7ff fe74 	bl	2fd8 <compare_set>
}
    32f0:	b002      	add	sp, #8
    32f2:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    32f4:	2400      	movs	r4, #0
    32f6:	e7e1      	b.n	32bc <sys_clock_set_timeout+0x18>
    32f8:	007fffff 	.word	0x007fffff
    32fc:	200002c8 	.word	0x200002c8
    3300:	00002e71 	.word	0x00002e71

00003304 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    3304:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3306:	f7ff fe45 	bl	2f94 <z_nrf_rtc_timer_read>
    330a:	4b02      	ldr	r3, [pc, #8]	; (3314 <sys_clock_elapsed+0x10>)
    330c:	681b      	ldr	r3, [r3, #0]
}
    330e:	1ac0      	subs	r0, r0, r3
    3310:	bd08      	pop	{r3, pc}
    3312:	bf00      	nop
    3314:	200002c8 	.word	0x200002c8

00003318 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    3318:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    331a:	4c06      	ldr	r4, [pc, #24]	; (3334 <sys_clock_isr+0x1c>)
    331c:	4906      	ldr	r1, [pc, #24]	; (3338 <sys_clock_isr+0x20>)
    331e:	4807      	ldr	r0, [pc, #28]	; (333c <sys_clock_isr+0x24>)
    3320:	4622      	mov	r2, r4
    3322:	2317      	movs	r3, #23
    3324:	f003 f877 	bl	6416 <printk>
    3328:	4620      	mov	r0, r4
    332a:	2117      	movs	r1, #23
}
    332c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    3330:	f002 bf98 	b.w	6264 <assert_post_action>
    3334:	000076a9 	.word	0x000076a9
    3338:	00007091 	.word	0x00007091
    333c:	00006f96 	.word	0x00006f96

00003340 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3340:	b508      	push	{r3, lr}
    switch (domain)
    3342:	b178      	cbz	r0, 3364 <nrf_clock_is_running.constprop.0+0x24>
    3344:	2801      	cmp	r0, #1
    3346:	d01c      	beq.n	3382 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    3348:	4a14      	ldr	r2, [pc, #80]	; (339c <nrf_clock_is_running.constprop.0+0x5c>)
    334a:	4915      	ldr	r1, [pc, #84]	; (33a0 <nrf_clock_is_running.constprop.0+0x60>)
    334c:	4815      	ldr	r0, [pc, #84]	; (33a4 <nrf_clock_is_running.constprop.0+0x64>)
    334e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    3352:	f003 f860 	bl	6416 <printk>
    3356:	4811      	ldr	r0, [pc, #68]	; (339c <nrf_clock_is_running.constprop.0+0x5c>)
    3358:	f44f 714f 	mov.w	r1, #828	; 0x33c
    335c:	f002 ff82 	bl	6264 <assert_post_action>
            return false;
    3360:	2000      	movs	r0, #0
    3362:	e00d      	b.n	3380 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    3364:	b131      	cbz	r1, 3374 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    336a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    336e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3372:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3378:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    337c:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3380:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3382:	b131      	cbz	r1, 3392 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3388:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    338c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3390:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3396:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    339a:	e7ef      	b.n	337c <nrf_clock_is_running.constprop.0+0x3c>
    339c:	000076e5 	.word	0x000076e5
    33a0:	00007091 	.word	0x00007091
    33a4:	00006f96 	.word	0x00006f96

000033a8 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    33a8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    33aa:	4604      	mov	r4, r0
    33ac:	b948      	cbnz	r0, 33c2 <nrfx_clock_init+0x1a>
    33ae:	490a      	ldr	r1, [pc, #40]	; (33d8 <nrfx_clock_init+0x30>)
    33b0:	480a      	ldr	r0, [pc, #40]	; (33dc <nrfx_clock_init+0x34>)
    33b2:	4a0b      	ldr	r2, [pc, #44]	; (33e0 <nrfx_clock_init+0x38>)
    33b4:	23b5      	movs	r3, #181	; 0xb5
    33b6:	f003 f82e 	bl	6416 <printk>
    33ba:	4809      	ldr	r0, [pc, #36]	; (33e0 <nrfx_clock_init+0x38>)
    33bc:	21b5      	movs	r1, #181	; 0xb5
    33be:	f002 ff51 	bl	6264 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    33c2:	4b08      	ldr	r3, [pc, #32]	; (33e4 <nrfx_clock_init+0x3c>)
    33c4:	791a      	ldrb	r2, [r3, #4]
    33c6:	b922      	cbnz	r2, 33d2 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    33c8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    33ca:	4807      	ldr	r0, [pc, #28]	; (33e8 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    33cc:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    33ce:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    33d0:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    33d2:	4806      	ldr	r0, [pc, #24]	; (33ec <nrfx_clock_init+0x44>)
    return err_code;
    33d4:	e7fc      	b.n	33d0 <nrfx_clock_init+0x28>
    33d6:	bf00      	nop
    33d8:	00007756 	.word	0x00007756
    33dc:	00006f96 	.word	0x00006f96
    33e0:	00007719 	.word	0x00007719
    33e4:	200009fc 	.word	0x200009fc
    33e8:	0bad0000 	.word	0x0bad0000
    33ec:	0bad000c 	.word	0x0bad000c

000033f0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    33f0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    33f2:	4b0b      	ldr	r3, [pc, #44]	; (3420 <nrfx_clock_enable+0x30>)
    33f4:	791b      	ldrb	r3, [r3, #4]
    33f6:	b94b      	cbnz	r3, 340c <nrfx_clock_enable+0x1c>
    33f8:	490a      	ldr	r1, [pc, #40]	; (3424 <nrfx_clock_enable+0x34>)
    33fa:	480b      	ldr	r0, [pc, #44]	; (3428 <nrfx_clock_enable+0x38>)
    33fc:	4a0b      	ldr	r2, [pc, #44]	; (342c <nrfx_clock_enable+0x3c>)
    33fe:	23ce      	movs	r3, #206	; 0xce
    3400:	f003 f809 	bl	6416 <printk>
    3404:	4809      	ldr	r0, [pc, #36]	; (342c <nrfx_clock_enable+0x3c>)
    3406:	21ce      	movs	r1, #206	; 0xce
    3408:	f002 ff2c 	bl	6264 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    340c:	2000      	movs	r0, #0
    340e:	f7fe fa0d 	bl	182c <arch_irq_is_enabled>
    3412:	b918      	cbnz	r0, 341c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3418:	f7fe b9f8 	b.w	180c <arch_irq_enable>
    341c:	bd08      	pop	{r3, pc}
    341e:	bf00      	nop
    3420:	200009fc 	.word	0x200009fc
    3424:	00007764 	.word	0x00007764
    3428:	00006f96 	.word	0x00006f96
    342c:	00007719 	.word	0x00007719

00003430 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3430:	4b22      	ldr	r3, [pc, #136]	; (34bc <nrfx_clock_start+0x8c>)
    3432:	791b      	ldrb	r3, [r3, #4]
{
    3434:	b513      	push	{r0, r1, r4, lr}
    3436:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3438:	b95b      	cbnz	r3, 3452 <nrfx_clock_start+0x22>
    343a:	4921      	ldr	r1, [pc, #132]	; (34c0 <nrfx_clock_start+0x90>)
    343c:	4821      	ldr	r0, [pc, #132]	; (34c4 <nrfx_clock_start+0x94>)
    343e:	4a22      	ldr	r2, [pc, #136]	; (34c8 <nrfx_clock_start+0x98>)
    3440:	f44f 7385 	mov.w	r3, #266	; 0x10a
    3444:	f002 ffe7 	bl	6416 <printk>
    3448:	481f      	ldr	r0, [pc, #124]	; (34c8 <nrfx_clock_start+0x98>)
    344a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    344e:	f002 ff09 	bl	6264 <assert_post_action>
    switch (domain)
    3452:	b174      	cbz	r4, 3472 <nrfx_clock_start+0x42>
    3454:	2c01      	cmp	r4, #1
    3456:	d027      	beq.n	34a8 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3458:	4a1b      	ldr	r2, [pc, #108]	; (34c8 <nrfx_clock_start+0x98>)
    345a:	491c      	ldr	r1, [pc, #112]	; (34cc <nrfx_clock_start+0x9c>)
    345c:	4819      	ldr	r0, [pc, #100]	; (34c4 <nrfx_clock_start+0x94>)
    345e:	f44f 739e 	mov.w	r3, #316	; 0x13c
    3462:	f002 ffd8 	bl	6416 <printk>
    3466:	4818      	ldr	r0, [pc, #96]	; (34c8 <nrfx_clock_start+0x98>)
    3468:	f44f 719e 	mov.w	r1, #316	; 0x13c
    346c:	f002 fefa 	bl	6264 <assert_post_action>
            break;
    }
}
    3470:	e016      	b.n	34a0 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3472:	a901      	add	r1, sp, #4
    3474:	4620      	mov	r0, r4
    3476:	f7ff ff63 	bl	3340 <nrf_clock_is_running.constprop.0>
    347a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    347e:	b188      	cbz	r0, 34a4 <nrfx_clock_start+0x74>
    3480:	9a01      	ldr	r2, [sp, #4]
    3482:	2a01      	cmp	r2, #1
    3484:	d10e      	bne.n	34a4 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3486:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    348a:	4b11      	ldr	r3, [pc, #68]	; (34d0 <nrfx_clock_start+0xa0>)
    348c:	2200      	movs	r2, #0
    348e:	601a      	str	r2, [r3, #0]
    3490:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3496:	2202      	movs	r2, #2
    3498:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    349c:	2201      	movs	r2, #1
    349e:	609a      	str	r2, [r3, #8]
}
    34a0:	b002      	add	sp, #8
    34a2:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    34a4:	2200      	movs	r2, #0
    34a6:	e7ee      	b.n	3486 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34a8:	4b0a      	ldr	r3, [pc, #40]	; (34d4 <nrfx_clock_start+0xa4>)
    34aa:	2200      	movs	r2, #0
    34ac:	601a      	str	r2, [r3, #0]
    34ae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    34b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34b4:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34b8:	601c      	str	r4, [r3, #0]
}
    34ba:	e7f1      	b.n	34a0 <nrfx_clock_start+0x70>
    34bc:	200009fc 	.word	0x200009fc
    34c0:	00007764 	.word	0x00007764
    34c4:	00006f96 	.word	0x00006f96
    34c8:	00007719 	.word	0x00007719
    34cc:	00007091 	.word	0x00007091
    34d0:	40000104 	.word	0x40000104
    34d4:	40000100 	.word	0x40000100

000034d8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    34d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34da:	4d2f      	ldr	r5, [pc, #188]	; (3598 <nrfx_clock_stop+0xc0>)
    34dc:	792a      	ldrb	r2, [r5, #4]
{
    34de:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34e0:	b95a      	cbnz	r2, 34fa <nrfx_clock_stop+0x22>
    34e2:	492e      	ldr	r1, [pc, #184]	; (359c <nrfx_clock_stop+0xc4>)
    34e4:	482e      	ldr	r0, [pc, #184]	; (35a0 <nrfx_clock_stop+0xc8>)
    34e6:	4a2f      	ldr	r2, [pc, #188]	; (35a4 <nrfx_clock_stop+0xcc>)
    34e8:	f240 1343 	movw	r3, #323	; 0x143
    34ec:	f002 ff93 	bl	6416 <printk>
    34f0:	482c      	ldr	r0, [pc, #176]	; (35a4 <nrfx_clock_stop+0xcc>)
    34f2:	f240 1143 	movw	r1, #323	; 0x143
    34f6:	f002 feb5 	bl	6264 <assert_post_action>
    switch (domain)
    34fa:	b17c      	cbz	r4, 351c <nrfx_clock_stop+0x44>
    34fc:	2c01      	cmp	r4, #1
    34fe:	d028      	beq.n	3552 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3500:	4929      	ldr	r1, [pc, #164]	; (35a8 <nrfx_clock_stop+0xd0>)
    3502:	4827      	ldr	r0, [pc, #156]	; (35a0 <nrfx_clock_stop+0xc8>)
    3504:	4a27      	ldr	r2, [pc, #156]	; (35a4 <nrfx_clock_stop+0xcc>)
    3506:	f240 135f 	movw	r3, #351	; 0x15f
    350a:	f002 ff84 	bl	6416 <printk>
    350e:	4825      	ldr	r0, [pc, #148]	; (35a4 <nrfx_clock_stop+0xcc>)
    3510:	f240 115f 	movw	r1, #351	; 0x15f
    3514:	f002 fea6 	bl	6264 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3518:	b003      	add	sp, #12
    351a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    351c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3520:	2202      	movs	r2, #2
    3522:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3526:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    352a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    352e:	2201      	movs	r2, #1
    3530:	681b      	ldr	r3, [r3, #0]
    3532:	4b1e      	ldr	r3, [pc, #120]	; (35ac <nrfx_clock_stop+0xd4>)
    3534:	f242 7410 	movw	r4, #10000	; 0x2710
    3538:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    353a:	2100      	movs	r1, #0
    353c:	4608      	mov	r0, r1
    353e:	f7ff feff 	bl	3340 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3542:	2800      	cmp	r0, #0
    3544:	d0e8      	beq.n	3518 <nrfx_clock_stop+0x40>
    3546:	2001      	movs	r0, #1
    3548:	f003 f97c 	bl	6844 <nrfx_busy_wait>
    354c:	3c01      	subs	r4, #1
    354e:	d1f4      	bne.n	353a <nrfx_clock_stop+0x62>
    3550:	e7e2      	b.n	3518 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    3552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3556:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3558:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    355c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3560:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3564:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3566:	4b12      	ldr	r3, [pc, #72]	; (35b0 <nrfx_clock_stop+0xd8>)
    3568:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    356a:	f88d 4007 	strb.w	r4, [sp, #7]
    356e:	f242 7410 	movw	r4, #10000	; 0x2710
    3572:	f10d 0107 	add.w	r1, sp, #7
    3576:	2001      	movs	r0, #1
    3578:	f7ff fee2 	bl	3340 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    357c:	b910      	cbnz	r0, 3584 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    357e:	2300      	movs	r3, #0
    3580:	716b      	strb	r3, [r5, #5]
    3582:	e7c9      	b.n	3518 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3584:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3588:	2801      	cmp	r0, #1
    358a:	d1f8      	bne.n	357e <nrfx_clock_stop+0xa6>
    358c:	f003 f95a 	bl	6844 <nrfx_busy_wait>
    3590:	3c01      	subs	r4, #1
    3592:	d1ee      	bne.n	3572 <nrfx_clock_stop+0x9a>
    3594:	e7f3      	b.n	357e <nrfx_clock_stop+0xa6>
    3596:	bf00      	nop
    3598:	200009fc 	.word	0x200009fc
    359c:	00007764 	.word	0x00007764
    35a0:	00006f96 	.word	0x00006f96
    35a4:	00007719 	.word	0x00007719
    35a8:	00007091 	.word	0x00007091
    35ac:	4000000c 	.word	0x4000000c
    35b0:	40000004 	.word	0x40000004

000035b4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35b4:	4b16      	ldr	r3, [pc, #88]	; (3610 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    35b6:	b507      	push	{r0, r1, r2, lr}
    35b8:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    35ba:	b16a      	cbz	r2, 35d8 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35bc:	2200      	movs	r2, #0
    35be:	601a      	str	r2, [r3, #0]
    35c0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    35c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35c6:	2201      	movs	r2, #1
    35c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    35cc:	4b11      	ldr	r3, [pc, #68]	; (3614 <nrfx_power_clock_irq_handler+0x60>)
    35ce:	7958      	ldrb	r0, [r3, #5]
    35d0:	b910      	cbnz	r0, 35d8 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    35d2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35d8:	4b0f      	ldr	r3, [pc, #60]	; (3618 <nrfx_power_clock_irq_handler+0x64>)
    35da:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    35dc:	b16a      	cbz	r2, 35fa <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35de:	2000      	movs	r0, #0
    35e0:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    35e2:	a901      	add	r1, sp, #4
    35e4:	681b      	ldr	r3, [r3, #0]
    35e6:	f7ff feab 	bl	3340 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    35ea:	9a01      	ldr	r2, [sp, #4]
    35ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35f0:	b932      	cbnz	r2, 3600 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35f2:	2201      	movs	r2, #1
    35f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35f8:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    35fa:	b003      	add	sp, #12
    35fc:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    3600:	2202      	movs	r2, #2
    3602:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3606:	4b03      	ldr	r3, [pc, #12]	; (3614 <nrfx_power_clock_irq_handler+0x60>)
    3608:	2001      	movs	r0, #1
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	4798      	blx	r3
}
    360e:	e7f4      	b.n	35fa <nrfx_power_clock_irq_handler+0x46>
    3610:	40000100 	.word	0x40000100
    3614:	200009fc 	.word	0x200009fc
    3618:	40000104 	.word	0x40000104

0000361c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    361c:	2301      	movs	r3, #1
    361e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3622:	f010 0fff 	tst.w	r0, #255	; 0xff
    3626:	d012      	beq.n	364e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    3628:	f04f 0320 	mov.w	r3, #32
    362c:	f3ef 8111 	mrs	r1, BASEPRI
    3630:	f383 8812 	msr	BASEPRI_MAX, r3
    3634:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    3638:	4a06      	ldr	r2, [pc, #24]	; (3654 <nrfx_gpiote_channel_free+0x38>)
    363a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    363c:	ea23 0000 	bic.w	r0, r3, r0
    3640:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    3642:	f381 8811 	msr	BASEPRI, r1
    3646:	f3bf 8f6f 	isb	sy
    364a:	4803      	ldr	r0, [pc, #12]	; (3658 <nrfx_gpiote_channel_free+0x3c>)
    364c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    364e:	4803      	ldr	r0, [pc, #12]	; (365c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3650:	4770      	bx	lr
    3652:	bf00      	nop
    3654:	20000a04 	.word	0x20000a04
    3658:	0bad0000 	.word	0x0bad0000
    365c:	0bad0004 	.word	0x0bad0004

00003660 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3664:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    3666:	f8df e060 	ldr.w	lr, [pc, #96]	; 36c8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    366a:	4816      	ldr	r0, [pc, #88]	; (36c4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    366c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 36cc <nrfx_gpiote_channel_alloc+0x6c>
{
    3670:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3672:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    3674:	2601      	movs	r6, #1
    3676:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    3678:	f04f 0120 	mov.w	r1, #32
    367c:	f3ef 8c11 	mrs	ip, BASEPRI
    3680:	f381 8812 	msr	BASEPRI_MAX, r1
    3684:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3688:	fa22 f103 	lsr.w	r1, r2, r3
    368c:	07c9      	lsls	r1, r1, #31
    368e:	d50a      	bpl.n	36a6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    3690:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    3694:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    3698:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    369a:	bf01      	itttt	eq
    369c:	4339      	orreq	r1, r7
    369e:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
    36a2:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    36a4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    36a6:	f38c 8811 	msr	BASEPRI, ip
    36aa:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    36ae:	4540      	cmp	r0, r8
    36b0:	d005      	beq.n	36be <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    36b2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    36b6:	439a      	bics	r2, r3
    36b8:	f104 0401 	add.w	r4, r4, #1
    36bc:	d1db      	bne.n	3676 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    36be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36c2:	bf00      	nop
    36c4:	0bad0002 	.word	0x0bad0002
    36c8:	20000a04 	.word	0x20000a04
    36cc:	0bad0000 	.word	0x0bad0000

000036d0 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    36d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    36d4:	4a14      	ldr	r2, [pc, #80]	; (3728 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    36d6:	4e15      	ldr	r6, [pc, #84]	; (372c <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    36d8:	4f15      	ldr	r7, [pc, #84]	; (3730 <nrfx_ppi_channel_alloc+0x60>)
{
    36da:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    36dc:	4815      	ldr	r0, [pc, #84]	; (3734 <nrfx_ppi_channel_alloc+0x64>)
{
    36de:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    36e0:	f04f 0e01 	mov.w	lr, #1
    36e4:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    36e8:	f04f 0320 	mov.w	r3, #32
    36ec:	f3ef 8811 	mrs	r8, BASEPRI
    36f0:	f383 8812 	msr	BASEPRI_MAX, r3
    36f4:	f3bf 8f6f 	isb	sy
    36f8:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    36fc:	4213      	tst	r3, r2
    36fe:	d007      	beq.n	3710 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    3700:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    3702:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3704:	bf01      	itttt	eq
    3706:	4319      	orreq	r1, r3
    3708:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    370a:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    370e:	4638      	moveq	r0, r7
	__asm__ volatile(
    3710:	f388 8811 	msr	BASEPRI, r8
    3714:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    3718:	42b8      	cmp	r0, r7
    371a:	d003      	beq.n	3724 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    371c:	439a      	bics	r2, r3
    371e:	f104 0401 	add.w	r4, r4, #1
    3722:	d1df      	bne.n	36e4 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3728:	000fffff 	.word	0x000fffff
    372c:	20000a64 	.word	0x20000a64
    3730:	0bad0000 	.word	0x0bad0000
    3734:	0bad0002 	.word	0x0bad0002

00003738 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3738:	4b03      	ldr	r3, [pc, #12]	; (3748 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    373a:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    373c:	f1a0 0308 	sub.w	r3, r0, #8
    3740:	4258      	negs	r0, r3
    3742:	4158      	adcs	r0, r3
    3744:	4770      	bx	lr
    3746:	bf00      	nop
    3748:	10000130 	.word	0x10000130

0000374c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    374c:	4b06      	ldr	r3, [pc, #24]	; (3768 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    374e:	681b      	ldr	r3, [r3, #0]
    3750:	2b08      	cmp	r3, #8
    3752:	d106      	bne.n	3762 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3754:	4b05      	ldr	r3, [pc, #20]	; (376c <nrf52_errata_103+0x20>)
    3756:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    3758:	2b05      	cmp	r3, #5
    375a:	d802      	bhi.n	3762 <nrf52_errata_103+0x16>
    375c:	4a04      	ldr	r2, [pc, #16]	; (3770 <nrf52_errata_103+0x24>)
    375e:	5cd0      	ldrb	r0, [r2, r3]
    3760:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    3762:	2000      	movs	r0, #0
    #endif
}
    3764:	4770      	bx	lr
    3766:	bf00      	nop
    3768:	10000130 	.word	0x10000130
    376c:	10000134 	.word	0x10000134
    3770:	00007788 	.word	0x00007788

00003774 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3774:	4a02      	ldr	r2, [pc, #8]	; (3780 <nvmc_wait+0xc>)
    3776:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    377a:	2b00      	cmp	r3, #0
    377c:	d0fb      	beq.n	3776 <nvmc_wait+0x2>
}
    377e:	4770      	bx	lr
    3780:	4001e000 	.word	0x4001e000

00003784 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3784:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3786:	f7ff ffd7 	bl	3738 <nrf52_errata_136>
    378a:	b140      	cbz	r0, 379e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    378c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3790:	2200      	movs	r2, #0
    3792:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3796:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    379a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    379e:	f7ff ffcb 	bl	3738 <nrf52_errata_136>
    37a2:	2800      	cmp	r0, #0
    37a4:	d046      	beq.n	3834 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    37a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    37aa:	4b5b      	ldr	r3, [pc, #364]	; (3918 <SystemInit+0x194>)
    37ac:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    37b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    37b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    37b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    37bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    37c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    37c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    37c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    37cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    37d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    37d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    37d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    37dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    37e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    37e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    37e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    37ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    37f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    37f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    37f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    37fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3800:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3804:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3808:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    380c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3810:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3814:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3818:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    381c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3820:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3824:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3828:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    382c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3830:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    3834:	f7ff ff8a 	bl	374c <nrf52_errata_103>
    3838:	b110      	cbz	r0, 3840 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    383a:	4b38      	ldr	r3, [pc, #224]	; (391c <SystemInit+0x198>)
    383c:	4a38      	ldr	r2, [pc, #224]	; (3920 <SystemInit+0x19c>)
    383e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    3840:	f7ff ff84 	bl	374c <nrf52_errata_103>
    3844:	b118      	cbz	r0, 384e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    3846:	4b37      	ldr	r3, [pc, #220]	; (3924 <SystemInit+0x1a0>)
    3848:	22fb      	movs	r2, #251	; 0xfb
    384a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    384e:	f7ff ff7d 	bl	374c <nrf52_errata_103>
    3852:	b148      	cbz	r0, 3868 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    3854:	4934      	ldr	r1, [pc, #208]	; (3928 <SystemInit+0x1a4>)
    3856:	4b35      	ldr	r3, [pc, #212]	; (392c <SystemInit+0x1a8>)
    3858:	680a      	ldr	r2, [r1, #0]
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	f022 020f 	bic.w	r2, r2, #15
    3860:	f003 030f 	and.w	r3, r3, #15
    3864:	4313      	orrs	r3, r2
    3866:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    3868:	f7ff ff70 	bl	374c <nrf52_errata_103>
    386c:	b118      	cbz	r0, 3876 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    386e:	4b30      	ldr	r3, [pc, #192]	; (3930 <SystemInit+0x1ac>)
    3870:	f44f 7200 	mov.w	r2, #512	; 0x200
    3874:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3876:	f7ff ff5f 	bl	3738 <nrf52_errata_136>
    387a:	b148      	cbz	r0, 3890 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    387c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3880:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3884:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3886:	bf44      	itt	mi
    3888:	f06f 0201 	mvnmi.w	r2, #1
    388c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3890:	4b28      	ldr	r3, [pc, #160]	; (3934 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	2b08      	cmp	r3, #8
    3896:	d10e      	bne.n	38b6 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3898:	4b27      	ldr	r3, [pc, #156]	; (3938 <SystemInit+0x1b4>)
    389a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    389c:	2b05      	cmp	r3, #5
    389e:	d802      	bhi.n	38a6 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    38a0:	4a26      	ldr	r2, [pc, #152]	; (393c <SystemInit+0x1b8>)
    38a2:	5cd3      	ldrb	r3, [r2, r3]
    38a4:	b13b      	cbz	r3, 38b6 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    38a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    38aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    38ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38b2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    38b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    38ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    38be:	2a00      	cmp	r2, #0
    38c0:	db03      	blt.n	38ca <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    38c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    38c6:	2b00      	cmp	r3, #0
    38c8:	da22      	bge.n	3910 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38ca:	491d      	ldr	r1, [pc, #116]	; (3940 <SystemInit+0x1bc>)
    38cc:	2301      	movs	r3, #1
    38ce:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    38d2:	f7ff ff4f 	bl	3774 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    38d6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    38da:	2412      	movs	r4, #18
    38dc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    38e0:	f7ff ff48 	bl	3774 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    38e4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    38e8:	f7ff ff44 	bl	3774 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    38ec:	2300      	movs	r3, #0
    38ee:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    38f2:	f7ff ff3f 	bl	3774 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    38f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    38fa:	4912      	ldr	r1, [pc, #72]	; (3944 <SystemInit+0x1c0>)
    38fc:	4b12      	ldr	r3, [pc, #72]	; (3948 <SystemInit+0x1c4>)
    38fe:	68ca      	ldr	r2, [r1, #12]
    3900:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3904:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3906:	60cb      	str	r3, [r1, #12]
    3908:	f3bf 8f4f 	dsb	sy
    __NOP();
    390c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    390e:	e7fd      	b.n	390c <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3910:	4b0e      	ldr	r3, [pc, #56]	; (394c <SystemInit+0x1c8>)
    3912:	4a0f      	ldr	r2, [pc, #60]	; (3950 <SystemInit+0x1cc>)
    3914:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3916:	bd10      	pop	{r4, pc}
    3918:	4000c000 	.word	0x4000c000
    391c:	4000568c 	.word	0x4000568c
    3920:	00038148 	.word	0x00038148
    3924:	4000f000 	.word	0x4000f000
    3928:	40000ee4 	.word	0x40000ee4
    392c:	10000258 	.word	0x10000258
    3930:	40029640 	.word	0x40029640
    3934:	10000130 	.word	0x10000130
    3938:	10000134 	.word	0x10000134
    393c:	00007782 	.word	0x00007782
    3940:	4001e000 	.word	0x4001e000
    3944:	e000ed00 	.word	0xe000ed00
    3948:	05fa0004 	.word	0x05fa0004
    394c:	2000005c 	.word	0x2000005c
    3950:	03d09000 	.word	0x03d09000

00003954 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3954:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3956:	4c14      	ldr	r4, [pc, #80]	; (39a8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3958:	4a14      	ldr	r2, [pc, #80]	; (39ac <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    395a:	4915      	ldr	r1, [pc, #84]	; (39b0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    395c:	2303      	movs	r3, #3
    395e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3960:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3962:	4b14      	ldr	r3, [pc, #80]	; (39b4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3964:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3966:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3968:	f44f 6380 	mov.w	r3, #1024	; 0x400
    396c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    396e:	2300      	movs	r3, #0
    3970:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3972:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3974:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3976:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3978:	4a0f      	ldr	r2, [pc, #60]	; (39b8 <_DoInit+0x64>)
    397a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    397c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    397e:	2210      	movs	r2, #16
    3980:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3982:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3984:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3986:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3988:	f002 fd72 	bl	6470 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    398c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3990:	490a      	ldr	r1, [pc, #40]	; (39bc <_DoInit+0x68>)
    3992:	4620      	mov	r0, r4
    3994:	f002 fd6c 	bl	6470 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3998:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    399c:	2320      	movs	r3, #32
    399e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    39a0:	f3bf 8f5f 	dmb	sy
}
    39a4:	bd10      	pop	{r4, pc}
    39a6:	bf00      	nop
    39a8:	20000a68 	.word	0x20000a68
    39ac:	0000778e 	.word	0x0000778e
    39b0:	00007797 	.word	0x00007797
    39b4:	20000b82 	.word	0x20000b82
    39b8:	20000b72 	.word	0x20000b72
    39bc:	0000779b 	.word	0x0000779b

000039c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <z_sys_init_run_level+0x3c>)
{
    39c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    39c8:	3001      	adds	r0, #1
    39ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    39ce:	42a6      	cmp	r6, r4
    39d0:	d800      	bhi.n	39d4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    39d2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    39d4:	e9d4 3500 	ldrd	r3, r5, [r4]
    39d8:	4628      	mov	r0, r5
    39da:	4798      	blx	r3
		if (dev != NULL) {
    39dc:	b165      	cbz	r5, 39f8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    39de:	68eb      	ldr	r3, [r5, #12]
    39e0:	b130      	cbz	r0, 39f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    39e2:	2800      	cmp	r0, #0
    39e4:	bfb8      	it	lt
    39e6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    39e8:	28ff      	cmp	r0, #255	; 0xff
    39ea:	bfa8      	it	ge
    39ec:	20ff      	movge	r0, #255	; 0xff
    39ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    39f0:	785a      	ldrb	r2, [r3, #1]
    39f2:	f042 0201 	orr.w	r2, r2, #1
    39f6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39f8:	3408      	adds	r4, #8
    39fa:	e7e8      	b.n	39ce <z_sys_init_run_level+0xe>
    39fc:	00006cf8 	.word	0x00006cf8

00003a00 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a02:	4604      	mov	r4, r0
    3a04:	460e      	mov	r6, r1
	__asm__ volatile(
    3a06:	f04f 0320 	mov.w	r3, #32
    3a0a:	f3ef 8711 	mrs	r7, BASEPRI
    3a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a12:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3a16:	f001 fc01 	bl	521c <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3a1a:	4631      	mov	r1, r6
    3a1c:	4605      	mov	r5, r0
    3a1e:	4620      	mov	r0, r4
    3a20:	f002 ff00 	bl	6824 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3a24:	2c04      	cmp	r4, #4
    3a26:	d10c      	bne.n	3a42 <z_fatal_error+0x42>
    3a28:	490a      	ldr	r1, [pc, #40]	; (3a54 <z_fatal_error+0x54>)
    3a2a:	4a0b      	ldr	r2, [pc, #44]	; (3a58 <z_fatal_error+0x58>)
    3a2c:	480b      	ldr	r0, [pc, #44]	; (3a5c <z_fatal_error+0x5c>)
    3a2e:	238f      	movs	r3, #143	; 0x8f
    3a30:	f002 fcf1 	bl	6416 <printk>
    3a34:	480a      	ldr	r0, [pc, #40]	; (3a60 <z_fatal_error+0x60>)
    3a36:	f002 fcee 	bl	6416 <printk>
    3a3a:	4807      	ldr	r0, [pc, #28]	; (3a58 <z_fatal_error+0x58>)
    3a3c:	218f      	movs	r1, #143	; 0x8f
    3a3e:	f002 fc11 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3a42:	f387 8811 	msr	BASEPRI, r7
    3a46:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3a4a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3a50:	f7fe b988 	b.w	1d64 <z_impl_k_thread_abort>
    3a54:	000077c4 	.word	0x000077c4
    3a58:	000077a2 	.word	0x000077a2
    3a5c:	00006f96 	.word	0x00006f96
    3a60:	000077e1 	.word	0x000077e1

00003a64 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3a64:	4c11      	ldr	r4, [pc, #68]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a66:	68a2      	ldr	r2, [r4, #8]
    3a68:	f992 200e 	ldrsb.w	r2, [r2, #14]
    3a6c:	2a00      	cmp	r2, #0
{
    3a6e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3a70:	da09      	bge.n	3a86 <idle+0x22>
    3a72:	490f      	ldr	r1, [pc, #60]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a74:	480f      	ldr	r0, [pc, #60]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a76:	4a10      	ldr	r2, [pc, #64]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a78:	2346      	movs	r3, #70	; 0x46
    3a7a:	f002 fccc 	bl	6416 <printk>
    3a7e:	480e      	ldr	r0, [pc, #56]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a80:	2146      	movs	r1, #70	; 0x46
    3a82:	f002 fbef 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3a86:	f04f 0220 	mov.w	r2, #32
    3a8a:	f3ef 8311 	mrs	r3, BASEPRI
    3a8e:	f382 8812 	msr	BASEPRI_MAX, r2
    3a92:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3a96:	f002 f81d 	bl	5ad4 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3a9a:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3a9c:	f7fd fdaa 	bl	15f4 <pm_system_suspend>
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d1f0      	bne.n	3a86 <idle+0x22>
	arch_cpu_idle();
    3aa4:	f7fd fe3c 	bl	1720 <arch_cpu_idle>
}
    3aa8:	e7ed      	b.n	3a86 <idle+0x22>
    3aaa:	bf00      	nop
    3aac:	20000b10 	.word	0x20000b10
    3ab0:	00007837 	.word	0x00007837
    3ab4:	00006f96 	.word	0x00006f96
    3ab8:	00007816 	.word	0x00007816

00003abc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3abc:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3abe:	2300      	movs	r3, #0
{
    3ac0:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    3ac2:	2201      	movs	r2, #1
    3ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3ac8:	220f      	movs	r2, #15
    3aca:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    3ace:	4c0d      	ldr	r4, [pc, #52]	; (3b04 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3ad0:	4a0d      	ldr	r2, [pc, #52]	; (3b08 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    3ad2:	9301      	str	r3, [sp, #4]
    3ad4:	490d      	ldr	r1, [pc, #52]	; (3b0c <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3ad6:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    3ad8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3adc:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    3ae0:	f44f 75b0 	mov.w	r5, #352	; 0x160
    3ae4:	9300      	str	r3, [sp, #0]
    3ae6:	fb05 1100 	mla	r1, r5, r0, r1
    3aea:	4b09      	ldr	r3, [pc, #36]	; (3b10 <init_idle_thread+0x54>)
    3aec:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3af0:	4620      	mov	r0, r4
    3af2:	f001 fd15 	bl	5520 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3af6:	7b63      	ldrb	r3, [r4, #13]
    3af8:	f023 0304 	bic.w	r3, r3, #4
    3afc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3afe:	b007      	add	sp, #28
    3b00:	bd30      	pop	{r4, r5, pc}
    3b02:	bf00      	nop
    3b04:	200002d0 	.word	0x200002d0
    3b08:	20000b10 	.word	0x20000b10
    3b0c:	200021c0 	.word	0x200021c0
    3b10:	00003a65 	.word	0x00003a65

00003b14 <bg_thread_main>:
{
    3b14:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3b16:	4b0a      	ldr	r3, [pc, #40]	; (3b40 <bg_thread_main+0x2c>)
    3b18:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3b1a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3b1c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3b1e:	f7ff ff4f 	bl	39c0 <z_sys_init_run_level>
	boot_banner();
    3b22:	f002 f9a5 	bl	5e70 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3b26:	2003      	movs	r0, #3
    3b28:	f7ff ff4a 	bl	39c0 <z_sys_init_run_level>
	z_init_static_threads();
    3b2c:	f001 fdaa 	bl	5684 <z_init_static_threads>
	main();
    3b30:	f7fc fd0c 	bl	54c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3b34:	4a03      	ldr	r2, [pc, #12]	; (3b44 <bg_thread_main+0x30>)
    3b36:	7b13      	ldrb	r3, [r2, #12]
    3b38:	f023 0301 	bic.w	r3, r3, #1
    3b3c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3b3e:	bd08      	pop	{r3, pc}
    3b40:	20000f82 	.word	0x20000f82
    3b44:	20000350 	.word	0x20000350

00003b48 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3b48:	4802      	ldr	r0, [pc, #8]	; (3b54 <z_bss_zero+0xc>)
    3b4a:	4a03      	ldr	r2, [pc, #12]	; (3b58 <z_bss_zero+0x10>)
    3b4c:	2100      	movs	r1, #0
    3b4e:	1a12      	subs	r2, r2, r0
    3b50:	f002 bcb3 	b.w	64ba <memset>
    3b54:	20000130 	.word	0x20000130
    3b58:	20001140 	.word	0x20001140

00003b5c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3b5c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3b5e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 3c38 <z_cstart+0xdc>
    3b62:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3b64:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3b68:	4d2d      	ldr	r5, [pc, #180]	; (3c20 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3b6a:	4e2e      	ldr	r6, [pc, #184]	; (3c24 <z_cstart+0xc8>)
    3b6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3b6e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 3c3c <z_cstart+0xe0>
    3b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b76:	2400      	movs	r4, #0
    3b78:	616b      	str	r3, [r5, #20]
    3b7a:	23e0      	movs	r3, #224	; 0xe0
    3b7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3b80:	77ec      	strb	r4, [r5, #31]
    3b82:	762c      	strb	r4, [r5, #24]
    3b84:	766c      	strb	r4, [r5, #25]
    3b86:	76ac      	strb	r4, [r5, #26]
    3b88:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3b8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3b92:	626b      	str	r3, [r5, #36]	; 0x24
    3b94:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3b98:	f7fe f88e 	bl	1cb8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3b9c:	f7fd fdba 	bl	1714 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ba4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3ba6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3ba8:	f7fe f9b6 	bl	1f18 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3bac:	f7fe f8ec 	bl	1d88 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3bb0:	f240 1301 	movw	r3, #257	; 0x101
    3bb4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3bb8:	ab06      	add	r3, sp, #24
    3bba:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3bbc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3bc0:	f002 fe49 	bl	6856 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3bc4:	4620      	mov	r0, r4
    3bc6:	f7ff fefb 	bl	39c0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3bca:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    3bcc:	4d16      	ldr	r5, [pc, #88]	; (3c28 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3bce:	f7ff fef7 	bl	39c0 <z_sys_init_run_level>
	z_sched_init();
    3bd2:	f001 f98d 	bl	4ef0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3bd6:	4b15      	ldr	r3, [pc, #84]	; (3c2c <z_cstart+0xd0>)
    3bd8:	9305      	str	r3, [sp, #20]
    3bda:	2301      	movs	r3, #1
    3bdc:	4914      	ldr	r1, [pc, #80]	; (3c30 <z_cstart+0xd4>)
    3bde:	9400      	str	r4, [sp, #0]
    3be0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3be8:	464b      	mov	r3, r9
    3bea:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3bee:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    3bf0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3bf2:	f001 fc95 	bl	5520 <z_setup_new_thread>
    3bf6:	7b6a      	ldrb	r2, [r5, #13]
    3bf8:	f022 0204 	bic.w	r2, r2, #4
    3bfc:	736a      	strb	r2, [r5, #13]
    3bfe:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    3c00:	4628      	mov	r0, r5
    3c02:	f000 fdc1 	bl	4788 <z_ready_thread>
		init_idle_thread(i);
    3c06:	4620      	mov	r0, r4
    3c08:	f7ff ff58 	bl	3abc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3c0c:	4b09      	ldr	r3, [pc, #36]	; (3c34 <z_cstart+0xd8>)
    3c0e:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3c10:	464a      	mov	r2, r9
    3c12:	4639      	mov	r1, r7
    3c14:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    3c16:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3c18:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3c1c:	f7fd feb4 	bl	1988 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3c20:	e000ed00 	.word	0xe000ed00
    3c24:	20000b10 	.word	0x20000b10
    3c28:	20000350 	.word	0x20000350
    3c2c:	0000785f 	.word	0x0000785f
    3c30:	20001da0 	.word	0x20001da0
    3c34:	200002d0 	.word	0x200002d0
    3c38:	20002b40 	.word	0x20002b40
    3c3c:	00003b15 	.word	0x00003b15

00003c40 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c44:	4d16      	ldr	r5, [pc, #88]	; (3ca0 <init_mem_slab_module+0x60>)
    3c46:	4c17      	ldr	r4, [pc, #92]	; (3ca4 <init_mem_slab_module+0x64>)
    3c48:	4e17      	ldr	r6, [pc, #92]	; (3ca8 <init_mem_slab_module+0x68>)
    3c4a:	46a8      	mov	r8, r5
    3c4c:	42ac      	cmp	r4, r5
    3c4e:	d90c      	bls.n	3c6a <init_mem_slab_module+0x2a>
    3c50:	4916      	ldr	r1, [pc, #88]	; (3cac <init_mem_slab_module+0x6c>)
    3c52:	4817      	ldr	r0, [pc, #92]	; (3cb0 <init_mem_slab_module+0x70>)
    3c54:	233c      	movs	r3, #60	; 0x3c
    3c56:	4632      	mov	r2, r6
    3c58:	f002 fbdd 	bl	6416 <printk>
    3c5c:	4815      	ldr	r0, [pc, #84]	; (3cb4 <init_mem_slab_module+0x74>)
    3c5e:	f002 fbda 	bl	6416 <printk>
    3c62:	213c      	movs	r1, #60	; 0x3c
    3c64:	4630      	mov	r0, r6
    3c66:	f002 fafd 	bl	6264 <assert_post_action>
    3c6a:	4544      	cmp	r4, r8
    3c6c:	d302      	bcc.n	3c74 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3c6e:	2000      	movs	r0, #0
	return rc;
}
    3c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3c74:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    3c78:	ea41 0302 	orr.w	r3, r1, r2
    3c7c:	f013 0303 	ands.w	r3, r3, #3
    3c80:	d10b      	bne.n	3c9a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    3c82:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    3c84:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3c86:	4283      	cmp	r3, r0
    3c88:	d101      	bne.n	3c8e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c8a:	3420      	adds	r4, #32
    3c8c:	e7de      	b.n	3c4c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    3c8e:	69a7      	ldr	r7, [r4, #24]
    3c90:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    3c92:	3301      	adds	r3, #1
		slab->free_list = p;
    3c94:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    3c96:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    3c98:	e7f5      	b.n	3c86 <init_mem_slab_module+0x46>
		return -EINVAL;
    3c9a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3c9e:	e7e7      	b.n	3c70 <init_mem_slab_module+0x30>
    3ca0:	200000e0 	.word	0x200000e0
    3ca4:	200000e0 	.word	0x200000e0
    3ca8:	00007864 	.word	0x00007864
    3cac:	00007889 	.word	0x00007889
    3cb0:	00006f96 	.word	0x00006f96
    3cb4:	000078a6 	.word	0x000078a6

00003cb8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3cbc:	4604      	mov	r4, r0
    3cbe:	460e      	mov	r6, r1
    3cc0:	4690      	mov	r8, r2
    3cc2:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3cc4:	f100 0508 	add.w	r5, r0, #8
    3cc8:	f04f 0320 	mov.w	r3, #32
    3ccc:	f3ef 8711 	mrs	r7, BASEPRI
    3cd0:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3cd8:	4628      	mov	r0, r5
    3cda:	f001 fd63 	bl	57a4 <z_spin_lock_valid>
    3cde:	b968      	cbnz	r0, 3cfc <k_mem_slab_alloc+0x44>
    3ce0:	4a24      	ldr	r2, [pc, #144]	; (3d74 <k_mem_slab_alloc+0xbc>)
    3ce2:	4925      	ldr	r1, [pc, #148]	; (3d78 <k_mem_slab_alloc+0xc0>)
    3ce4:	4825      	ldr	r0, [pc, #148]	; (3d7c <k_mem_slab_alloc+0xc4>)
    3ce6:	2381      	movs	r3, #129	; 0x81
    3ce8:	f002 fb95 	bl	6416 <printk>
    3cec:	4824      	ldr	r0, [pc, #144]	; (3d80 <k_mem_slab_alloc+0xc8>)
    3cee:	4629      	mov	r1, r5
    3cf0:	f002 fb91 	bl	6416 <printk>
    3cf4:	481f      	ldr	r0, [pc, #124]	; (3d74 <k_mem_slab_alloc+0xbc>)
    3cf6:	2181      	movs	r1, #129	; 0x81
    3cf8:	f002 fab4 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    3cfc:	4628      	mov	r0, r5
    3cfe:	f001 fd6f 	bl	57e0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3d02:	69a3      	ldr	r3, [r4, #24]
    3d04:	b1eb      	cbz	r3, 3d42 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    3d06:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    3d08:	681b      	ldr	r3, [r3, #0]
    3d0a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    3d0c:	69e3      	ldr	r3, [r4, #28]
    3d0e:	3301      	adds	r3, #1
    3d10:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3d12:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d14:	4628      	mov	r0, r5
    3d16:	f001 fd53 	bl	57c0 <z_spin_unlock_valid>
    3d1a:	b968      	cbnz	r0, 3d38 <k_mem_slab_alloc+0x80>
    3d1c:	4a15      	ldr	r2, [pc, #84]	; (3d74 <k_mem_slab_alloc+0xbc>)
    3d1e:	4919      	ldr	r1, [pc, #100]	; (3d84 <k_mem_slab_alloc+0xcc>)
    3d20:	4816      	ldr	r0, [pc, #88]	; (3d7c <k_mem_slab_alloc+0xc4>)
    3d22:	23ac      	movs	r3, #172	; 0xac
    3d24:	f002 fb77 	bl	6416 <printk>
    3d28:	4817      	ldr	r0, [pc, #92]	; (3d88 <k_mem_slab_alloc+0xd0>)
    3d2a:	4629      	mov	r1, r5
    3d2c:	f002 fb73 	bl	6416 <printk>
    3d30:	4810      	ldr	r0, [pc, #64]	; (3d74 <k_mem_slab_alloc+0xbc>)
    3d32:	21ac      	movs	r1, #172	; 0xac
    3d34:	f002 fa96 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3d38:	f387 8811 	msr	BASEPRI, r7
    3d3c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3d40:	e013      	b.n	3d6a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3d42:	ea58 0209 	orrs.w	r2, r8, r9
    3d46:	d103      	bne.n	3d50 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    3d48:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    3d4a:	f06f 040b 	mvn.w	r4, #11
    3d4e:	e7e1      	b.n	3d14 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3d50:	4622      	mov	r2, r4
    3d52:	e9cd 8900 	strd	r8, r9, [sp]
    3d56:	4639      	mov	r1, r7
    3d58:	4628      	mov	r0, r5
    3d5a:	f000 fec7 	bl	4aec <z_pend_curr>
		if (result == 0) {
    3d5e:	4604      	mov	r4, r0
    3d60:	b918      	cbnz	r0, 3d6a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    3d62:	4b0a      	ldr	r3, [pc, #40]	; (3d8c <k_mem_slab_alloc+0xd4>)
    3d64:	689b      	ldr	r3, [r3, #8]
    3d66:	695b      	ldr	r3, [r3, #20]
    3d68:	6033      	str	r3, [r6, #0]
}
    3d6a:	4620      	mov	r0, r4
    3d6c:	b003      	add	sp, #12
    3d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3d72:	bf00      	nop
    3d74:	000070a9 	.word	0x000070a9
    3d78:	000070fb 	.word	0x000070fb
    3d7c:	00006f96 	.word	0x00006f96
    3d80:	00007110 	.word	0x00007110
    3d84:	000070cf 	.word	0x000070cf
    3d88:	000070e6 	.word	0x000070e6
    3d8c:	20000b10 	.word	0x20000b10

00003d90 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d94:	4604      	mov	r4, r0
    3d96:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3d98:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    3d9c:	f04f 0320 	mov.w	r3, #32
    3da0:	f3ef 8711 	mrs	r7, BASEPRI
    3da4:	f383 8812 	msr	BASEPRI_MAX, r3
    3da8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3dac:	4628      	mov	r0, r5
    3dae:	f001 fcf9 	bl	57a4 <z_spin_lock_valid>
    3db2:	b968      	cbnz	r0, 3dd0 <k_mem_slab_free+0x40>
    3db4:	4a22      	ldr	r2, [pc, #136]	; (3e40 <k_mem_slab_free+0xb0>)
    3db6:	4923      	ldr	r1, [pc, #140]	; (3e44 <k_mem_slab_free+0xb4>)
    3db8:	4823      	ldr	r0, [pc, #140]	; (3e48 <k_mem_slab_free+0xb8>)
    3dba:	2381      	movs	r3, #129	; 0x81
    3dbc:	f002 fb2b 	bl	6416 <printk>
    3dc0:	4822      	ldr	r0, [pc, #136]	; (3e4c <k_mem_slab_free+0xbc>)
    3dc2:	4629      	mov	r1, r5
    3dc4:	f002 fb27 	bl	6416 <printk>
    3dc8:	481d      	ldr	r0, [pc, #116]	; (3e40 <k_mem_slab_free+0xb0>)
    3dca:	2181      	movs	r1, #129	; 0x81
    3dcc:	f002 fa4a 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    3dd0:	4628      	mov	r0, r5
    3dd2:	f001 fd05 	bl	57e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    3dd6:	f8d4 8018 	ldr.w	r8, [r4, #24]
    3dda:	f1b8 0f00 	cmp.w	r8, #0
    3dde:	d10f      	bne.n	3e00 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3de0:	4620      	mov	r0, r4
    3de2:	f001 f835 	bl	4e50 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3de6:	b158      	cbz	r0, 3e00 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3de8:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3dea:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3dec:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    3df0:	f000 fcca 	bl	4788 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    3df4:	4639      	mov	r1, r7
    3df6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    3df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    3dfc:	f000 ba70 	b.w	42e0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    3e00:	6833      	ldr	r3, [r6, #0]
    3e02:	69a2      	ldr	r2, [r4, #24]
    3e04:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3e06:	6833      	ldr	r3, [r6, #0]
    3e08:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    3e0a:	69e3      	ldr	r3, [r4, #28]
    3e0c:	3b01      	subs	r3, #1
    3e0e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e10:	4628      	mov	r0, r5
    3e12:	f001 fcd5 	bl	57c0 <z_spin_unlock_valid>
    3e16:	b968      	cbnz	r0, 3e34 <k_mem_slab_free+0xa4>
    3e18:	4a09      	ldr	r2, [pc, #36]	; (3e40 <k_mem_slab_free+0xb0>)
    3e1a:	490d      	ldr	r1, [pc, #52]	; (3e50 <k_mem_slab_free+0xc0>)
    3e1c:	480a      	ldr	r0, [pc, #40]	; (3e48 <k_mem_slab_free+0xb8>)
    3e1e:	23ac      	movs	r3, #172	; 0xac
    3e20:	f002 faf9 	bl	6416 <printk>
    3e24:	480b      	ldr	r0, [pc, #44]	; (3e54 <k_mem_slab_free+0xc4>)
    3e26:	4629      	mov	r1, r5
    3e28:	f002 faf5 	bl	6416 <printk>
    3e2c:	4804      	ldr	r0, [pc, #16]	; (3e40 <k_mem_slab_free+0xb0>)
    3e2e:	21ac      	movs	r1, #172	; 0xac
    3e30:	f002 fa18 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3e34:	f387 8811 	msr	BASEPRI, r7
    3e38:	f3bf 8f6f 	isb	sy
}
    3e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e40:	000070a9 	.word	0x000070a9
    3e44:	000070fb 	.word	0x000070fb
    3e48:	00006f96 	.word	0x00006f96
    3e4c:	00007110 	.word	0x00007110
    3e50:	000070cf 	.word	0x000070cf
    3e54:	000070e6 	.word	0x000070e6

00003e58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3e5c:	4604      	mov	r4, r0
    3e5e:	4616      	mov	r6, r2
    3e60:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e62:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3e66:	b163      	cbz	r3, 3e82 <z_impl_k_mutex_lock+0x2a>
    3e68:	4970      	ldr	r1, [pc, #448]	; (402c <z_impl_k_mutex_lock+0x1d4>)
    3e6a:	4a71      	ldr	r2, [pc, #452]	; (4030 <z_impl_k_mutex_lock+0x1d8>)
    3e6c:	4871      	ldr	r0, [pc, #452]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    3e6e:	2365      	movs	r3, #101	; 0x65
    3e70:	f002 fad1 	bl	6416 <printk>
    3e74:	4870      	ldr	r0, [pc, #448]	; (4038 <z_impl_k_mutex_lock+0x1e0>)
    3e76:	f002 face 	bl	6416 <printk>
    3e7a:	486d      	ldr	r0, [pc, #436]	; (4030 <z_impl_k_mutex_lock+0x1d8>)
    3e7c:	2165      	movs	r1, #101	; 0x65
    3e7e:	f002 f9f1 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3e82:	f04f 0320 	mov.w	r3, #32
    3e86:	f3ef 8811 	mrs	r8, BASEPRI
    3e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e92:	486a      	ldr	r0, [pc, #424]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3e94:	f001 fc86 	bl	57a4 <z_spin_lock_valid>
    3e98:	b968      	cbnz	r0, 3eb6 <z_impl_k_mutex_lock+0x5e>
    3e9a:	4a69      	ldr	r2, [pc, #420]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3e9c:	4969      	ldr	r1, [pc, #420]	; (4044 <z_impl_k_mutex_lock+0x1ec>)
    3e9e:	4865      	ldr	r0, [pc, #404]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    3ea0:	2381      	movs	r3, #129	; 0x81
    3ea2:	f002 fab8 	bl	6416 <printk>
    3ea6:	4965      	ldr	r1, [pc, #404]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3ea8:	4867      	ldr	r0, [pc, #412]	; (4048 <z_impl_k_mutex_lock+0x1f0>)
    3eaa:	f002 fab4 	bl	6416 <printk>
    3eae:	4864      	ldr	r0, [pc, #400]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3eb0:	2181      	movs	r1, #129	; 0x81
    3eb2:	f002 f9d7 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    3eb6:	4861      	ldr	r0, [pc, #388]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3eb8:	f001 fc92 	bl	57e0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3ebc:	68e3      	ldr	r3, [r4, #12]
    3ebe:	4a63      	ldr	r2, [pc, #396]	; (404c <z_impl_k_mutex_lock+0x1f4>)
    3ec0:	b1fb      	cbz	r3, 3f02 <z_impl_k_mutex_lock+0xaa>
    3ec2:	68a0      	ldr	r0, [r4, #8]
    3ec4:	6891      	ldr	r1, [r2, #8]
    3ec6:	4288      	cmp	r0, r1
    3ec8:	d03d      	beq.n	3f46 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3eca:	ea56 0307 	orrs.w	r3, r6, r7
    3ece:	d13c      	bne.n	3f4a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ed0:	485a      	ldr	r0, [pc, #360]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3ed2:	f001 fc75 	bl	57c0 <z_spin_unlock_valid>
    3ed6:	b968      	cbnz	r0, 3ef4 <z_impl_k_mutex_lock+0x9c>
    3ed8:	4a59      	ldr	r2, [pc, #356]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3eda:	495d      	ldr	r1, [pc, #372]	; (4050 <z_impl_k_mutex_lock+0x1f8>)
    3edc:	4855      	ldr	r0, [pc, #340]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    3ede:	23ac      	movs	r3, #172	; 0xac
    3ee0:	f002 fa99 	bl	6416 <printk>
    3ee4:	4955      	ldr	r1, [pc, #340]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3ee6:	485b      	ldr	r0, [pc, #364]	; (4054 <z_impl_k_mutex_lock+0x1fc>)
    3ee8:	f002 fa95 	bl	6416 <printk>
    3eec:	4854      	ldr	r0, [pc, #336]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3eee:	21ac      	movs	r1, #172	; 0xac
    3ef0:	f002 f9b8 	bl	6264 <assert_post_action>
	__asm__ volatile(
    3ef4:	f388 8811 	msr	BASEPRI, r8
    3ef8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3efc:	f06f 000f 	mvn.w	r0, #15
    3f00:	e01e      	b.n	3f40 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    3f02:	6891      	ldr	r1, [r2, #8]
    3f04:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3f08:	484c      	ldr	r0, [pc, #304]	; (403c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3f0a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3f0c:	3301      	adds	r3, #1
    3f0e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3f10:	6893      	ldr	r3, [r2, #8]
    3f12:	60a3      	str	r3, [r4, #8]
    3f14:	f001 fc54 	bl	57c0 <z_spin_unlock_valid>
    3f18:	b968      	cbnz	r0, 3f36 <z_impl_k_mutex_lock+0xde>
    3f1a:	4a49      	ldr	r2, [pc, #292]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3f1c:	494c      	ldr	r1, [pc, #304]	; (4050 <z_impl_k_mutex_lock+0x1f8>)
    3f1e:	4845      	ldr	r0, [pc, #276]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    3f20:	23ac      	movs	r3, #172	; 0xac
    3f22:	f002 fa78 	bl	6416 <printk>
    3f26:	4945      	ldr	r1, [pc, #276]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3f28:	484a      	ldr	r0, [pc, #296]	; (4054 <z_impl_k_mutex_lock+0x1fc>)
    3f2a:	f002 fa74 	bl	6416 <printk>
    3f2e:	4844      	ldr	r0, [pc, #272]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3f30:	21ac      	movs	r1, #172	; 0xac
    3f32:	f002 f997 	bl	6264 <assert_post_action>
    3f36:	f388 8811 	msr	BASEPRI, r8
    3f3a:	f3bf 8f6f 	isb	sy
		return 0;
    3f3e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3f40:	b002      	add	sp, #8
    3f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3f46:	6921      	ldr	r1, [r4, #16]
    3f48:	e7de      	b.n	3f08 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3f4a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3f4e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3f52:	4299      	cmp	r1, r3
    3f54:	bfa8      	it	ge
    3f56:	4619      	movge	r1, r3
    3f58:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3f5c:	4291      	cmp	r1, r2
    3f5e:	bfb8      	it	lt
    3f60:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3f62:	428b      	cmp	r3, r1
    3f64:	dd44      	ble.n	3ff0 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    3f66:	f000 fdf1 	bl	4b4c <z_set_prio>
    3f6a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3f6c:	e9cd 6700 	strd	r6, r7, [sp]
    3f70:	4832      	ldr	r0, [pc, #200]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3f72:	4622      	mov	r2, r4
    3f74:	4641      	mov	r1, r8
    3f76:	f000 fdb9 	bl	4aec <z_pend_curr>
	if (got_mutex == 0) {
    3f7a:	2800      	cmp	r0, #0
    3f7c:	d0e0      	beq.n	3f40 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    3f7e:	f04f 0320 	mov.w	r3, #32
    3f82:	f3ef 8611 	mrs	r6, BASEPRI
    3f86:	f383 8812 	msr	BASEPRI_MAX, r3
    3f8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f8e:	482b      	ldr	r0, [pc, #172]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3f90:	f001 fc08 	bl	57a4 <z_spin_lock_valid>
    3f94:	b968      	cbnz	r0, 3fb2 <z_impl_k_mutex_lock+0x15a>
    3f96:	4a2a      	ldr	r2, [pc, #168]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3f98:	492a      	ldr	r1, [pc, #168]	; (4044 <z_impl_k_mutex_lock+0x1ec>)
    3f9a:	4826      	ldr	r0, [pc, #152]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    3f9c:	2381      	movs	r3, #129	; 0x81
    3f9e:	f002 fa3a 	bl	6416 <printk>
    3fa2:	4926      	ldr	r1, [pc, #152]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3fa4:	4828      	ldr	r0, [pc, #160]	; (4048 <z_impl_k_mutex_lock+0x1f0>)
    3fa6:	f002 fa36 	bl	6416 <printk>
    3faa:	4825      	ldr	r0, [pc, #148]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    3fac:	2181      	movs	r1, #129	; 0x81
    3fae:	f002 f959 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    3fb2:	4822      	ldr	r0, [pc, #136]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3fb4:	f001 fc14 	bl	57e0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3fb8:	6823      	ldr	r3, [r4, #0]
    3fba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fbc:	429c      	cmp	r4, r3
    3fbe:	d00a      	beq.n	3fd6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3fc0:	b14b      	cbz	r3, 3fd6 <z_impl_k_mutex_lock+0x17e>
    3fc2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3fc6:	4299      	cmp	r1, r3
    3fc8:	bfa8      	it	ge
    3fca:	4619      	movge	r1, r3
    3fcc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3fd0:	4299      	cmp	r1, r3
    3fd2:	bfb8      	it	lt
    3fd4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3fd6:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3fd8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3fdc:	4299      	cmp	r1, r3
    3fde:	d109      	bne.n	3ff4 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    3fe0:	b16d      	cbz	r5, 3ffe <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    3fe2:	4816      	ldr	r0, [pc, #88]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    3fe4:	4631      	mov	r1, r6
    3fe6:	f000 f97b 	bl	42e0 <z_reschedule>
	return -EAGAIN;
    3fea:	f06f 000a 	mvn.w	r0, #10
    3fee:	e7a7      	b.n	3f40 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    3ff0:	2500      	movs	r5, #0
    3ff2:	e7bb      	b.n	3f6c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    3ff4:	f000 fdaa 	bl	4b4c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3ff8:	2800      	cmp	r0, #0
    3ffa:	d1f2      	bne.n	3fe2 <z_impl_k_mutex_lock+0x18a>
    3ffc:	e7f0      	b.n	3fe0 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3ffe:	480f      	ldr	r0, [pc, #60]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    4000:	f001 fbde 	bl	57c0 <z_spin_unlock_valid>
    4004:	b968      	cbnz	r0, 4022 <z_impl_k_mutex_lock+0x1ca>
    4006:	4a0e      	ldr	r2, [pc, #56]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    4008:	4911      	ldr	r1, [pc, #68]	; (4050 <z_impl_k_mutex_lock+0x1f8>)
    400a:	480a      	ldr	r0, [pc, #40]	; (4034 <z_impl_k_mutex_lock+0x1dc>)
    400c:	23ac      	movs	r3, #172	; 0xac
    400e:	f002 fa02 	bl	6416 <printk>
    4012:	490a      	ldr	r1, [pc, #40]	; (403c <z_impl_k_mutex_lock+0x1e4>)
    4014:	480f      	ldr	r0, [pc, #60]	; (4054 <z_impl_k_mutex_lock+0x1fc>)
    4016:	f002 f9fe 	bl	6416 <printk>
    401a:	4809      	ldr	r0, [pc, #36]	; (4040 <z_impl_k_mutex_lock+0x1e8>)
    401c:	21ac      	movs	r1, #172	; 0xac
    401e:	f002 f921 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4022:	f386 8811 	msr	BASEPRI, r6
    4026:	f3bf 8f6f 	isb	sy
    402a:	e7de      	b.n	3fea <z_impl_k_mutex_lock+0x192>
    402c:	000078e7 	.word	0x000078e7
    4030:	000078c5 	.word	0x000078c5
    4034:	00006f96 	.word	0x00006f96
    4038:	000078f9 	.word	0x000078f9
    403c:	20000b38 	.word	0x20000b38
    4040:	000070a9 	.word	0x000070a9
    4044:	000070fb 	.word	0x000070fb
    4048:	00007110 	.word	0x00007110
    404c:	20000b10 	.word	0x20000b10
    4050:	000070cf 	.word	0x000070cf
    4054:	000070e6 	.word	0x000070e6

00004058 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4058:	b538      	push	{r3, r4, r5, lr}
    405a:	4604      	mov	r4, r0
    405c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4060:	b163      	cbz	r3, 407c <z_impl_k_mutex_unlock+0x24>
    4062:	4952      	ldr	r1, [pc, #328]	; (41ac <z_impl_k_mutex_unlock+0x154>)
    4064:	4a52      	ldr	r2, [pc, #328]	; (41b0 <z_impl_k_mutex_unlock+0x158>)
    4066:	4853      	ldr	r0, [pc, #332]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    4068:	23c7      	movs	r3, #199	; 0xc7
    406a:	f002 f9d4 	bl	6416 <printk>
    406e:	4852      	ldr	r0, [pc, #328]	; (41b8 <z_impl_k_mutex_unlock+0x160>)
    4070:	f002 f9d1 	bl	6416 <printk>
    4074:	484e      	ldr	r0, [pc, #312]	; (41b0 <z_impl_k_mutex_unlock+0x158>)
    4076:	21c7      	movs	r1, #199	; 0xc7
    4078:	f002 f8f4 	bl	6264 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    407c:	68a3      	ldr	r3, [r4, #8]
    407e:	2b00      	cmp	r3, #0
    4080:	f000 808d 	beq.w	419e <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4084:	4d4d      	ldr	r5, [pc, #308]	; (41bc <z_impl_k_mutex_unlock+0x164>)
    4086:	68aa      	ldr	r2, [r5, #8]
    4088:	4293      	cmp	r3, r2
    408a:	f040 808b 	bne.w	41a4 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    408e:	68e3      	ldr	r3, [r4, #12]
    4090:	b94b      	cbnz	r3, 40a6 <z_impl_k_mutex_unlock+0x4e>
    4092:	494b      	ldr	r1, [pc, #300]	; (41c0 <z_impl_k_mutex_unlock+0x168>)
    4094:	4847      	ldr	r0, [pc, #284]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    4096:	4a46      	ldr	r2, [pc, #280]	; (41b0 <z_impl_k_mutex_unlock+0x158>)
    4098:	23df      	movs	r3, #223	; 0xdf
    409a:	f002 f9bc 	bl	6416 <printk>
    409e:	4844      	ldr	r0, [pc, #272]	; (41b0 <z_impl_k_mutex_unlock+0x158>)
    40a0:	21df      	movs	r1, #223	; 0xdf
    40a2:	f002 f8df 	bl	6264 <assert_post_action>
    40a6:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    40aa:	b163      	cbz	r3, 40c6 <z_impl_k_mutex_unlock+0x6e>
    40ac:	493f      	ldr	r1, [pc, #252]	; (41ac <z_impl_k_mutex_unlock+0x154>)
    40ae:	4a45      	ldr	r2, [pc, #276]	; (41c4 <z_impl_k_mutex_unlock+0x16c>)
    40b0:	4840      	ldr	r0, [pc, #256]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    40b2:	23fd      	movs	r3, #253	; 0xfd
    40b4:	f002 f9af 	bl	6416 <printk>
    40b8:	4843      	ldr	r0, [pc, #268]	; (41c8 <z_impl_k_mutex_unlock+0x170>)
    40ba:	f002 f9ac 	bl	6416 <printk>
    40be:	4841      	ldr	r0, [pc, #260]	; (41c4 <z_impl_k_mutex_unlock+0x16c>)
    40c0:	21fd      	movs	r1, #253	; 0xfd
    40c2:	f002 f8cf 	bl	6264 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    40c6:	68ab      	ldr	r3, [r5, #8]
    40c8:	7bdb      	ldrb	r3, [r3, #15]
    40ca:	2b01      	cmp	r3, #1
    40cc:	d10c      	bne.n	40e8 <z_impl_k_mutex_unlock+0x90>
    40ce:	493f      	ldr	r1, [pc, #252]	; (41cc <z_impl_k_mutex_unlock+0x174>)
    40d0:	4a3c      	ldr	r2, [pc, #240]	; (41c4 <z_impl_k_mutex_unlock+0x16c>)
    40d2:	4838      	ldr	r0, [pc, #224]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    40d4:	23fe      	movs	r3, #254	; 0xfe
    40d6:	f002 f99e 	bl	6416 <printk>
    40da:	483b      	ldr	r0, [pc, #236]	; (41c8 <z_impl_k_mutex_unlock+0x170>)
    40dc:	f002 f99b 	bl	6416 <printk>
    40e0:	4838      	ldr	r0, [pc, #224]	; (41c4 <z_impl_k_mutex_unlock+0x16c>)
    40e2:	21fe      	movs	r1, #254	; 0xfe
    40e4:	f002 f8be 	bl	6264 <assert_post_action>

	--_current->base.sched_locked;
    40e8:	68aa      	ldr	r2, [r5, #8]
    40ea:	7bd3      	ldrb	r3, [r2, #15]
    40ec:	3b01      	subs	r3, #1
    40ee:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    40f0:	68e3      	ldr	r3, [r4, #12]
    40f2:	2b01      	cmp	r3, #1
    40f4:	d905      	bls.n	4102 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    40f6:	3b01      	subs	r3, #1
    40f8:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    40fa:	f000 fe2d 	bl	4d58 <k_sched_unlock>

	return 0;
    40fe:	2000      	movs	r0, #0
}
    4100:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    4102:	f04f 0320 	mov.w	r3, #32
    4106:	f3ef 8511 	mrs	r5, BASEPRI
    410a:	f383 8812 	msr	BASEPRI_MAX, r3
    410e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4112:	482f      	ldr	r0, [pc, #188]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4114:	f001 fb46 	bl	57a4 <z_spin_lock_valid>
    4118:	b968      	cbnz	r0, 4136 <z_impl_k_mutex_unlock+0xde>
    411a:	4a2e      	ldr	r2, [pc, #184]	; (41d4 <z_impl_k_mutex_unlock+0x17c>)
    411c:	492e      	ldr	r1, [pc, #184]	; (41d8 <z_impl_k_mutex_unlock+0x180>)
    411e:	4825      	ldr	r0, [pc, #148]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    4120:	2381      	movs	r3, #129	; 0x81
    4122:	f002 f978 	bl	6416 <printk>
    4126:	492a      	ldr	r1, [pc, #168]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4128:	482c      	ldr	r0, [pc, #176]	; (41dc <z_impl_k_mutex_unlock+0x184>)
    412a:	f002 f974 	bl	6416 <printk>
    412e:	4829      	ldr	r0, [pc, #164]	; (41d4 <z_impl_k_mutex_unlock+0x17c>)
    4130:	2181      	movs	r1, #129	; 0x81
    4132:	f002 f897 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4136:	4826      	ldr	r0, [pc, #152]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4138:	f001 fb52 	bl	57e0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    413c:	68a0      	ldr	r0, [r4, #8]
    413e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4140:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4144:	4299      	cmp	r1, r3
    4146:	d001      	beq.n	414c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    4148:	f000 fd00 	bl	4b4c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    414c:	4620      	mov	r0, r4
    414e:	f000 fe7f 	bl	4e50 <z_unpend_first_thread>
	mutex->owner = new_owner;
    4152:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4154:	b158      	cbz	r0, 416e <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    4156:	f990 200e 	ldrsb.w	r2, [r0, #14]
    415a:	6122      	str	r2, [r4, #16]
    415c:	2200      	movs	r2, #0
    415e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4160:	f000 fb12 	bl	4788 <z_ready_thread>
		z_reschedule(&lock, key);
    4164:	481a      	ldr	r0, [pc, #104]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4166:	4629      	mov	r1, r5
    4168:	f000 f8ba 	bl	42e0 <z_reschedule>
    416c:	e7c5      	b.n	40fa <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    416e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4170:	4817      	ldr	r0, [pc, #92]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4172:	f001 fb25 	bl	57c0 <z_spin_unlock_valid>
    4176:	b968      	cbnz	r0, 4194 <z_impl_k_mutex_unlock+0x13c>
    4178:	4a16      	ldr	r2, [pc, #88]	; (41d4 <z_impl_k_mutex_unlock+0x17c>)
    417a:	4919      	ldr	r1, [pc, #100]	; (41e0 <z_impl_k_mutex_unlock+0x188>)
    417c:	480d      	ldr	r0, [pc, #52]	; (41b4 <z_impl_k_mutex_unlock+0x15c>)
    417e:	23ac      	movs	r3, #172	; 0xac
    4180:	f002 f949 	bl	6416 <printk>
    4184:	4912      	ldr	r1, [pc, #72]	; (41d0 <z_impl_k_mutex_unlock+0x178>)
    4186:	4817      	ldr	r0, [pc, #92]	; (41e4 <z_impl_k_mutex_unlock+0x18c>)
    4188:	f002 f945 	bl	6416 <printk>
    418c:	4811      	ldr	r0, [pc, #68]	; (41d4 <z_impl_k_mutex_unlock+0x17c>)
    418e:	21ac      	movs	r1, #172	; 0xac
    4190:	f002 f868 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4194:	f385 8811 	msr	BASEPRI, r5
    4198:	f3bf 8f6f 	isb	sy
    419c:	e7ad      	b.n	40fa <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    419e:	f06f 0015 	mvn.w	r0, #21
    41a2:	e7ad      	b.n	4100 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    41a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41a8:	e7aa      	b.n	4100 <z_impl_k_mutex_unlock+0xa8>
    41aa:	bf00      	nop
    41ac:	000078e7 	.word	0x000078e7
    41b0:	000078c5 	.word	0x000078c5
    41b4:	00006f96 	.word	0x00006f96
    41b8:	000078f9 	.word	0x000078f9
    41bc:	20000b10 	.word	0x20000b10
    41c0:	0000791e 	.word	0x0000791e
    41c4:	00007935 	.word	0x00007935
    41c8:	00007960 	.word	0x00007960
    41cc:	00007963 	.word	0x00007963
    41d0:	20000b38 	.word	0x20000b38
    41d4:	000070a9 	.word	0x000070a9
    41d8:	000070fb 	.word	0x000070fb
    41dc:	00007110 	.word	0x00007110
    41e0:	000070cf 	.word	0x000070cf
    41e4:	000070e6 	.word	0x000070e6

000041e8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    41e8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    41ea:	4c08      	ldr	r4, [pc, #32]	; (420c <z_reset_time_slice+0x24>)
    41ec:	6823      	ldr	r3, [r4, #0]
    41ee:	b15b      	cbz	r3, 4208 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    41f0:	f7ff f888 	bl	3304 <sys_clock_elapsed>
    41f4:	4603      	mov	r3, r0
    41f6:	6820      	ldr	r0, [r4, #0]
    41f8:	4a05      	ldr	r2, [pc, #20]	; (4210 <z_reset_time_slice+0x28>)
    41fa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    41fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    4200:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    4202:	2100      	movs	r1, #0
    4204:	f001 bcae 	b.w	5b64 <z_set_timeout_expiry>
}
    4208:	bd10      	pop	{r4, pc}
    420a:	bf00      	nop
    420c:	20000b48 	.word	0x20000b48
    4210:	20000b10 	.word	0x20000b10

00004214 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4216:	4604      	mov	r4, r0
    4218:	460d      	mov	r5, r1
	__asm__ volatile(
    421a:	f04f 0320 	mov.w	r3, #32
    421e:	f3ef 8611 	mrs	r6, BASEPRI
    4222:	f383 8812 	msr	BASEPRI_MAX, r3
    4226:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    422a:	4823      	ldr	r0, [pc, #140]	; (42b8 <k_sched_time_slice_set+0xa4>)
    422c:	f001 faba 	bl	57a4 <z_spin_lock_valid>
    4230:	b968      	cbnz	r0, 424e <k_sched_time_slice_set+0x3a>
    4232:	4a22      	ldr	r2, [pc, #136]	; (42bc <k_sched_time_slice_set+0xa8>)
    4234:	4922      	ldr	r1, [pc, #136]	; (42c0 <k_sched_time_slice_set+0xac>)
    4236:	4823      	ldr	r0, [pc, #140]	; (42c4 <k_sched_time_slice_set+0xb0>)
    4238:	2381      	movs	r3, #129	; 0x81
    423a:	f002 f8ec 	bl	6416 <printk>
    423e:	491e      	ldr	r1, [pc, #120]	; (42b8 <k_sched_time_slice_set+0xa4>)
    4240:	4821      	ldr	r0, [pc, #132]	; (42c8 <k_sched_time_slice_set+0xb4>)
    4242:	f002 f8e8 	bl	6416 <printk>
    4246:	481d      	ldr	r0, [pc, #116]	; (42bc <k_sched_time_slice_set+0xa8>)
    4248:	2181      	movs	r1, #129	; 0x81
    424a:	f002 f80b 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    424e:	481a      	ldr	r0, [pc, #104]	; (42b8 <k_sched_time_slice_set+0xa4>)
    4250:	f001 fac6 	bl	57e0 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    4254:	4b1d      	ldr	r3, [pc, #116]	; (42cc <k_sched_time_slice_set+0xb8>)
    4256:	2200      	movs	r2, #0
    4258:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    425c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4260:	2100      	movs	r1, #0
    4262:	611a      	str	r2, [r3, #16]
    4264:	fbe7 0104 	umlal	r0, r1, r7, r4
    4268:	2300      	movs	r3, #0
    426a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    426e:	f7fb ff47 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4272:	2c00      	cmp	r4, #0
    4274:	4b16      	ldr	r3, [pc, #88]	; (42d0 <k_sched_time_slice_set+0xbc>)
    4276:	dc1b      	bgt.n	42b0 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    4278:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    427a:	4b16      	ldr	r3, [pc, #88]	; (42d4 <k_sched_time_slice_set+0xc0>)
    427c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    427e:	f7ff ffb3 	bl	41e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4282:	480d      	ldr	r0, [pc, #52]	; (42b8 <k_sched_time_slice_set+0xa4>)
    4284:	f001 fa9c 	bl	57c0 <z_spin_unlock_valid>
    4288:	b968      	cbnz	r0, 42a6 <k_sched_time_slice_set+0x92>
    428a:	4a0c      	ldr	r2, [pc, #48]	; (42bc <k_sched_time_slice_set+0xa8>)
    428c:	4912      	ldr	r1, [pc, #72]	; (42d8 <k_sched_time_slice_set+0xc4>)
    428e:	480d      	ldr	r0, [pc, #52]	; (42c4 <k_sched_time_slice_set+0xb0>)
    4290:	23ac      	movs	r3, #172	; 0xac
    4292:	f002 f8c0 	bl	6416 <printk>
    4296:	4908      	ldr	r1, [pc, #32]	; (42b8 <k_sched_time_slice_set+0xa4>)
    4298:	4810      	ldr	r0, [pc, #64]	; (42dc <k_sched_time_slice_set+0xc8>)
    429a:	f002 f8bc 	bl	6416 <printk>
    429e:	4807      	ldr	r0, [pc, #28]	; (42bc <k_sched_time_slice_set+0xa8>)
    42a0:	21ac      	movs	r1, #172	; 0xac
    42a2:	f001 ffdf 	bl	6264 <assert_post_action>
	__asm__ volatile(
    42a6:	f386 8811 	msr	BASEPRI, r6
    42aa:	f3bf 8f6f 	isb	sy
	}
}
    42ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    42b0:	2802      	cmp	r0, #2
    42b2:	bfb8      	it	lt
    42b4:	2002      	movlt	r0, #2
    42b6:	e7df      	b.n	4278 <k_sched_time_slice_set+0x64>
    42b8:	20000b40 	.word	0x20000b40
    42bc:	000070a9 	.word	0x000070a9
    42c0:	000070fb 	.word	0x000070fb
    42c4:	00006f96 	.word	0x00006f96
    42c8:	00007110 	.word	0x00007110
    42cc:	20000b10 	.word	0x20000b10
    42d0:	20000b48 	.word	0x20000b48
    42d4:	20000b44 	.word	0x20000b44
    42d8:	000070cf 	.word	0x000070cf
    42dc:	000070e6 	.word	0x000070e6

000042e0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    42e0:	b538      	push	{r3, r4, r5, lr}
    42e2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    42e4:	460d      	mov	r5, r1
    42e6:	b9e9      	cbnz	r1, 4324 <z_reschedule+0x44>
    42e8:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    42ec:	b9d3      	cbnz	r3, 4324 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    42ee:	4b19      	ldr	r3, [pc, #100]	; (4354 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    42f0:	69da      	ldr	r2, [r3, #28]
    42f2:	689b      	ldr	r3, [r3, #8]
    42f4:	429a      	cmp	r2, r3
    42f6:	d015      	beq.n	4324 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42f8:	f001 fa62 	bl	57c0 <z_spin_unlock_valid>
    42fc:	b968      	cbnz	r0, 431a <z_reschedule+0x3a>
    42fe:	4a16      	ldr	r2, [pc, #88]	; (4358 <z_reschedule+0x78>)
    4300:	4916      	ldr	r1, [pc, #88]	; (435c <z_reschedule+0x7c>)
    4302:	4817      	ldr	r0, [pc, #92]	; (4360 <z_reschedule+0x80>)
    4304:	23c3      	movs	r3, #195	; 0xc3
    4306:	f002 f886 	bl	6416 <printk>
    430a:	4816      	ldr	r0, [pc, #88]	; (4364 <z_reschedule+0x84>)
    430c:	4621      	mov	r1, r4
    430e:	f002 f882 	bl	6416 <printk>
    4312:	4811      	ldr	r0, [pc, #68]	; (4358 <z_reschedule+0x78>)
    4314:	21c3      	movs	r1, #195	; 0xc3
    4316:	f001 ffa5 	bl	6264 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    431a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    431e:	2000      	movs	r0, #0
    4320:	f7fd bae2 	b.w	18e8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4324:	4620      	mov	r0, r4
    4326:	f001 fa4b 	bl	57c0 <z_spin_unlock_valid>
    432a:	b968      	cbnz	r0, 4348 <z_reschedule+0x68>
    432c:	4a0a      	ldr	r2, [pc, #40]	; (4358 <z_reschedule+0x78>)
    432e:	490b      	ldr	r1, [pc, #44]	; (435c <z_reschedule+0x7c>)
    4330:	480b      	ldr	r0, [pc, #44]	; (4360 <z_reschedule+0x80>)
    4332:	23ac      	movs	r3, #172	; 0xac
    4334:	f002 f86f 	bl	6416 <printk>
    4338:	480a      	ldr	r0, [pc, #40]	; (4364 <z_reschedule+0x84>)
    433a:	4621      	mov	r1, r4
    433c:	f002 f86b 	bl	6416 <printk>
    4340:	4805      	ldr	r0, [pc, #20]	; (4358 <z_reschedule+0x78>)
    4342:	21ac      	movs	r1, #172	; 0xac
    4344:	f001 ff8e 	bl	6264 <assert_post_action>
    4348:	f385 8811 	msr	BASEPRI, r5
    434c:	f3bf 8f6f 	isb	sy
    4350:	bd38      	pop	{r3, r4, r5, pc}
    4352:	bf00      	nop
    4354:	20000b10 	.word	0x20000b10
    4358:	000070a9 	.word	0x000070a9
    435c:	000070cf 	.word	0x000070cf
    4360:	00006f96 	.word	0x00006f96
    4364:	000070e6 	.word	0x000070e6

00004368 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4368:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    436a:	f04f 0320 	mov.w	r3, #32
    436e:	f3ef 8511 	mrs	r5, BASEPRI
    4372:	f383 8812 	msr	BASEPRI_MAX, r3
    4376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    437a:	4829      	ldr	r0, [pc, #164]	; (4420 <k_sched_lock+0xb8>)
    437c:	f001 fa12 	bl	57a4 <z_spin_lock_valid>
    4380:	b968      	cbnz	r0, 439e <k_sched_lock+0x36>
    4382:	4a28      	ldr	r2, [pc, #160]	; (4424 <k_sched_lock+0xbc>)
    4384:	4928      	ldr	r1, [pc, #160]	; (4428 <k_sched_lock+0xc0>)
    4386:	4829      	ldr	r0, [pc, #164]	; (442c <k_sched_lock+0xc4>)
    4388:	2381      	movs	r3, #129	; 0x81
    438a:	f002 f844 	bl	6416 <printk>
    438e:	4924      	ldr	r1, [pc, #144]	; (4420 <k_sched_lock+0xb8>)
    4390:	4827      	ldr	r0, [pc, #156]	; (4430 <k_sched_lock+0xc8>)
    4392:	f002 f840 	bl	6416 <printk>
    4396:	4823      	ldr	r0, [pc, #140]	; (4424 <k_sched_lock+0xbc>)
    4398:	2181      	movs	r1, #129	; 0x81
    439a:	f001 ff63 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    439e:	4820      	ldr	r0, [pc, #128]	; (4420 <k_sched_lock+0xb8>)
    43a0:	f001 fa1e 	bl	57e0 <z_spin_lock_set_owner>
    43a4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    43a8:	b163      	cbz	r3, 43c4 <k_sched_lock+0x5c>
    43aa:	4922      	ldr	r1, [pc, #136]	; (4434 <k_sched_lock+0xcc>)
    43ac:	4a22      	ldr	r2, [pc, #136]	; (4438 <k_sched_lock+0xd0>)
    43ae:	481f      	ldr	r0, [pc, #124]	; (442c <k_sched_lock+0xc4>)
    43b0:	23fd      	movs	r3, #253	; 0xfd
    43b2:	f002 f830 	bl	6416 <printk>
    43b6:	4821      	ldr	r0, [pc, #132]	; (443c <k_sched_lock+0xd4>)
    43b8:	f002 f82d 	bl	6416 <printk>
    43bc:	481e      	ldr	r0, [pc, #120]	; (4438 <k_sched_lock+0xd0>)
    43be:	21fd      	movs	r1, #253	; 0xfd
    43c0:	f001 ff50 	bl	6264 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    43c4:	4c1e      	ldr	r4, [pc, #120]	; (4440 <k_sched_lock+0xd8>)
    43c6:	68a2      	ldr	r2, [r4, #8]
    43c8:	7bd2      	ldrb	r2, [r2, #15]
    43ca:	2a01      	cmp	r2, #1
    43cc:	d10c      	bne.n	43e8 <k_sched_lock+0x80>
    43ce:	491d      	ldr	r1, [pc, #116]	; (4444 <k_sched_lock+0xdc>)
    43d0:	4a19      	ldr	r2, [pc, #100]	; (4438 <k_sched_lock+0xd0>)
    43d2:	4816      	ldr	r0, [pc, #88]	; (442c <k_sched_lock+0xc4>)
    43d4:	23fe      	movs	r3, #254	; 0xfe
    43d6:	f002 f81e 	bl	6416 <printk>
    43da:	4818      	ldr	r0, [pc, #96]	; (443c <k_sched_lock+0xd4>)
    43dc:	f002 f81b 	bl	6416 <printk>
    43e0:	4815      	ldr	r0, [pc, #84]	; (4438 <k_sched_lock+0xd0>)
    43e2:	21fe      	movs	r1, #254	; 0xfe
    43e4:	f001 ff3e 	bl	6264 <assert_post_action>
	--_current->base.sched_locked;
    43e8:	68a2      	ldr	r2, [r4, #8]
    43ea:	7bd3      	ldrb	r3, [r2, #15]
    43ec:	3b01      	subs	r3, #1
    43ee:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    43f0:	480b      	ldr	r0, [pc, #44]	; (4420 <k_sched_lock+0xb8>)
    43f2:	f001 f9e5 	bl	57c0 <z_spin_unlock_valid>
    43f6:	b968      	cbnz	r0, 4414 <k_sched_lock+0xac>
    43f8:	4a0a      	ldr	r2, [pc, #40]	; (4424 <k_sched_lock+0xbc>)
    43fa:	4913      	ldr	r1, [pc, #76]	; (4448 <k_sched_lock+0xe0>)
    43fc:	480b      	ldr	r0, [pc, #44]	; (442c <k_sched_lock+0xc4>)
    43fe:	23ac      	movs	r3, #172	; 0xac
    4400:	f002 f809 	bl	6416 <printk>
    4404:	4906      	ldr	r1, [pc, #24]	; (4420 <k_sched_lock+0xb8>)
    4406:	4811      	ldr	r0, [pc, #68]	; (444c <k_sched_lock+0xe4>)
    4408:	f002 f805 	bl	6416 <printk>
    440c:	4805      	ldr	r0, [pc, #20]	; (4424 <k_sched_lock+0xbc>)
    440e:	21ac      	movs	r1, #172	; 0xac
    4410:	f001 ff28 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4414:	f385 8811 	msr	BASEPRI, r5
    4418:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    441c:	bd38      	pop	{r3, r4, r5, pc}
    441e:	bf00      	nop
    4420:	20000b40 	.word	0x20000b40
    4424:	000070a9 	.word	0x000070a9
    4428:	000070fb 	.word	0x000070fb
    442c:	00006f96 	.word	0x00006f96
    4430:	00007110 	.word	0x00007110
    4434:	000078e7 	.word	0x000078e7
    4438:	00007935 	.word	0x00007935
    443c:	00007960 	.word	0x00007960
    4440:	20000b10 	.word	0x20000b10
    4444:	00007963 	.word	0x00007963
    4448:	000070cf 	.word	0x000070cf
    444c:	000070e6 	.word	0x000070e6

00004450 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4450:	4b0c      	ldr	r3, [pc, #48]	; (4484 <z_priq_dumb_remove+0x34>)
    4452:	4299      	cmp	r1, r3
{
    4454:	b510      	push	{r4, lr}
    4456:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4458:	d10b      	bne.n	4472 <z_priq_dumb_remove+0x22>
    445a:	490b      	ldr	r1, [pc, #44]	; (4488 <z_priq_dumb_remove+0x38>)
    445c:	480b      	ldr	r0, [pc, #44]	; (448c <z_priq_dumb_remove+0x3c>)
    445e:	4a0c      	ldr	r2, [pc, #48]	; (4490 <z_priq_dumb_remove+0x40>)
    4460:	f240 33b5 	movw	r3, #949	; 0x3b5
    4464:	f001 ffd7 	bl	6416 <printk>
    4468:	4809      	ldr	r0, [pc, #36]	; (4490 <z_priq_dumb_remove+0x40>)
    446a:	f240 31b5 	movw	r1, #949	; 0x3b5
    446e:	f001 fef9 	bl	6264 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4472:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    4476:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4478:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    447a:	2300      	movs	r3, #0
	node->prev = NULL;
    447c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4480:	bd10      	pop	{r4, pc}
    4482:	bf00      	nop
    4484:	200002d0 	.word	0x200002d0
    4488:	000079b6 	.word	0x000079b6
    448c:	00006f96 	.word	0x00006f96
    4490:	00007994 	.word	0x00007994

00004494 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    4494:	6883      	ldr	r3, [r0, #8]
{
    4496:	b510      	push	{r4, lr}
    4498:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    449a:	b95b      	cbnz	r3, 44b4 <unpend_thread_no_timeout+0x20>
    449c:	490b      	ldr	r1, [pc, #44]	; (44cc <unpend_thread_no_timeout+0x38>)
    449e:	480c      	ldr	r0, [pc, #48]	; (44d0 <unpend_thread_no_timeout+0x3c>)
    44a0:	4a0c      	ldr	r2, [pc, #48]	; (44d4 <unpend_thread_no_timeout+0x40>)
    44a2:	f240 2353 	movw	r3, #595	; 0x253
    44a6:	f001 ffb6 	bl	6416 <printk>
    44aa:	480a      	ldr	r0, [pc, #40]	; (44d4 <unpend_thread_no_timeout+0x40>)
    44ac:	f240 2153 	movw	r1, #595	; 0x253
    44b0:	f001 fed8 	bl	6264 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    44b4:	68a0      	ldr	r0, [r4, #8]
    44b6:	4621      	mov	r1, r4
    44b8:	f7ff ffca 	bl	4450 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44bc:	7b63      	ldrb	r3, [r4, #13]
    44be:	f023 0302 	bic.w	r3, r3, #2
    44c2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    44c4:	2300      	movs	r3, #0
    44c6:	60a3      	str	r3, [r4, #8]
}
    44c8:	bd10      	pop	{r4, pc}
    44ca:	bf00      	nop
    44cc:	000079d7 	.word	0x000079d7
    44d0:	00006f96 	.word	0x00006f96
    44d4:	00007994 	.word	0x00007994

000044d8 <update_cache>:
{
    44d8:	b538      	push	{r3, r4, r5, lr}
    44da:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    44dc:	4814      	ldr	r0, [pc, #80]	; (4530 <update_cache+0x58>)
    44de:	4d15      	ldr	r5, [pc, #84]	; (4534 <update_cache+0x5c>)
    44e0:	f002 fa04 	bl	68ec <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    44e4:	4604      	mov	r4, r0
    44e6:	b900      	cbnz	r0, 44ea <update_cache+0x12>
    44e8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    44ea:	b9ca      	cbnz	r2, 4520 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    44ec:	68ab      	ldr	r3, [r5, #8]
    44ee:	b963      	cbnz	r3, 450a <update_cache+0x32>
    44f0:	4911      	ldr	r1, [pc, #68]	; (4538 <update_cache+0x60>)
    44f2:	4a12      	ldr	r2, [pc, #72]	; (453c <update_cache+0x64>)
    44f4:	4812      	ldr	r0, [pc, #72]	; (4540 <update_cache+0x68>)
    44f6:	2381      	movs	r3, #129	; 0x81
    44f8:	f001 ff8d 	bl	6416 <printk>
    44fc:	4811      	ldr	r0, [pc, #68]	; (4544 <update_cache+0x6c>)
    44fe:	f001 ff8a 	bl	6416 <printk>
    4502:	480e      	ldr	r0, [pc, #56]	; (453c <update_cache+0x64>)
    4504:	2181      	movs	r1, #129	; 0x81
    4506:	f001 fead 	bl	6264 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    450a:	68ab      	ldr	r3, [r5, #8]
    450c:	7b5a      	ldrb	r2, [r3, #13]
    450e:	06d2      	lsls	r2, r2, #27
    4510:	d106      	bne.n	4520 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4512:	69a2      	ldr	r2, [r4, #24]
    4514:	b922      	cbnz	r2, 4520 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    4516:	89da      	ldrh	r2, [r3, #14]
    4518:	2a7f      	cmp	r2, #127	; 0x7f
    451a:	d901      	bls.n	4520 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    451c:	61eb      	str	r3, [r5, #28]
}
    451e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4520:	68ab      	ldr	r3, [r5, #8]
    4522:	42a3      	cmp	r3, r4
    4524:	d001      	beq.n	452a <update_cache+0x52>
			z_reset_time_slice();
    4526:	f7ff fe5f 	bl	41e8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    452a:	61ec      	str	r4, [r5, #28]
}
    452c:	e7f7      	b.n	451e <update_cache+0x46>
    452e:	bf00      	nop
    4530:	20000b30 	.word	0x20000b30
    4534:	20000b10 	.word	0x20000b10
    4538:	000079ee 	.word	0x000079ee
    453c:	00007994 	.word	0x00007994
    4540:	00006f96 	.word	0x00006f96
    4544:	00007960 	.word	0x00007960

00004548 <move_thread_to_end_of_prio_q>:
{
    4548:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    454a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    454e:	7b43      	ldrb	r3, [r0, #13]
    4550:	2a00      	cmp	r2, #0
{
    4552:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4554:	da06      	bge.n	4564 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    455a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    455c:	4601      	mov	r1, r0
    455e:	481f      	ldr	r0, [pc, #124]	; (45dc <move_thread_to_end_of_prio_q+0x94>)
    4560:	f7ff ff76 	bl	4450 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4564:	7b63      	ldrb	r3, [r4, #13]
    4566:	f063 037f 	orn	r3, r3, #127	; 0x7f
    456a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    456c:	4b1c      	ldr	r3, [pc, #112]	; (45e0 <move_thread_to_end_of_prio_q+0x98>)
    456e:	429c      	cmp	r4, r3
    4570:	d109      	bne.n	4586 <move_thread_to_end_of_prio_q+0x3e>
    4572:	491c      	ldr	r1, [pc, #112]	; (45e4 <move_thread_to_end_of_prio_q+0x9c>)
    4574:	481c      	ldr	r0, [pc, #112]	; (45e8 <move_thread_to_end_of_prio_q+0xa0>)
    4576:	4a1d      	ldr	r2, [pc, #116]	; (45ec <move_thread_to_end_of_prio_q+0xa4>)
    4578:	23b1      	movs	r3, #177	; 0xb1
    457a:	f001 ff4c 	bl	6416 <printk>
    457e:	481b      	ldr	r0, [pc, #108]	; (45ec <move_thread_to_end_of_prio_q+0xa4>)
    4580:	21b1      	movs	r1, #177	; 0xb1
    4582:	f001 fe6f 	bl	6264 <assert_post_action>
	return list->head == list;
    4586:	4a1a      	ldr	r2, [pc, #104]	; (45f0 <move_thread_to_end_of_prio_q+0xa8>)
    4588:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    458a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    458c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4590:	428b      	cmp	r3, r1
    4592:	bf08      	it	eq
    4594:	2300      	moveq	r3, #0
    4596:	2b00      	cmp	r3, #0
    4598:	bf38      	it	cc
    459a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    459c:	b1cb      	cbz	r3, 45d2 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    459e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    45a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    45a6:	4286      	cmp	r6, r0
    45a8:	d00f      	beq.n	45ca <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    45aa:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    45ac:	2800      	cmp	r0, #0
    45ae:	dd0c      	ble.n	45ca <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    45b0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    45b2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    45b6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    45b8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    45ba:	6890      	ldr	r0, [r2, #8]
    45bc:	1b03      	subs	r3, r0, r4
    45be:	4258      	negs	r0, r3
}
    45c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    45c4:	4158      	adcs	r0, r3
    45c6:	f7ff bf87 	b.w	44d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    45ca:	42ab      	cmp	r3, r5
    45cc:	d001      	beq.n	45d2 <move_thread_to_end_of_prio_q+0x8a>
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	e7e4      	b.n	459c <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    45d2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    45d6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    45d8:	6254      	str	r4, [r2, #36]	; 0x24
}
    45da:	e7ee      	b.n	45ba <move_thread_to_end_of_prio_q+0x72>
    45dc:	20000b30 	.word	0x20000b30
    45e0:	200002d0 	.word	0x200002d0
    45e4:	000079b6 	.word	0x000079b6
    45e8:	00006f96 	.word	0x00006f96
    45ec:	00007994 	.word	0x00007994
    45f0:	20000b10 	.word	0x20000b10

000045f4 <z_time_slice>:
{
    45f4:	b570      	push	{r4, r5, r6, lr}
    45f6:	4604      	mov	r4, r0
	__asm__ volatile(
    45f8:	f04f 0320 	mov.w	r3, #32
    45fc:	f3ef 8511 	mrs	r5, BASEPRI
    4600:	f383 8812 	msr	BASEPRI_MAX, r3
    4604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4608:	482a      	ldr	r0, [pc, #168]	; (46b4 <z_time_slice+0xc0>)
    460a:	f001 f8cb 	bl	57a4 <z_spin_lock_valid>
    460e:	b968      	cbnz	r0, 462c <z_time_slice+0x38>
    4610:	4a29      	ldr	r2, [pc, #164]	; (46b8 <z_time_slice+0xc4>)
    4612:	492a      	ldr	r1, [pc, #168]	; (46bc <z_time_slice+0xc8>)
    4614:	482a      	ldr	r0, [pc, #168]	; (46c0 <z_time_slice+0xcc>)
    4616:	2381      	movs	r3, #129	; 0x81
    4618:	f001 fefd 	bl	6416 <printk>
    461c:	4925      	ldr	r1, [pc, #148]	; (46b4 <z_time_slice+0xc0>)
    461e:	4829      	ldr	r0, [pc, #164]	; (46c4 <z_time_slice+0xd0>)
    4620:	f001 fef9 	bl	6416 <printk>
    4624:	4824      	ldr	r0, [pc, #144]	; (46b8 <z_time_slice+0xc4>)
    4626:	2181      	movs	r1, #129	; 0x81
    4628:	f001 fe1c 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    462c:	4821      	ldr	r0, [pc, #132]	; (46b4 <z_time_slice+0xc0>)
    462e:	f001 f8d7 	bl	57e0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4632:	4b25      	ldr	r3, [pc, #148]	; (46c8 <z_time_slice+0xd4>)
    4634:	4a25      	ldr	r2, [pc, #148]	; (46cc <z_time_slice+0xd8>)
    4636:	6898      	ldr	r0, [r3, #8]
    4638:	6811      	ldr	r1, [r2, #0]
    463a:	4288      	cmp	r0, r1
    463c:	4619      	mov	r1, r3
    463e:	d118      	bne.n	4672 <z_time_slice+0x7e>
			z_reset_time_slice();
    4640:	f7ff fdd2 	bl	41e8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4644:	481b      	ldr	r0, [pc, #108]	; (46b4 <z_time_slice+0xc0>)
    4646:	f001 f8bb 	bl	57c0 <z_spin_unlock_valid>
    464a:	b968      	cbnz	r0, 4668 <z_time_slice+0x74>
    464c:	4a1a      	ldr	r2, [pc, #104]	; (46b8 <z_time_slice+0xc4>)
    464e:	4920      	ldr	r1, [pc, #128]	; (46d0 <z_time_slice+0xdc>)
    4650:	481b      	ldr	r0, [pc, #108]	; (46c0 <z_time_slice+0xcc>)
    4652:	23ac      	movs	r3, #172	; 0xac
    4654:	f001 fedf 	bl	6416 <printk>
    4658:	4916      	ldr	r1, [pc, #88]	; (46b4 <z_time_slice+0xc0>)
    465a:	481e      	ldr	r0, [pc, #120]	; (46d4 <z_time_slice+0xe0>)
    465c:	f001 fedb 	bl	6416 <printk>
    4660:	4815      	ldr	r0, [pc, #84]	; (46b8 <z_time_slice+0xc4>)
    4662:	21ac      	movs	r1, #172	; 0xac
    4664:	f001 fdfe 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4668:	f385 8811 	msr	BASEPRI, r5
    466c:	f3bf 8f6f 	isb	sy
}
    4670:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    4672:	2600      	movs	r6, #0
    4674:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    4676:	4a18      	ldr	r2, [pc, #96]	; (46d8 <z_time_slice+0xe4>)
    4678:	6812      	ldr	r2, [r2, #0]
    467a:	b1ba      	cbz	r2, 46ac <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    467c:	89c2      	ldrh	r2, [r0, #14]
    467e:	2a7f      	cmp	r2, #127	; 0x7f
    4680:	d814      	bhi.n	46ac <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    4682:	7b42      	ldrb	r2, [r0, #13]
    4684:	06d2      	lsls	r2, r2, #27
    4686:	d111      	bne.n	46ac <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4688:	4a14      	ldr	r2, [pc, #80]	; (46dc <z_time_slice+0xe8>)
    468a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    468e:	6812      	ldr	r2, [r2, #0]
    4690:	4296      	cmp	r6, r2
    4692:	db0b      	blt.n	46ac <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    4694:	4a12      	ldr	r2, [pc, #72]	; (46e0 <z_time_slice+0xec>)
    4696:	4290      	cmp	r0, r2
    4698:	d008      	beq.n	46ac <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    469a:	691a      	ldr	r2, [r3, #16]
    469c:	42a2      	cmp	r2, r4
    469e:	dc02      	bgt.n	46a6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    46a0:	f7ff ff52 	bl	4548 <move_thread_to_end_of_prio_q>
    46a4:	e7cc      	b.n	4640 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    46a6:	1b12      	subs	r2, r2, r4
    46a8:	611a      	str	r2, [r3, #16]
    46aa:	e7cb      	b.n	4644 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    46ac:	2300      	movs	r3, #0
    46ae:	610b      	str	r3, [r1, #16]
    46b0:	e7c8      	b.n	4644 <z_time_slice+0x50>
    46b2:	bf00      	nop
    46b4:	20000b40 	.word	0x20000b40
    46b8:	000070a9 	.word	0x000070a9
    46bc:	000070fb 	.word	0x000070fb
    46c0:	00006f96 	.word	0x00006f96
    46c4:	00007110 	.word	0x00007110
    46c8:	20000b10 	.word	0x20000b10
    46cc:	20000b3c 	.word	0x20000b3c
    46d0:	000070cf 	.word	0x000070cf
    46d4:	000070e6 	.word	0x000070e6
    46d8:	20000b48 	.word	0x20000b48
    46dc:	20000b44 	.word	0x20000b44
    46e0:	200002d0 	.word	0x200002d0

000046e4 <ready_thread>:
{
    46e4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    46e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    46ea:	7b43      	ldrb	r3, [r0, #13]
    46ec:	2a00      	cmp	r2, #0
{
    46ee:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    46f0:	db3e      	blt.n	4770 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    46f2:	06da      	lsls	r2, r3, #27
    46f4:	d13c      	bne.n	4770 <ready_thread+0x8c>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
    46f6:	6985      	ldr	r5, [r0, #24]
    46f8:	2d00      	cmp	r5, #0
    46fa:	d139      	bne.n	4770 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    46fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4700:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4702:	4b1c      	ldr	r3, [pc, #112]	; (4774 <ready_thread+0x90>)
    4704:	4298      	cmp	r0, r3
    4706:	d109      	bne.n	471c <ready_thread+0x38>
    4708:	491b      	ldr	r1, [pc, #108]	; (4778 <ready_thread+0x94>)
    470a:	481c      	ldr	r0, [pc, #112]	; (477c <ready_thread+0x98>)
    470c:	4a1c      	ldr	r2, [pc, #112]	; (4780 <ready_thread+0x9c>)
    470e:	23b1      	movs	r3, #177	; 0xb1
    4710:	f001 fe81 	bl	6416 <printk>
    4714:	481a      	ldr	r0, [pc, #104]	; (4780 <ready_thread+0x9c>)
    4716:	21b1      	movs	r1, #177	; 0xb1
    4718:	f001 fda4 	bl	6264 <assert_post_action>
	return list->head == list;
    471c:	4919      	ldr	r1, [pc, #100]	; (4784 <ready_thread+0xa0>)
    471e:	460b      	mov	r3, r1
    4720:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4724:	4298      	cmp	r0, r3
    4726:	bf18      	it	ne
    4728:	4605      	movne	r5, r0
    472a:	2d00      	cmp	r5, #0
    472c:	461a      	mov	r2, r3
    472e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4730:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    4732:	bf38      	it	cc
    4734:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4736:	b1b3      	cbz	r3, 4766 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    4738:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    473c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4740:	4286      	cmp	r6, r0
    4742:	d00c      	beq.n	475e <ready_thread+0x7a>
		return b2 - b1;
    4744:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4746:	2800      	cmp	r0, #0
    4748:	dd09      	ble.n	475e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    474a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    474c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4750:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4752:	605c      	str	r4, [r3, #4]
}
    4754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4758:	2000      	movs	r0, #0
    475a:	f7ff bebd 	b.w	44d8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    475e:	42ab      	cmp	r3, r5
    4760:	d001      	beq.n	4766 <ready_thread+0x82>
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	e7e7      	b.n	4736 <ready_thread+0x52>
	node->prev = tail;
    4766:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    476a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    476c:	624c      	str	r4, [r1, #36]	; 0x24
}
    476e:	e7f1      	b.n	4754 <ready_thread+0x70>
}
    4770:	bd70      	pop	{r4, r5, r6, pc}
    4772:	bf00      	nop
    4774:	200002d0 	.word	0x200002d0
    4778:	000079b6 	.word	0x000079b6
    477c:	00006f96 	.word	0x00006f96
    4780:	00007994 	.word	0x00007994
    4784:	20000b10 	.word	0x20000b10

00004788 <z_ready_thread>:
{
    4788:	b538      	push	{r3, r4, r5, lr}
    478a:	4604      	mov	r4, r0
	__asm__ volatile(
    478c:	f04f 0320 	mov.w	r3, #32
    4790:	f3ef 8511 	mrs	r5, BASEPRI
    4794:	f383 8812 	msr	BASEPRI_MAX, r3
    4798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    479c:	4817      	ldr	r0, [pc, #92]	; (47fc <z_ready_thread+0x74>)
    479e:	f001 f801 	bl	57a4 <z_spin_lock_valid>
    47a2:	b968      	cbnz	r0, 47c0 <z_ready_thread+0x38>
    47a4:	4a16      	ldr	r2, [pc, #88]	; (4800 <z_ready_thread+0x78>)
    47a6:	4917      	ldr	r1, [pc, #92]	; (4804 <z_ready_thread+0x7c>)
    47a8:	4817      	ldr	r0, [pc, #92]	; (4808 <z_ready_thread+0x80>)
    47aa:	2381      	movs	r3, #129	; 0x81
    47ac:	f001 fe33 	bl	6416 <printk>
    47b0:	4912      	ldr	r1, [pc, #72]	; (47fc <z_ready_thread+0x74>)
    47b2:	4816      	ldr	r0, [pc, #88]	; (480c <z_ready_thread+0x84>)
    47b4:	f001 fe2f 	bl	6416 <printk>
    47b8:	4811      	ldr	r0, [pc, #68]	; (4800 <z_ready_thread+0x78>)
    47ba:	2181      	movs	r1, #129	; 0x81
    47bc:	f001 fd52 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    47c0:	480e      	ldr	r0, [pc, #56]	; (47fc <z_ready_thread+0x74>)
    47c2:	f001 f80d 	bl	57e0 <z_spin_lock_set_owner>
			ready_thread(thread);
    47c6:	4620      	mov	r0, r4
    47c8:	f7ff ff8c 	bl	46e4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    47cc:	480b      	ldr	r0, [pc, #44]	; (47fc <z_ready_thread+0x74>)
    47ce:	f000 fff7 	bl	57c0 <z_spin_unlock_valid>
    47d2:	b968      	cbnz	r0, 47f0 <z_ready_thread+0x68>
    47d4:	4a0a      	ldr	r2, [pc, #40]	; (4800 <z_ready_thread+0x78>)
    47d6:	490e      	ldr	r1, [pc, #56]	; (4810 <z_ready_thread+0x88>)
    47d8:	480b      	ldr	r0, [pc, #44]	; (4808 <z_ready_thread+0x80>)
    47da:	23ac      	movs	r3, #172	; 0xac
    47dc:	f001 fe1b 	bl	6416 <printk>
    47e0:	4906      	ldr	r1, [pc, #24]	; (47fc <z_ready_thread+0x74>)
    47e2:	480c      	ldr	r0, [pc, #48]	; (4814 <z_ready_thread+0x8c>)
    47e4:	f001 fe17 	bl	6416 <printk>
    47e8:	4805      	ldr	r0, [pc, #20]	; (4800 <z_ready_thread+0x78>)
    47ea:	21ac      	movs	r1, #172	; 0xac
    47ec:	f001 fd3a 	bl	6264 <assert_post_action>
	__asm__ volatile(
    47f0:	f385 8811 	msr	BASEPRI, r5
    47f4:	f3bf 8f6f 	isb	sy
}
    47f8:	bd38      	pop	{r3, r4, r5, pc}
    47fa:	bf00      	nop
    47fc:	20000b40 	.word	0x20000b40
    4800:	000070a9 	.word	0x000070a9
    4804:	000070fb 	.word	0x000070fb
    4808:	00006f96 	.word	0x00006f96
    480c:	00007110 	.word	0x00007110
    4810:	000070cf 	.word	0x000070cf
    4814:	000070e6 	.word	0x000070e6

00004818 <z_sched_start>:
{
    4818:	b538      	push	{r3, r4, r5, lr}
    481a:	4604      	mov	r4, r0
	__asm__ volatile(
    481c:	f04f 0320 	mov.w	r3, #32
    4820:	f3ef 8511 	mrs	r5, BASEPRI
    4824:	f383 8812 	msr	BASEPRI_MAX, r3
    4828:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    482c:	481d      	ldr	r0, [pc, #116]	; (48a4 <z_sched_start+0x8c>)
    482e:	f000 ffb9 	bl	57a4 <z_spin_lock_valid>
    4832:	b968      	cbnz	r0, 4850 <z_sched_start+0x38>
    4834:	4a1c      	ldr	r2, [pc, #112]	; (48a8 <z_sched_start+0x90>)
    4836:	491d      	ldr	r1, [pc, #116]	; (48ac <z_sched_start+0x94>)
    4838:	481d      	ldr	r0, [pc, #116]	; (48b0 <z_sched_start+0x98>)
    483a:	2381      	movs	r3, #129	; 0x81
    483c:	f001 fdeb 	bl	6416 <printk>
    4840:	4918      	ldr	r1, [pc, #96]	; (48a4 <z_sched_start+0x8c>)
    4842:	481c      	ldr	r0, [pc, #112]	; (48b4 <z_sched_start+0x9c>)
    4844:	f001 fde7 	bl	6416 <printk>
    4848:	4817      	ldr	r0, [pc, #92]	; (48a8 <z_sched_start+0x90>)
    484a:	2181      	movs	r1, #129	; 0x81
    484c:	f001 fd0a 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4850:	4814      	ldr	r0, [pc, #80]	; (48a4 <z_sched_start+0x8c>)
    4852:	f000 ffc5 	bl	57e0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4856:	7b63      	ldrb	r3, [r4, #13]
    4858:	075a      	lsls	r2, r3, #29
    485a:	d416      	bmi.n	488a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    485c:	4811      	ldr	r0, [pc, #68]	; (48a4 <z_sched_start+0x8c>)
    485e:	f000 ffaf 	bl	57c0 <z_spin_unlock_valid>
    4862:	b968      	cbnz	r0, 4880 <z_sched_start+0x68>
    4864:	4a10      	ldr	r2, [pc, #64]	; (48a8 <z_sched_start+0x90>)
    4866:	4914      	ldr	r1, [pc, #80]	; (48b8 <z_sched_start+0xa0>)
    4868:	4811      	ldr	r0, [pc, #68]	; (48b0 <z_sched_start+0x98>)
    486a:	23ac      	movs	r3, #172	; 0xac
    486c:	f001 fdd3 	bl	6416 <printk>
    4870:	490c      	ldr	r1, [pc, #48]	; (48a4 <z_sched_start+0x8c>)
    4872:	4812      	ldr	r0, [pc, #72]	; (48bc <z_sched_start+0xa4>)
    4874:	f001 fdcf 	bl	6416 <printk>
    4878:	480b      	ldr	r0, [pc, #44]	; (48a8 <z_sched_start+0x90>)
    487a:	21ac      	movs	r1, #172	; 0xac
    487c:	f001 fcf2 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4880:	f385 8811 	msr	BASEPRI, r5
    4884:	f3bf 8f6f 	isb	sy
}
    4888:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    488a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    488e:	4620      	mov	r0, r4
    4890:	7363      	strb	r3, [r4, #13]
    4892:	f7ff ff27 	bl	46e4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4896:	4629      	mov	r1, r5
    4898:	4802      	ldr	r0, [pc, #8]	; (48a4 <z_sched_start+0x8c>)
}
    489a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    489e:	f7ff bd1f 	b.w	42e0 <z_reschedule>
    48a2:	bf00      	nop
    48a4:	20000b40 	.word	0x20000b40
    48a8:	000070a9 	.word	0x000070a9
    48ac:	000070fb 	.word	0x000070fb
    48b0:	00006f96 	.word	0x00006f96
    48b4:	00007110 	.word	0x00007110
    48b8:	000070cf 	.word	0x000070cf
    48bc:	000070e6 	.word	0x000070e6

000048c0 <z_thread_timeout>:
{
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	4604      	mov	r4, r0
	__asm__ volatile(
    48c4:	f04f 0320 	mov.w	r3, #32
    48c8:	f3ef 8611 	mrs	r6, BASEPRI
    48cc:	f383 8812 	msr	BASEPRI_MAX, r3
    48d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    48d4:	4820      	ldr	r0, [pc, #128]	; (4958 <z_thread_timeout+0x98>)
    48d6:	f000 ff65 	bl	57a4 <z_spin_lock_valid>
    48da:	b968      	cbnz	r0, 48f8 <z_thread_timeout+0x38>
    48dc:	4a1f      	ldr	r2, [pc, #124]	; (495c <z_thread_timeout+0x9c>)
    48de:	4920      	ldr	r1, [pc, #128]	; (4960 <z_thread_timeout+0xa0>)
    48e0:	4820      	ldr	r0, [pc, #128]	; (4964 <z_thread_timeout+0xa4>)
    48e2:	2381      	movs	r3, #129	; 0x81
    48e4:	f001 fd97 	bl	6416 <printk>
    48e8:	491b      	ldr	r1, [pc, #108]	; (4958 <z_thread_timeout+0x98>)
    48ea:	481f      	ldr	r0, [pc, #124]	; (4968 <z_thread_timeout+0xa8>)
    48ec:	f001 fd93 	bl	6416 <printk>
    48f0:	481a      	ldr	r0, [pc, #104]	; (495c <z_thread_timeout+0x9c>)
    48f2:	2181      	movs	r1, #129	; 0x81
    48f4:	f001 fcb6 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    48f8:	4817      	ldr	r0, [pc, #92]	; (4958 <z_thread_timeout+0x98>)
    48fa:	f000 ff71 	bl	57e0 <z_spin_lock_set_owner>
		if (!killed) {
    48fe:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4902:	f013 0f28 	tst.w	r3, #40	; 0x28
    4906:	d110      	bne.n	492a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    4908:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    490c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4910:	b113      	cbz	r3, 4918 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    4912:	4628      	mov	r0, r5
    4914:	f7ff fdbe 	bl	4494 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4918:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    491c:	f023 0314 	bic.w	r3, r3, #20
    4920:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    4924:	4628      	mov	r0, r5
    4926:	f7ff fedd 	bl	46e4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    492a:	480b      	ldr	r0, [pc, #44]	; (4958 <z_thread_timeout+0x98>)
    492c:	f000 ff48 	bl	57c0 <z_spin_unlock_valid>
    4930:	b968      	cbnz	r0, 494e <z_thread_timeout+0x8e>
    4932:	4a0a      	ldr	r2, [pc, #40]	; (495c <z_thread_timeout+0x9c>)
    4934:	490d      	ldr	r1, [pc, #52]	; (496c <z_thread_timeout+0xac>)
    4936:	480b      	ldr	r0, [pc, #44]	; (4964 <z_thread_timeout+0xa4>)
    4938:	23ac      	movs	r3, #172	; 0xac
    493a:	f001 fd6c 	bl	6416 <printk>
    493e:	4906      	ldr	r1, [pc, #24]	; (4958 <z_thread_timeout+0x98>)
    4940:	480b      	ldr	r0, [pc, #44]	; (4970 <z_thread_timeout+0xb0>)
    4942:	f001 fd68 	bl	6416 <printk>
    4946:	4805      	ldr	r0, [pc, #20]	; (495c <z_thread_timeout+0x9c>)
    4948:	21ac      	movs	r1, #172	; 0xac
    494a:	f001 fc8b 	bl	6264 <assert_post_action>
	__asm__ volatile(
    494e:	f386 8811 	msr	BASEPRI, r6
    4952:	f3bf 8f6f 	isb	sy
}
    4956:	bd70      	pop	{r4, r5, r6, pc}
    4958:	20000b40 	.word	0x20000b40
    495c:	000070a9 	.word	0x000070a9
    4960:	000070fb 	.word	0x000070fb
    4964:	00006f96 	.word	0x00006f96
    4968:	00007110 	.word	0x00007110
    496c:	000070cf 	.word	0x000070cf
    4970:	000070e6 	.word	0x000070e6

00004974 <unready_thread>:
{
    4974:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4976:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    497a:	7b43      	ldrb	r3, [r0, #13]
    497c:	2a00      	cmp	r2, #0
{
    497e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4980:	da06      	bge.n	4990 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4986:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    4988:	4601      	mov	r1, r0
    498a:	4806      	ldr	r0, [pc, #24]	; (49a4 <unready_thread+0x30>)
    498c:	f7ff fd60 	bl	4450 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4990:	4b05      	ldr	r3, [pc, #20]	; (49a8 <unready_thread+0x34>)
    4992:	6898      	ldr	r0, [r3, #8]
    4994:	1b03      	subs	r3, r0, r4
    4996:	4258      	negs	r0, r3
}
    4998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    499c:	4158      	adcs	r0, r3
    499e:	f7ff bd9b 	b.w	44d8 <update_cache>
    49a2:	bf00      	nop
    49a4:	20000b30 	.word	0x20000b30
    49a8:	20000b10 	.word	0x20000b10

000049ac <add_to_waitq_locked>:
{
    49ac:	b538      	push	{r3, r4, r5, lr}
    49ae:	4604      	mov	r4, r0
    49b0:	460d      	mov	r5, r1
	unready_thread(thread);
    49b2:	f7ff ffdf 	bl	4974 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    49b6:	7b63      	ldrb	r3, [r4, #13]
    49b8:	f043 0302 	orr.w	r3, r3, #2
    49bc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    49be:	b31d      	cbz	r5, 4a08 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    49c0:	4b17      	ldr	r3, [pc, #92]	; (4a20 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    49c2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    49c4:	429c      	cmp	r4, r3
    49c6:	d109      	bne.n	49dc <add_to_waitq_locked+0x30>
    49c8:	4916      	ldr	r1, [pc, #88]	; (4a24 <add_to_waitq_locked+0x78>)
    49ca:	4817      	ldr	r0, [pc, #92]	; (4a28 <add_to_waitq_locked+0x7c>)
    49cc:	4a17      	ldr	r2, [pc, #92]	; (4a2c <add_to_waitq_locked+0x80>)
    49ce:	23b1      	movs	r3, #177	; 0xb1
    49d0:	f001 fd21 	bl	6416 <printk>
    49d4:	4815      	ldr	r0, [pc, #84]	; (4a2c <add_to_waitq_locked+0x80>)
    49d6:	21b1      	movs	r1, #177	; 0xb1
    49d8:	f001 fc44 	bl	6264 <assert_post_action>
	return list->head == list;
    49dc:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49de:	429d      	cmp	r5, r3
    49e0:	bf08      	it	eq
    49e2:	2300      	moveq	r3, #0
    49e4:	2b00      	cmp	r3, #0
    49e6:	bf38      	it	cc
    49e8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49ea:	b19b      	cbz	r3, 4a14 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    49ec:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    49f0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    49f4:	4291      	cmp	r1, r2
    49f6:	d008      	beq.n	4a0a <add_to_waitq_locked+0x5e>
		return b2 - b1;
    49f8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    49fa:	2a00      	cmp	r2, #0
    49fc:	dd05      	ble.n	4a0a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    49fe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4a00:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4a04:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4a06:	605c      	str	r4, [r3, #4]
}
    4a08:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4a0a:	686a      	ldr	r2, [r5, #4]
    4a0c:	4293      	cmp	r3, r2
    4a0e:	d001      	beq.n	4a14 <add_to_waitq_locked+0x68>
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	e7ea      	b.n	49ea <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    4a14:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4a16:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4a1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4a1c:	606c      	str	r4, [r5, #4]
    4a1e:	e7f3      	b.n	4a08 <add_to_waitq_locked+0x5c>
    4a20:	200002d0 	.word	0x200002d0
    4a24:	000079b6 	.word	0x000079b6
    4a28:	00006f96 	.word	0x00006f96
    4a2c:	00007994 	.word	0x00007994

00004a30 <pend>:
{
    4a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a34:	4604      	mov	r4, r0
    4a36:	460d      	mov	r5, r1
    4a38:	4616      	mov	r6, r2
    4a3a:	461f      	mov	r7, r3
	__asm__ volatile(
    4a3c:	f04f 0320 	mov.w	r3, #32
    4a40:	f3ef 8811 	mrs	r8, BASEPRI
    4a44:	f383 8812 	msr	BASEPRI_MAX, r3
    4a48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a4c:	481f      	ldr	r0, [pc, #124]	; (4acc <pend+0x9c>)
    4a4e:	f000 fea9 	bl	57a4 <z_spin_lock_valid>
    4a52:	b968      	cbnz	r0, 4a70 <pend+0x40>
    4a54:	4a1e      	ldr	r2, [pc, #120]	; (4ad0 <pend+0xa0>)
    4a56:	491f      	ldr	r1, [pc, #124]	; (4ad4 <pend+0xa4>)
    4a58:	481f      	ldr	r0, [pc, #124]	; (4ad8 <pend+0xa8>)
    4a5a:	2381      	movs	r3, #129	; 0x81
    4a5c:	f001 fcdb 	bl	6416 <printk>
    4a60:	491a      	ldr	r1, [pc, #104]	; (4acc <pend+0x9c>)
    4a62:	481e      	ldr	r0, [pc, #120]	; (4adc <pend+0xac>)
    4a64:	f001 fcd7 	bl	6416 <printk>
    4a68:	4819      	ldr	r0, [pc, #100]	; (4ad0 <pend+0xa0>)
    4a6a:	2181      	movs	r1, #129	; 0x81
    4a6c:	f001 fbfa 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a70:	4816      	ldr	r0, [pc, #88]	; (4acc <pend+0x9c>)
    4a72:	f000 feb5 	bl	57e0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4a76:	4620      	mov	r0, r4
    4a78:	4629      	mov	r1, r5
    4a7a:	f7ff ff97 	bl	49ac <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a7e:	4813      	ldr	r0, [pc, #76]	; (4acc <pend+0x9c>)
    4a80:	f000 fe9e 	bl	57c0 <z_spin_unlock_valid>
    4a84:	b968      	cbnz	r0, 4aa2 <pend+0x72>
    4a86:	4a12      	ldr	r2, [pc, #72]	; (4ad0 <pend+0xa0>)
    4a88:	4915      	ldr	r1, [pc, #84]	; (4ae0 <pend+0xb0>)
    4a8a:	4813      	ldr	r0, [pc, #76]	; (4ad8 <pend+0xa8>)
    4a8c:	23ac      	movs	r3, #172	; 0xac
    4a8e:	f001 fcc2 	bl	6416 <printk>
    4a92:	490e      	ldr	r1, [pc, #56]	; (4acc <pend+0x9c>)
    4a94:	4813      	ldr	r0, [pc, #76]	; (4ae4 <pend+0xb4>)
    4a96:	f001 fcbe 	bl	6416 <printk>
    4a9a:	480d      	ldr	r0, [pc, #52]	; (4ad0 <pend+0xa0>)
    4a9c:	21ac      	movs	r1, #172	; 0xac
    4a9e:	f001 fbe1 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4aa2:	f388 8811 	msr	BASEPRI, r8
    4aa6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4aaa:	1c7b      	adds	r3, r7, #1
    4aac:	bf08      	it	eq
    4aae:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4ab2:	d008      	beq.n	4ac6 <pend+0x96>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4ab4:	4632      	mov	r2, r6
    4ab6:	463b      	mov	r3, r7
    4ab8:	f104 0018 	add.w	r0, r4, #24
    4abc:	490a      	ldr	r1, [pc, #40]	; (4ae8 <pend+0xb8>)
}
    4abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ac2:	f000 bee5 	b.w	5890 <z_add_timeout>
    4ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4aca:	bf00      	nop
    4acc:	20000b40 	.word	0x20000b40
    4ad0:	000070a9 	.word	0x000070a9
    4ad4:	000070fb 	.word	0x000070fb
    4ad8:	00006f96 	.word	0x00006f96
    4adc:	00007110 	.word	0x00007110
    4ae0:	000070cf 	.word	0x000070cf
    4ae4:	000070e6 	.word	0x000070e6
    4ae8:	000048c1 	.word	0x000048c1

00004aec <z_pend_curr>:
{
    4aec:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    4aee:	4b11      	ldr	r3, [pc, #68]	; (4b34 <z_pend_curr+0x48>)
{
    4af0:	4604      	mov	r4, r0
	pending_current = _current;
    4af2:	6898      	ldr	r0, [r3, #8]
    4af4:	4b10      	ldr	r3, [pc, #64]	; (4b38 <z_pend_curr+0x4c>)
{
    4af6:	460d      	mov	r5, r1
	pending_current = _current;
    4af8:	6018      	str	r0, [r3, #0]
{
    4afa:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4b00:	f7ff ff96 	bl	4a30 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b04:	4620      	mov	r0, r4
    4b06:	f000 fe5b 	bl	57c0 <z_spin_unlock_valid>
    4b0a:	b968      	cbnz	r0, 4b28 <z_pend_curr+0x3c>
    4b0c:	4a0b      	ldr	r2, [pc, #44]	; (4b3c <z_pend_curr+0x50>)
    4b0e:	490c      	ldr	r1, [pc, #48]	; (4b40 <z_pend_curr+0x54>)
    4b10:	480c      	ldr	r0, [pc, #48]	; (4b44 <z_pend_curr+0x58>)
    4b12:	23c3      	movs	r3, #195	; 0xc3
    4b14:	f001 fc7f 	bl	6416 <printk>
    4b18:	480b      	ldr	r0, [pc, #44]	; (4b48 <z_pend_curr+0x5c>)
    4b1a:	4621      	mov	r1, r4
    4b1c:	f001 fc7b 	bl	6416 <printk>
    4b20:	4806      	ldr	r0, [pc, #24]	; (4b3c <z_pend_curr+0x50>)
    4b22:	21c3      	movs	r1, #195	; 0xc3
    4b24:	f001 fb9e 	bl	6264 <assert_post_action>
    4b28:	4628      	mov	r0, r5
}
    4b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4b2e:	f7fc bedb 	b.w	18e8 <arch_swap>
    4b32:	bf00      	nop
    4b34:	20000b10 	.word	0x20000b10
    4b38:	20000b3c 	.word	0x20000b3c
    4b3c:	000070a9 	.word	0x000070a9
    4b40:	000070cf 	.word	0x000070cf
    4b44:	00006f96 	.word	0x00006f96
    4b48:	000070e6 	.word	0x000070e6

00004b4c <z_set_prio>:
{
    4b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b4e:	4604      	mov	r4, r0
    4b50:	460e      	mov	r6, r1
	__asm__ volatile(
    4b52:	f04f 0320 	mov.w	r3, #32
    4b56:	f3ef 8711 	mrs	r7, BASEPRI
    4b5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4b5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b62:	483c      	ldr	r0, [pc, #240]	; (4c54 <z_set_prio+0x108>)
    4b64:	f000 fe1e 	bl	57a4 <z_spin_lock_valid>
    4b68:	b968      	cbnz	r0, 4b86 <z_set_prio+0x3a>
    4b6a:	4a3b      	ldr	r2, [pc, #236]	; (4c58 <z_set_prio+0x10c>)
    4b6c:	493b      	ldr	r1, [pc, #236]	; (4c5c <z_set_prio+0x110>)
    4b6e:	483c      	ldr	r0, [pc, #240]	; (4c60 <z_set_prio+0x114>)
    4b70:	2381      	movs	r3, #129	; 0x81
    4b72:	f001 fc50 	bl	6416 <printk>
    4b76:	4937      	ldr	r1, [pc, #220]	; (4c54 <z_set_prio+0x108>)
    4b78:	483a      	ldr	r0, [pc, #232]	; (4c64 <z_set_prio+0x118>)
    4b7a:	f001 fc4c 	bl	6416 <printk>
    4b7e:	4836      	ldr	r0, [pc, #216]	; (4c58 <z_set_prio+0x10c>)
    4b80:	2181      	movs	r1, #129	; 0x81
    4b82:	f001 fb6f 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b86:	4833      	ldr	r0, [pc, #204]	; (4c54 <z_set_prio+0x108>)
    4b88:	f000 fe2a 	bl	57e0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b8c:	7b63      	ldrb	r3, [r4, #13]
    4b8e:	06da      	lsls	r2, r3, #27
    4b90:	b276      	sxtb	r6, r6
    4b92:	d15c      	bne.n	4c4e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    4b94:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    4b96:	2d00      	cmp	r5, #0
    4b98:	d159      	bne.n	4c4e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b9e:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4ba0:	4831      	ldr	r0, [pc, #196]	; (4c68 <z_set_prio+0x11c>)
    4ba2:	4621      	mov	r1, r4
    4ba4:	f7ff fc54 	bl	4450 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4ba8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4baa:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4bb0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4bb2:	4b2e      	ldr	r3, [pc, #184]	; (4c6c <z_set_prio+0x120>)
    4bb4:	429c      	cmp	r4, r3
    4bb6:	d109      	bne.n	4bcc <z_set_prio+0x80>
    4bb8:	492d      	ldr	r1, [pc, #180]	; (4c70 <z_set_prio+0x124>)
    4bba:	4829      	ldr	r0, [pc, #164]	; (4c60 <z_set_prio+0x114>)
    4bbc:	4a2d      	ldr	r2, [pc, #180]	; (4c74 <z_set_prio+0x128>)
    4bbe:	23b1      	movs	r3, #177	; 0xb1
    4bc0:	f001 fc29 	bl	6416 <printk>
    4bc4:	482b      	ldr	r0, [pc, #172]	; (4c74 <z_set_prio+0x128>)
    4bc6:	21b1      	movs	r1, #177	; 0xb1
    4bc8:	f001 fb4c 	bl	6264 <assert_post_action>
	return list->head == list;
    4bcc:	492a      	ldr	r1, [pc, #168]	; (4c78 <z_set_prio+0x12c>)
    4bce:	460b      	mov	r3, r1
    4bd0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bd4:	4298      	cmp	r0, r3
    4bd6:	bf18      	it	ne
    4bd8:	4605      	movne	r5, r0
    4bda:	2d00      	cmp	r5, #0
    4bdc:	461a      	mov	r2, r3
    4bde:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4be0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    4be2:	bf38      	it	cc
    4be4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4be6:	b36b      	cbz	r3, 4c44 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    4be8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4bec:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4bf0:	4286      	cmp	r6, r0
    4bf2:	d023      	beq.n	4c3c <z_set_prio+0xf0>
		return b2 - b1;
    4bf4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4bf6:	2800      	cmp	r0, #0
    4bf8:	dd20      	ble.n	4c3c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    4bfa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4bfc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4c00:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4c02:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4c04:	2001      	movs	r0, #1
    4c06:	f7ff fc67 	bl	44d8 <update_cache>
    4c0a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c0c:	4811      	ldr	r0, [pc, #68]	; (4c54 <z_set_prio+0x108>)
    4c0e:	f000 fdd7 	bl	57c0 <z_spin_unlock_valid>
    4c12:	b968      	cbnz	r0, 4c30 <z_set_prio+0xe4>
    4c14:	4a10      	ldr	r2, [pc, #64]	; (4c58 <z_set_prio+0x10c>)
    4c16:	4919      	ldr	r1, [pc, #100]	; (4c7c <z_set_prio+0x130>)
    4c18:	4811      	ldr	r0, [pc, #68]	; (4c60 <z_set_prio+0x114>)
    4c1a:	23ac      	movs	r3, #172	; 0xac
    4c1c:	f001 fbfb 	bl	6416 <printk>
    4c20:	490c      	ldr	r1, [pc, #48]	; (4c54 <z_set_prio+0x108>)
    4c22:	4817      	ldr	r0, [pc, #92]	; (4c80 <z_set_prio+0x134>)
    4c24:	f001 fbf7 	bl	6416 <printk>
    4c28:	480b      	ldr	r0, [pc, #44]	; (4c58 <z_set_prio+0x10c>)
    4c2a:	21ac      	movs	r1, #172	; 0xac
    4c2c:	f001 fb1a 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4c30:	f387 8811 	msr	BASEPRI, r7
    4c34:	f3bf 8f6f 	isb	sy
}
    4c38:	4620      	mov	r0, r4
    4c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4c3c:	42ab      	cmp	r3, r5
    4c3e:	d001      	beq.n	4c44 <z_set_prio+0xf8>
    4c40:	681b      	ldr	r3, [r3, #0]
    4c42:	e7d0      	b.n	4be6 <z_set_prio+0x9a>
	node->prev = tail;
    4c44:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4c48:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4c4a:	624c      	str	r4, [r1, #36]	; 0x24
}
    4c4c:	e7da      	b.n	4c04 <z_set_prio+0xb8>
			thread->base.prio = prio;
    4c4e:	73a6      	strb	r6, [r4, #14]
    4c50:	2400      	movs	r4, #0
    4c52:	e7db      	b.n	4c0c <z_set_prio+0xc0>
    4c54:	20000b40 	.word	0x20000b40
    4c58:	000070a9 	.word	0x000070a9
    4c5c:	000070fb 	.word	0x000070fb
    4c60:	00006f96 	.word	0x00006f96
    4c64:	00007110 	.word	0x00007110
    4c68:	20000b30 	.word	0x20000b30
    4c6c:	200002d0 	.word	0x200002d0
    4c70:	000079b6 	.word	0x000079b6
    4c74:	00007994 	.word	0x00007994
    4c78:	20000b10 	.word	0x20000b10
    4c7c:	000070cf 	.word	0x000070cf
    4c80:	000070e6 	.word	0x000070e6

00004c84 <z_impl_k_thread_suspend>:
{
    4c84:	b570      	push	{r4, r5, r6, lr}
    4c86:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4c88:	3018      	adds	r0, #24
    4c8a:	f000 fed5 	bl	5a38 <z_abort_timeout>
	__asm__ volatile(
    4c8e:	f04f 0320 	mov.w	r3, #32
    4c92:	f3ef 8611 	mrs	r6, BASEPRI
    4c96:	f383 8812 	msr	BASEPRI_MAX, r3
    4c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c9e:	4825      	ldr	r0, [pc, #148]	; (4d34 <z_impl_k_thread_suspend+0xb0>)
    4ca0:	f000 fd80 	bl	57a4 <z_spin_lock_valid>
    4ca4:	b968      	cbnz	r0, 4cc2 <z_impl_k_thread_suspend+0x3e>
    4ca6:	4a24      	ldr	r2, [pc, #144]	; (4d38 <z_impl_k_thread_suspend+0xb4>)
    4ca8:	4924      	ldr	r1, [pc, #144]	; (4d3c <z_impl_k_thread_suspend+0xb8>)
    4caa:	4825      	ldr	r0, [pc, #148]	; (4d40 <z_impl_k_thread_suspend+0xbc>)
    4cac:	2381      	movs	r3, #129	; 0x81
    4cae:	f001 fbb2 	bl	6416 <printk>
    4cb2:	4920      	ldr	r1, [pc, #128]	; (4d34 <z_impl_k_thread_suspend+0xb0>)
    4cb4:	4823      	ldr	r0, [pc, #140]	; (4d44 <z_impl_k_thread_suspend+0xc0>)
    4cb6:	f001 fbae 	bl	6416 <printk>
    4cba:	481f      	ldr	r0, [pc, #124]	; (4d38 <z_impl_k_thread_suspend+0xb4>)
    4cbc:	2181      	movs	r1, #129	; 0x81
    4cbe:	f001 fad1 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4cc2:	481c      	ldr	r0, [pc, #112]	; (4d34 <z_impl_k_thread_suspend+0xb0>)
    4cc4:	f000 fd8c 	bl	57e0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    4cc8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4ccc:	7b63      	ldrb	r3, [r4, #13]
    4cce:	2a00      	cmp	r2, #0
    4cd0:	da06      	bge.n	4ce0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    4cd6:	481c      	ldr	r0, [pc, #112]	; (4d48 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4cd8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4cda:	4621      	mov	r1, r4
    4cdc:	f7ff fbb8 	bl	4450 <z_priq_dumb_remove>
		update_cache(thread == _current);
    4ce0:	4d1a      	ldr	r5, [pc, #104]	; (4d4c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4ce2:	7b63      	ldrb	r3, [r4, #13]
    4ce4:	68a8      	ldr	r0, [r5, #8]
    4ce6:	f043 0310 	orr.w	r3, r3, #16
    4cea:	7363      	strb	r3, [r4, #13]
    4cec:	1b03      	subs	r3, r0, r4
    4cee:	4258      	negs	r0, r3
    4cf0:	4158      	adcs	r0, r3
    4cf2:	f7ff fbf1 	bl	44d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4cf6:	480f      	ldr	r0, [pc, #60]	; (4d34 <z_impl_k_thread_suspend+0xb0>)
    4cf8:	f000 fd62 	bl	57c0 <z_spin_unlock_valid>
    4cfc:	b968      	cbnz	r0, 4d1a <z_impl_k_thread_suspend+0x96>
    4cfe:	4a0e      	ldr	r2, [pc, #56]	; (4d38 <z_impl_k_thread_suspend+0xb4>)
    4d00:	4913      	ldr	r1, [pc, #76]	; (4d50 <z_impl_k_thread_suspend+0xcc>)
    4d02:	480f      	ldr	r0, [pc, #60]	; (4d40 <z_impl_k_thread_suspend+0xbc>)
    4d04:	23ac      	movs	r3, #172	; 0xac
    4d06:	f001 fb86 	bl	6416 <printk>
    4d0a:	490a      	ldr	r1, [pc, #40]	; (4d34 <z_impl_k_thread_suspend+0xb0>)
    4d0c:	4811      	ldr	r0, [pc, #68]	; (4d54 <z_impl_k_thread_suspend+0xd0>)
    4d0e:	f001 fb82 	bl	6416 <printk>
    4d12:	4809      	ldr	r0, [pc, #36]	; (4d38 <z_impl_k_thread_suspend+0xb4>)
    4d14:	21ac      	movs	r1, #172	; 0xac
    4d16:	f001 faa5 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4d1a:	f386 8811 	msr	BASEPRI, r6
    4d1e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4d22:	68ab      	ldr	r3, [r5, #8]
    4d24:	42a3      	cmp	r3, r4
    4d26:	d103      	bne.n	4d30 <z_impl_k_thread_suspend+0xac>
}
    4d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4d2c:	f001 bdd4 	b.w	68d8 <z_reschedule_unlocked>
}
    4d30:	bd70      	pop	{r4, r5, r6, pc}
    4d32:	bf00      	nop
    4d34:	20000b40 	.word	0x20000b40
    4d38:	000070a9 	.word	0x000070a9
    4d3c:	000070fb 	.word	0x000070fb
    4d40:	00006f96 	.word	0x00006f96
    4d44:	00007110 	.word	0x00007110
    4d48:	20000b30 	.word	0x20000b30
    4d4c:	20000b10 	.word	0x20000b10
    4d50:	000070cf 	.word	0x000070cf
    4d54:	000070e6 	.word	0x000070e6

00004d58 <k_sched_unlock>:
{
    4d58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d5a:	f04f 0320 	mov.w	r3, #32
    4d5e:	f3ef 8511 	mrs	r5, BASEPRI
    4d62:	f383 8812 	msr	BASEPRI_MAX, r3
    4d66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d6a:	482d      	ldr	r0, [pc, #180]	; (4e20 <k_sched_unlock+0xc8>)
    4d6c:	f000 fd1a 	bl	57a4 <z_spin_lock_valid>
    4d70:	b968      	cbnz	r0, 4d8e <k_sched_unlock+0x36>
    4d72:	4a2c      	ldr	r2, [pc, #176]	; (4e24 <k_sched_unlock+0xcc>)
    4d74:	492c      	ldr	r1, [pc, #176]	; (4e28 <k_sched_unlock+0xd0>)
    4d76:	482d      	ldr	r0, [pc, #180]	; (4e2c <k_sched_unlock+0xd4>)
    4d78:	2381      	movs	r3, #129	; 0x81
    4d7a:	f001 fb4c 	bl	6416 <printk>
    4d7e:	4928      	ldr	r1, [pc, #160]	; (4e20 <k_sched_unlock+0xc8>)
    4d80:	482b      	ldr	r0, [pc, #172]	; (4e30 <k_sched_unlock+0xd8>)
    4d82:	f001 fb48 	bl	6416 <printk>
    4d86:	4827      	ldr	r0, [pc, #156]	; (4e24 <k_sched_unlock+0xcc>)
    4d88:	2181      	movs	r1, #129	; 0x81
    4d8a:	f001 fa6b 	bl	6264 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4d8e:	4c29      	ldr	r4, [pc, #164]	; (4e34 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    4d90:	4823      	ldr	r0, [pc, #140]	; (4e20 <k_sched_unlock+0xc8>)
    4d92:	f000 fd25 	bl	57e0 <z_spin_lock_set_owner>
    4d96:	68a2      	ldr	r2, [r4, #8]
    4d98:	7bd2      	ldrb	r2, [r2, #15]
    4d9a:	b972      	cbnz	r2, 4dba <k_sched_unlock+0x62>
    4d9c:	4926      	ldr	r1, [pc, #152]	; (4e38 <k_sched_unlock+0xe0>)
    4d9e:	4a27      	ldr	r2, [pc, #156]	; (4e3c <k_sched_unlock+0xe4>)
    4da0:	4822      	ldr	r0, [pc, #136]	; (4e2c <k_sched_unlock+0xd4>)
    4da2:	f240 3355 	movw	r3, #853	; 0x355
    4da6:	f001 fb36 	bl	6416 <printk>
    4daa:	4825      	ldr	r0, [pc, #148]	; (4e40 <k_sched_unlock+0xe8>)
    4dac:	f001 fb33 	bl	6416 <printk>
    4db0:	4822      	ldr	r0, [pc, #136]	; (4e3c <k_sched_unlock+0xe4>)
    4db2:	f240 3155 	movw	r1, #853	; 0x355
    4db6:	f001 fa55 	bl	6264 <assert_post_action>
    4dba:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    4dbe:	b173      	cbz	r3, 4dde <k_sched_unlock+0x86>
    4dc0:	4920      	ldr	r1, [pc, #128]	; (4e44 <k_sched_unlock+0xec>)
    4dc2:	4a1e      	ldr	r2, [pc, #120]	; (4e3c <k_sched_unlock+0xe4>)
    4dc4:	4819      	ldr	r0, [pc, #100]	; (4e2c <k_sched_unlock+0xd4>)
    4dc6:	f240 3356 	movw	r3, #854	; 0x356
    4dca:	f001 fb24 	bl	6416 <printk>
    4dce:	481c      	ldr	r0, [pc, #112]	; (4e40 <k_sched_unlock+0xe8>)
    4dd0:	f001 fb21 	bl	6416 <printk>
    4dd4:	4819      	ldr	r0, [pc, #100]	; (4e3c <k_sched_unlock+0xe4>)
    4dd6:	f240 3156 	movw	r1, #854	; 0x356
    4dda:	f001 fa43 	bl	6264 <assert_post_action>
		++_current->base.sched_locked;
    4dde:	68a2      	ldr	r2, [r4, #8]
    4de0:	7bd3      	ldrb	r3, [r2, #15]
    4de2:	3301      	adds	r3, #1
		update_cache(0);
    4de4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4de6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4de8:	f7ff fb76 	bl	44d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4dec:	480c      	ldr	r0, [pc, #48]	; (4e20 <k_sched_unlock+0xc8>)
    4dee:	f000 fce7 	bl	57c0 <z_spin_unlock_valid>
    4df2:	b968      	cbnz	r0, 4e10 <k_sched_unlock+0xb8>
    4df4:	4a0b      	ldr	r2, [pc, #44]	; (4e24 <k_sched_unlock+0xcc>)
    4df6:	4914      	ldr	r1, [pc, #80]	; (4e48 <k_sched_unlock+0xf0>)
    4df8:	480c      	ldr	r0, [pc, #48]	; (4e2c <k_sched_unlock+0xd4>)
    4dfa:	23ac      	movs	r3, #172	; 0xac
    4dfc:	f001 fb0b 	bl	6416 <printk>
    4e00:	4907      	ldr	r1, [pc, #28]	; (4e20 <k_sched_unlock+0xc8>)
    4e02:	4812      	ldr	r0, [pc, #72]	; (4e4c <k_sched_unlock+0xf4>)
    4e04:	f001 fb07 	bl	6416 <printk>
    4e08:	4806      	ldr	r0, [pc, #24]	; (4e24 <k_sched_unlock+0xcc>)
    4e0a:	21ac      	movs	r1, #172	; 0xac
    4e0c:	f001 fa2a 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4e10:	f385 8811 	msr	BASEPRI, r5
    4e14:	f3bf 8f6f 	isb	sy
}
    4e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4e1c:	f001 bd5c 	b.w	68d8 <z_reschedule_unlocked>
    4e20:	20000b40 	.word	0x20000b40
    4e24:	000070a9 	.word	0x000070a9
    4e28:	000070fb 	.word	0x000070fb
    4e2c:	00006f96 	.word	0x00006f96
    4e30:	00007110 	.word	0x00007110
    4e34:	20000b10 	.word	0x20000b10
    4e38:	00007a15 	.word	0x00007a15
    4e3c:	00007994 	.word	0x00007994
    4e40:	00007960 	.word	0x00007960
    4e44:	000078e7 	.word	0x000078e7
    4e48:	000070cf 	.word	0x000070cf
    4e4c:	000070e6 	.word	0x000070e6

00004e50 <z_unpend_first_thread>:
{
    4e50:	b538      	push	{r3, r4, r5, lr}
    4e52:	4604      	mov	r4, r0
	__asm__ volatile(
    4e54:	f04f 0320 	mov.w	r3, #32
    4e58:	f3ef 8511 	mrs	r5, BASEPRI
    4e5c:	f383 8812 	msr	BASEPRI_MAX, r3
    4e60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e64:	481b      	ldr	r0, [pc, #108]	; (4ed4 <z_unpend_first_thread+0x84>)
    4e66:	f000 fc9d 	bl	57a4 <z_spin_lock_valid>
    4e6a:	b968      	cbnz	r0, 4e88 <z_unpend_first_thread+0x38>
    4e6c:	4a1a      	ldr	r2, [pc, #104]	; (4ed8 <z_unpend_first_thread+0x88>)
    4e6e:	491b      	ldr	r1, [pc, #108]	; (4edc <z_unpend_first_thread+0x8c>)
    4e70:	481b      	ldr	r0, [pc, #108]	; (4ee0 <z_unpend_first_thread+0x90>)
    4e72:	2381      	movs	r3, #129	; 0x81
    4e74:	f001 facf 	bl	6416 <printk>
    4e78:	4916      	ldr	r1, [pc, #88]	; (4ed4 <z_unpend_first_thread+0x84>)
    4e7a:	481a      	ldr	r0, [pc, #104]	; (4ee4 <z_unpend_first_thread+0x94>)
    4e7c:	f001 facb 	bl	6416 <printk>
    4e80:	4815      	ldr	r0, [pc, #84]	; (4ed8 <z_unpend_first_thread+0x88>)
    4e82:	2181      	movs	r1, #129	; 0x81
    4e84:	f001 f9ee 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    4e88:	4812      	ldr	r0, [pc, #72]	; (4ed4 <z_unpend_first_thread+0x84>)
    4e8a:	f000 fca9 	bl	57e0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4e8e:	4620      	mov	r0, r4
    4e90:	f001 fd2c 	bl	68ec <z_priq_dumb_best>
		if (thread != NULL) {
    4e94:	4604      	mov	r4, r0
    4e96:	b128      	cbz	r0, 4ea4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    4e98:	f7ff fafc 	bl	4494 <unpend_thread_no_timeout>
    4e9c:	f104 0018 	add.w	r0, r4, #24
    4ea0:	f000 fdca 	bl	5a38 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ea4:	480b      	ldr	r0, [pc, #44]	; (4ed4 <z_unpend_first_thread+0x84>)
    4ea6:	f000 fc8b 	bl	57c0 <z_spin_unlock_valid>
    4eaa:	b968      	cbnz	r0, 4ec8 <z_unpend_first_thread+0x78>
    4eac:	4a0a      	ldr	r2, [pc, #40]	; (4ed8 <z_unpend_first_thread+0x88>)
    4eae:	490e      	ldr	r1, [pc, #56]	; (4ee8 <z_unpend_first_thread+0x98>)
    4eb0:	480b      	ldr	r0, [pc, #44]	; (4ee0 <z_unpend_first_thread+0x90>)
    4eb2:	23ac      	movs	r3, #172	; 0xac
    4eb4:	f001 faaf 	bl	6416 <printk>
    4eb8:	4906      	ldr	r1, [pc, #24]	; (4ed4 <z_unpend_first_thread+0x84>)
    4eba:	480c      	ldr	r0, [pc, #48]	; (4eec <z_unpend_first_thread+0x9c>)
    4ebc:	f001 faab 	bl	6416 <printk>
    4ec0:	4805      	ldr	r0, [pc, #20]	; (4ed8 <z_unpend_first_thread+0x88>)
    4ec2:	21ac      	movs	r1, #172	; 0xac
    4ec4:	f001 f9ce 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4ec8:	f385 8811 	msr	BASEPRI, r5
    4ecc:	f3bf 8f6f 	isb	sy
}
    4ed0:	4620      	mov	r0, r4
    4ed2:	bd38      	pop	{r3, r4, r5, pc}
    4ed4:	20000b40 	.word	0x20000b40
    4ed8:	000070a9 	.word	0x000070a9
    4edc:	000070fb 	.word	0x000070fb
    4ee0:	00006f96 	.word	0x00006f96
    4ee4:	00007110 	.word	0x00007110
    4ee8:	000070cf 	.word	0x000070cf
    4eec:	000070e6 	.word	0x000070e6

00004ef0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4ef0:	4b04      	ldr	r3, [pc, #16]	; (4f04 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4ef2:	2100      	movs	r1, #0
    4ef4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4ef8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4efc:	4608      	mov	r0, r1
    4efe:	f7ff b989 	b.w	4214 <k_sched_time_slice_set>
    4f02:	bf00      	nop
    4f04:	20000b10 	.word	0x20000b10

00004f08 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f0a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4f0e:	b173      	cbz	r3, 4f2e <z_impl_k_yield+0x26>
    4f10:	4941      	ldr	r1, [pc, #260]	; (5018 <z_impl_k_yield+0x110>)
    4f12:	4a42      	ldr	r2, [pc, #264]	; (501c <z_impl_k_yield+0x114>)
    4f14:	4842      	ldr	r0, [pc, #264]	; (5020 <z_impl_k_yield+0x118>)
    4f16:	f240 43a1 	movw	r3, #1185	; 0x4a1
    4f1a:	f001 fa7c 	bl	6416 <printk>
    4f1e:	4841      	ldr	r0, [pc, #260]	; (5024 <z_impl_k_yield+0x11c>)
    4f20:	f001 fa79 	bl	6416 <printk>
    4f24:	483d      	ldr	r0, [pc, #244]	; (501c <z_impl_k_yield+0x114>)
    4f26:	f240 41a1 	movw	r1, #1185	; 0x4a1
    4f2a:	f001 f99b 	bl	6264 <assert_post_action>
	__asm__ volatile(
    4f2e:	f04f 0320 	mov.w	r3, #32
    4f32:	f3ef 8611 	mrs	r6, BASEPRI
    4f36:	f383 8812 	msr	BASEPRI_MAX, r3
    4f3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f3e:	483a      	ldr	r0, [pc, #232]	; (5028 <z_impl_k_yield+0x120>)
    4f40:	f000 fc30 	bl	57a4 <z_spin_lock_valid>
    4f44:	b968      	cbnz	r0, 4f62 <z_impl_k_yield+0x5a>
    4f46:	4a39      	ldr	r2, [pc, #228]	; (502c <z_impl_k_yield+0x124>)
    4f48:	4939      	ldr	r1, [pc, #228]	; (5030 <z_impl_k_yield+0x128>)
    4f4a:	4835      	ldr	r0, [pc, #212]	; (5020 <z_impl_k_yield+0x118>)
    4f4c:	2381      	movs	r3, #129	; 0x81
    4f4e:	f001 fa62 	bl	6416 <printk>
    4f52:	4935      	ldr	r1, [pc, #212]	; (5028 <z_impl_k_yield+0x120>)
    4f54:	4837      	ldr	r0, [pc, #220]	; (5034 <z_impl_k_yield+0x12c>)
    4f56:	f001 fa5e 	bl	6416 <printk>
    4f5a:	4834      	ldr	r0, [pc, #208]	; (502c <z_impl_k_yield+0x124>)
    4f5c:	2181      	movs	r1, #129	; 0x81
    4f5e:	f001 f981 	bl	6264 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    4f62:	4d35      	ldr	r5, [pc, #212]	; (5038 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    4f64:	4830      	ldr	r0, [pc, #192]	; (5028 <z_impl_k_yield+0x120>)
    4f66:	f000 fc3b 	bl	57e0 <z_spin_lock_set_owner>
    4f6a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4f6c:	7b4b      	ldrb	r3, [r1, #13]
    4f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f72:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    4f74:	f105 0020 	add.w	r0, r5, #32
    4f78:	f7ff fa6a 	bl	4450 <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    4f7c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4f7e:	7b63      	ldrb	r3, [r4, #13]
    4f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4f84:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4f86:	4b2d      	ldr	r3, [pc, #180]	; (503c <z_impl_k_yield+0x134>)
    4f88:	429c      	cmp	r4, r3
    4f8a:	d109      	bne.n	4fa0 <z_impl_k_yield+0x98>
    4f8c:	492c      	ldr	r1, [pc, #176]	; (5040 <z_impl_k_yield+0x138>)
    4f8e:	4824      	ldr	r0, [pc, #144]	; (5020 <z_impl_k_yield+0x118>)
    4f90:	4a22      	ldr	r2, [pc, #136]	; (501c <z_impl_k_yield+0x114>)
    4f92:	23b1      	movs	r3, #177	; 0xb1
    4f94:	f001 fa3f 	bl	6416 <printk>
    4f98:	4820      	ldr	r0, [pc, #128]	; (501c <z_impl_k_yield+0x114>)
    4f9a:	21b1      	movs	r1, #177	; 0xb1
    4f9c:	f001 f962 	bl	6264 <assert_post_action>
	return list->head == list;
    4fa0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fa2:	4828      	ldr	r0, [pc, #160]	; (5044 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4fa4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fa6:	4283      	cmp	r3, r0
    4fa8:	bf08      	it	eq
    4faa:	2300      	moveq	r3, #0
    4fac:	2b00      	cmp	r3, #0
    4fae:	bf38      	it	cc
    4fb0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4fb2:	b35b      	cbz	r3, 500c <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    4fb4:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4fb8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4fbc:	4297      	cmp	r7, r2
    4fbe:	d021      	beq.n	5004 <z_impl_k_yield+0xfc>
		return b2 - b1;
    4fc0:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4fc2:	2a00      	cmp	r2, #0
    4fc4:	dd1e      	ble.n	5004 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    4fc6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4fc8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4fcc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4fce:	605c      	str	r4, [r3, #4]
	update_cache(1);
    4fd0:	2001      	movs	r0, #1
    4fd2:	f7ff fa81 	bl	44d8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fd6:	4814      	ldr	r0, [pc, #80]	; (5028 <z_impl_k_yield+0x120>)
    4fd8:	f000 fbf2 	bl	57c0 <z_spin_unlock_valid>
    4fdc:	b968      	cbnz	r0, 4ffa <z_impl_k_yield+0xf2>
    4fde:	4a13      	ldr	r2, [pc, #76]	; (502c <z_impl_k_yield+0x124>)
    4fe0:	4919      	ldr	r1, [pc, #100]	; (5048 <z_impl_k_yield+0x140>)
    4fe2:	480f      	ldr	r0, [pc, #60]	; (5020 <z_impl_k_yield+0x118>)
    4fe4:	23c3      	movs	r3, #195	; 0xc3
    4fe6:	f001 fa16 	bl	6416 <printk>
    4fea:	490f      	ldr	r1, [pc, #60]	; (5028 <z_impl_k_yield+0x120>)
    4fec:	4817      	ldr	r0, [pc, #92]	; (504c <z_impl_k_yield+0x144>)
    4fee:	f001 fa12 	bl	6416 <printk>
    4ff2:	480e      	ldr	r0, [pc, #56]	; (502c <z_impl_k_yield+0x124>)
    4ff4:	21c3      	movs	r1, #195	; 0xc3
    4ff6:	f001 f935 	bl	6264 <assert_post_action>
    4ffa:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5000:	f7fc bc72 	b.w	18e8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5004:	428b      	cmp	r3, r1
    5006:	d001      	beq.n	500c <z_impl_k_yield+0x104>
    5008:	681b      	ldr	r3, [r3, #0]
    500a:	e7d2      	b.n	4fb2 <z_impl_k_yield+0xaa>
	node->prev = tail;
    500c:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    5010:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5012:	626c      	str	r4, [r5, #36]	; 0x24
}
    5014:	e7dc      	b.n	4fd0 <z_impl_k_yield+0xc8>
    5016:	bf00      	nop
    5018:	000078e7 	.word	0x000078e7
    501c:	00007994 	.word	0x00007994
    5020:	00006f96 	.word	0x00006f96
    5024:	00007960 	.word	0x00007960
    5028:	20000b40 	.word	0x20000b40
    502c:	000070a9 	.word	0x000070a9
    5030:	000070fb 	.word	0x000070fb
    5034:	00007110 	.word	0x00007110
    5038:	20000b10 	.word	0x20000b10
    503c:	200002d0 	.word	0x200002d0
    5040:	000079b6 	.word	0x000079b6
    5044:	20000b30 	.word	0x20000b30
    5048:	000070cf 	.word	0x000070cf
    504c:	000070e6 	.word	0x000070e6

00005050 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    5050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5054:	4604      	mov	r4, r0
    5056:	460d      	mov	r5, r1
    5058:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    505c:	b173      	cbz	r3, 507c <z_tick_sleep+0x2c>
    505e:	4945      	ldr	r1, [pc, #276]	; (5174 <z_tick_sleep+0x124>)
    5060:	4a45      	ldr	r2, [pc, #276]	; (5178 <z_tick_sleep+0x128>)
    5062:	4846      	ldr	r0, [pc, #280]	; (517c <z_tick_sleep+0x12c>)
    5064:	f240 43be 	movw	r3, #1214	; 0x4be
    5068:	f001 f9d5 	bl	6416 <printk>
    506c:	4844      	ldr	r0, [pc, #272]	; (5180 <z_tick_sleep+0x130>)
    506e:	f001 f9d2 	bl	6416 <printk>
    5072:	4841      	ldr	r0, [pc, #260]	; (5178 <z_tick_sleep+0x128>)
    5074:	f240 41be 	movw	r1, #1214	; 0x4be
    5078:	f001 f8f4 	bl	6264 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    507c:	ea54 0305 	orrs.w	r3, r4, r5
    5080:	d104      	bne.n	508c <z_tick_sleep+0x3c>
	z_impl_k_yield();
    5082:	f7ff ff41 	bl	4f08 <z_impl_k_yield>
		k_yield();
		return 0;
    5086:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    5088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    508c:	f06f 0301 	mvn.w	r3, #1
    5090:	1b1e      	subs	r6, r3, r4
    5092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5096:	eb63 0705 	sbc.w	r7, r3, r5
    509a:	2e01      	cmp	r6, #1
    509c:	f177 0300 	sbcs.w	r3, r7, #0
    50a0:	da64      	bge.n	516c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    50a2:	f001 fc3f 	bl	6924 <sys_clock_tick_get_32>
    50a6:	1906      	adds	r6, r0, r4
    50a8:	f04f 0320 	mov.w	r3, #32
    50ac:	f3ef 8811 	mrs	r8, BASEPRI
    50b0:	f383 8812 	msr	BASEPRI_MAX, r3
    50b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50b8:	4832      	ldr	r0, [pc, #200]	; (5184 <z_tick_sleep+0x134>)
    50ba:	f000 fb73 	bl	57a4 <z_spin_lock_valid>
    50be:	b968      	cbnz	r0, 50dc <z_tick_sleep+0x8c>
    50c0:	4a31      	ldr	r2, [pc, #196]	; (5188 <z_tick_sleep+0x138>)
    50c2:	4932      	ldr	r1, [pc, #200]	; (518c <z_tick_sleep+0x13c>)
    50c4:	482d      	ldr	r0, [pc, #180]	; (517c <z_tick_sleep+0x12c>)
    50c6:	2381      	movs	r3, #129	; 0x81
    50c8:	f001 f9a5 	bl	6416 <printk>
    50cc:	492d      	ldr	r1, [pc, #180]	; (5184 <z_tick_sleep+0x134>)
    50ce:	4830      	ldr	r0, [pc, #192]	; (5190 <z_tick_sleep+0x140>)
    50d0:	f001 f9a1 	bl	6416 <printk>
    50d4:	482c      	ldr	r0, [pc, #176]	; (5188 <z_tick_sleep+0x138>)
    50d6:	2181      	movs	r1, #129	; 0x81
    50d8:	f001 f8c4 	bl	6264 <assert_post_action>
	pending_current = _current;
    50dc:	4f2d      	ldr	r7, [pc, #180]	; (5194 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    50de:	4829      	ldr	r0, [pc, #164]	; (5184 <z_tick_sleep+0x134>)
    50e0:	f000 fb7e 	bl	57e0 <z_spin_lock_set_owner>
    50e4:	4b2c      	ldr	r3, [pc, #176]	; (5198 <z_tick_sleep+0x148>)
    50e6:	68b8      	ldr	r0, [r7, #8]
    50e8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    50ea:	f7ff fc43 	bl	4974 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    50ee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    50f0:	492a      	ldr	r1, [pc, #168]	; (519c <z_tick_sleep+0x14c>)
    50f2:	4622      	mov	r2, r4
    50f4:	462b      	mov	r3, r5
    50f6:	3018      	adds	r0, #24
    50f8:	f000 fbca 	bl	5890 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    50fc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    50fe:	4821      	ldr	r0, [pc, #132]	; (5184 <z_tick_sleep+0x134>)
    5100:	7b53      	ldrb	r3, [r2, #13]
    5102:	f043 0310 	orr.w	r3, r3, #16
    5106:	7353      	strb	r3, [r2, #13]
    5108:	f000 fb5a 	bl	57c0 <z_spin_unlock_valid>
    510c:	b968      	cbnz	r0, 512a <z_tick_sleep+0xda>
    510e:	4a1e      	ldr	r2, [pc, #120]	; (5188 <z_tick_sleep+0x138>)
    5110:	4923      	ldr	r1, [pc, #140]	; (51a0 <z_tick_sleep+0x150>)
    5112:	481a      	ldr	r0, [pc, #104]	; (517c <z_tick_sleep+0x12c>)
    5114:	23c3      	movs	r3, #195	; 0xc3
    5116:	f001 f97e 	bl	6416 <printk>
    511a:	491a      	ldr	r1, [pc, #104]	; (5184 <z_tick_sleep+0x134>)
    511c:	4821      	ldr	r0, [pc, #132]	; (51a4 <z_tick_sleep+0x154>)
    511e:	f001 f97a 	bl	6416 <printk>
    5122:	4819      	ldr	r0, [pc, #100]	; (5188 <z_tick_sleep+0x138>)
    5124:	21c3      	movs	r1, #195	; 0xc3
    5126:	f001 f89d 	bl	6264 <assert_post_action>
    512a:	4640      	mov	r0, r8
    512c:	f7fc fbdc 	bl	18e8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    5130:	68bb      	ldr	r3, [r7, #8]
    5132:	7b5b      	ldrb	r3, [r3, #13]
    5134:	06db      	lsls	r3, r3, #27
    5136:	d50e      	bpl.n	5156 <z_tick_sleep+0x106>
    5138:	491b      	ldr	r1, [pc, #108]	; (51a8 <z_tick_sleep+0x158>)
    513a:	4a0f      	ldr	r2, [pc, #60]	; (5178 <z_tick_sleep+0x128>)
    513c:	480f      	ldr	r0, [pc, #60]	; (517c <z_tick_sleep+0x12c>)
    513e:	f240 43df 	movw	r3, #1247	; 0x4df
    5142:	f001 f968 	bl	6416 <printk>
    5146:	480e      	ldr	r0, [pc, #56]	; (5180 <z_tick_sleep+0x130>)
    5148:	f001 f965 	bl	6416 <printk>
    514c:	480a      	ldr	r0, [pc, #40]	; (5178 <z_tick_sleep+0x128>)
    514e:	f240 41df 	movw	r1, #1247	; 0x4df
    5152:	f001 f887 	bl	6264 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5156:	f001 fbe5 	bl	6924 <sys_clock_tick_get_32>
    515a:	1a30      	subs	r0, r6, r0
    515c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    5160:	2801      	cmp	r0, #1
    5162:	f171 0300 	sbcs.w	r3, r1, #0
    5166:	bfb8      	it	lt
    5168:	2000      	movlt	r0, #0
    516a:	e78d      	b.n	5088 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    516c:	f06f 0601 	mvn.w	r6, #1
    5170:	1b36      	subs	r6, r6, r4
    5172:	e799      	b.n	50a8 <z_tick_sleep+0x58>
    5174:	000078e7 	.word	0x000078e7
    5178:	00007994 	.word	0x00007994
    517c:	00006f96 	.word	0x00006f96
    5180:	00007960 	.word	0x00007960
    5184:	20000b40 	.word	0x20000b40
    5188:	000070a9 	.word	0x000070a9
    518c:	000070fb 	.word	0x000070fb
    5190:	00007110 	.word	0x00007110
    5194:	20000b10 	.word	0x20000b10
    5198:	20000b3c 	.word	0x20000b3c
    519c:	000048c1 	.word	0x000048c1
    51a0:	000070cf 	.word	0x000070cf
    51a4:	000070e6 	.word	0x000070e6
    51a8:	00007a46 	.word	0x00007a46

000051ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    51ac:	b538      	push	{r3, r4, r5, lr}
    51ae:	4604      	mov	r4, r0
    51b0:	460d      	mov	r5, r1
    51b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    51b6:	b173      	cbz	r3, 51d6 <z_impl_k_sleep+0x2a>
    51b8:	4913      	ldr	r1, [pc, #76]	; (5208 <z_impl_k_sleep+0x5c>)
    51ba:	4a14      	ldr	r2, [pc, #80]	; (520c <z_impl_k_sleep+0x60>)
    51bc:	4814      	ldr	r0, [pc, #80]	; (5210 <z_impl_k_sleep+0x64>)
    51be:	f240 43ee 	movw	r3, #1262	; 0x4ee
    51c2:	f001 f928 	bl	6416 <printk>
    51c6:	4813      	ldr	r0, [pc, #76]	; (5214 <z_impl_k_sleep+0x68>)
    51c8:	f001 f925 	bl	6416 <printk>
    51cc:	480f      	ldr	r0, [pc, #60]	; (520c <z_impl_k_sleep+0x60>)
    51ce:	f240 41ee 	movw	r1, #1262	; 0x4ee
    51d2:	f001 f847 	bl	6264 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    51d6:	1c6b      	adds	r3, r5, #1
    51d8:	bf08      	it	eq
    51da:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    51de:	d106      	bne.n	51ee <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    51e0:	4b0d      	ldr	r3, [pc, #52]	; (5218 <z_impl_k_sleep+0x6c>)
    51e2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    51e4:	f7ff fd4e 	bl	4c84 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    51e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    51ec:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    51ee:	4620      	mov	r0, r4
    51f0:	4629      	mov	r1, r5
    51f2:	f7ff ff2d 	bl	5050 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    51f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    51fa:	fb80 3403 	smull	r3, r4, r0, r3
    51fe:	0bd8      	lsrs	r0, r3, #15
    5200:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    5204:	e7f2      	b.n	51ec <z_impl_k_sleep+0x40>
    5206:	bf00      	nop
    5208:	000078e7 	.word	0x000078e7
    520c:	00007994 	.word	0x00007994
    5210:	00006f96 	.word	0x00006f96
    5214:	00007960 	.word	0x00007960
    5218:	20000b10 	.word	0x20000b10

0000521c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    521c:	4b01      	ldr	r3, [pc, #4]	; (5224 <z_impl_z_current_get+0x8>)
    521e:	6898      	ldr	r0, [r3, #8]
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	20000b10 	.word	0x20000b10

00005228 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    522c:	4604      	mov	r4, r0
    522e:	f04f 0320 	mov.w	r3, #32
    5232:	f3ef 8611 	mrs	r6, BASEPRI
    5236:	f383 8812 	msr	BASEPRI_MAX, r3
    523a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    523e:	4848      	ldr	r0, [pc, #288]	; (5360 <z_thread_abort+0x138>)
    5240:	f000 fab0 	bl	57a4 <z_spin_lock_valid>
    5244:	b968      	cbnz	r0, 5262 <z_thread_abort+0x3a>
    5246:	4a47      	ldr	r2, [pc, #284]	; (5364 <z_thread_abort+0x13c>)
    5248:	4947      	ldr	r1, [pc, #284]	; (5368 <z_thread_abort+0x140>)
    524a:	4848      	ldr	r0, [pc, #288]	; (536c <z_thread_abort+0x144>)
    524c:	2381      	movs	r3, #129	; 0x81
    524e:	f001 f8e2 	bl	6416 <printk>
    5252:	4943      	ldr	r1, [pc, #268]	; (5360 <z_thread_abort+0x138>)
    5254:	4846      	ldr	r0, [pc, #280]	; (5370 <z_thread_abort+0x148>)
    5256:	f001 f8de 	bl	6416 <printk>
    525a:	4842      	ldr	r0, [pc, #264]	; (5364 <z_thread_abort+0x13c>)
    525c:	2181      	movs	r1, #129	; 0x81
    525e:	f001 f801 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5262:	483f      	ldr	r0, [pc, #252]	; (5360 <z_thread_abort+0x138>)
    5264:	f000 fabc 	bl	57e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5268:	7b63      	ldrb	r3, [r4, #13]
    526a:	071a      	lsls	r2, r3, #28
    526c:	d517      	bpl.n	529e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    526e:	483c      	ldr	r0, [pc, #240]	; (5360 <z_thread_abort+0x138>)
    5270:	f000 faa6 	bl	57c0 <z_spin_unlock_valid>
    5274:	b968      	cbnz	r0, 5292 <z_thread_abort+0x6a>
    5276:	4a3b      	ldr	r2, [pc, #236]	; (5364 <z_thread_abort+0x13c>)
    5278:	493e      	ldr	r1, [pc, #248]	; (5374 <z_thread_abort+0x14c>)
    527a:	483c      	ldr	r0, [pc, #240]	; (536c <z_thread_abort+0x144>)
    527c:	23ac      	movs	r3, #172	; 0xac
    527e:	f001 f8ca 	bl	6416 <printk>
    5282:	4937      	ldr	r1, [pc, #220]	; (5360 <z_thread_abort+0x138>)
    5284:	483c      	ldr	r0, [pc, #240]	; (5378 <z_thread_abort+0x150>)
    5286:	f001 f8c6 	bl	6416 <printk>
    528a:	4836      	ldr	r0, [pc, #216]	; (5364 <z_thread_abort+0x13c>)
    528c:	21ac      	movs	r1, #172	; 0xac
    528e:	f000 ffe9 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5292:	f386 8811 	msr	BASEPRI, r6
    5296:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    529a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    529e:	f023 0220 	bic.w	r2, r3, #32
    52a2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    52a6:	09d2      	lsrs	r2, r2, #7
    52a8:	d142      	bne.n	5330 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    52aa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    52ac:	68a3      	ldr	r3, [r4, #8]
    52ae:	b113      	cbz	r3, 52b6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    52b0:	4620      	mov	r0, r4
    52b2:	f7ff f8ef 	bl	4494 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    52b6:	f104 0018 	add.w	r0, r4, #24
    52ba:	f000 fbbd 	bl	5a38 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    52be:	f104 0758 	add.w	r7, r4, #88	; 0x58
    52c2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    52c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52c8:	42bd      	cmp	r5, r7
    52ca:	d001      	beq.n	52d0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    52cc:	2d00      	cmp	r5, #0
    52ce:	d139      	bne.n	5344 <z_thread_abort+0x11c>
		update_cache(1);
    52d0:	2001      	movs	r0, #1
    52d2:	f7ff f901 	bl	44d8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    52d6:	4b29      	ldr	r3, [pc, #164]	; (537c <z_thread_abort+0x154>)
    52d8:	689b      	ldr	r3, [r3, #8]
    52da:	42a3      	cmp	r3, r4
    52dc:	d1c7      	bne.n	526e <z_thread_abort+0x46>
    52de:	f3ef 8305 	mrs	r3, IPSR
    52e2:	2b00      	cmp	r3, #0
    52e4:	d1c3      	bne.n	526e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52e6:	481e      	ldr	r0, [pc, #120]	; (5360 <z_thread_abort+0x138>)
    52e8:	f000 fa6a 	bl	57c0 <z_spin_unlock_valid>
    52ec:	b968      	cbnz	r0, 530a <z_thread_abort+0xe2>
    52ee:	4a1d      	ldr	r2, [pc, #116]	; (5364 <z_thread_abort+0x13c>)
    52f0:	4920      	ldr	r1, [pc, #128]	; (5374 <z_thread_abort+0x14c>)
    52f2:	481e      	ldr	r0, [pc, #120]	; (536c <z_thread_abort+0x144>)
    52f4:	23c3      	movs	r3, #195	; 0xc3
    52f6:	f001 f88e 	bl	6416 <printk>
    52fa:	4919      	ldr	r1, [pc, #100]	; (5360 <z_thread_abort+0x138>)
    52fc:	481e      	ldr	r0, [pc, #120]	; (5378 <z_thread_abort+0x150>)
    52fe:	f001 f88a 	bl	6416 <printk>
    5302:	4818      	ldr	r0, [pc, #96]	; (5364 <z_thread_abort+0x13c>)
    5304:	21c3      	movs	r1, #195	; 0xc3
    5306:	f000 ffad 	bl	6264 <assert_post_action>
    530a:	4630      	mov	r0, r6
    530c:	f7fc faec 	bl	18e8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    5310:	4a1b      	ldr	r2, [pc, #108]	; (5380 <z_thread_abort+0x158>)
    5312:	491c      	ldr	r1, [pc, #112]	; (5384 <z_thread_abort+0x15c>)
    5314:	4815      	ldr	r0, [pc, #84]	; (536c <z_thread_abort+0x144>)
    5316:	f240 6309 	movw	r3, #1545	; 0x609
    531a:	f001 f87c 	bl	6416 <printk>
    531e:	481a      	ldr	r0, [pc, #104]	; (5388 <z_thread_abort+0x160>)
    5320:	f001 f879 	bl	6416 <printk>
    5324:	4816      	ldr	r0, [pc, #88]	; (5380 <z_thread_abort+0x158>)
    5326:	f240 6109 	movw	r1, #1545	; 0x609
    532a:	f000 ff9b 	bl	6264 <assert_post_action>
    532e:	e79e      	b.n	526e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5330:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5334:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    5338:	4814      	ldr	r0, [pc, #80]	; (538c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    533a:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    533c:	4621      	mov	r1, r4
    533e:	f7ff f887 	bl	4450 <z_priq_dumb_remove>
}
    5342:	e7b3      	b.n	52ac <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    5344:	4628      	mov	r0, r5
    5346:	f7ff f8a5 	bl	4494 <unpend_thread_no_timeout>
    534a:	f105 0018 	add.w	r0, r5, #24
    534e:	f000 fb73 	bl	5a38 <z_abort_timeout>
    5352:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5356:	4628      	mov	r0, r5
    5358:	f7ff f9c4 	bl	46e4 <ready_thread>
    535c:	e7b3      	b.n	52c6 <z_thread_abort+0x9e>
    535e:	bf00      	nop
    5360:	20000b40 	.word	0x20000b40
    5364:	000070a9 	.word	0x000070a9
    5368:	000070fb 	.word	0x000070fb
    536c:	00006f96 	.word	0x00006f96
    5370:	00007110 	.word	0x00007110
    5374:	000070cf 	.word	0x000070cf
    5378:	000070e6 	.word	0x000070e6
    537c:	20000b10 	.word	0x20000b10
    5380:	00007994 	.word	0x00007994
    5384:	00007091 	.word	0x00007091
    5388:	00007a86 	.word	0x00007a86
    538c:	20000b30 	.word	0x20000b30

00005390 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5390:	b538      	push	{r3, r4, r5, lr}
    5392:	4604      	mov	r4, r0
	__asm__ volatile(
    5394:	f04f 0320 	mov.w	r3, #32
    5398:	f3ef 8511 	mrs	r5, BASEPRI
    539c:	f383 8812 	msr	BASEPRI_MAX, r3
    53a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53a4:	4814      	ldr	r0, [pc, #80]	; (53f8 <z_impl_k_sem_give+0x68>)
    53a6:	f000 f9fd 	bl	57a4 <z_spin_lock_valid>
    53aa:	b968      	cbnz	r0, 53c8 <z_impl_k_sem_give+0x38>
    53ac:	4a13      	ldr	r2, [pc, #76]	; (53fc <z_impl_k_sem_give+0x6c>)
    53ae:	4914      	ldr	r1, [pc, #80]	; (5400 <z_impl_k_sem_give+0x70>)
    53b0:	4814      	ldr	r0, [pc, #80]	; (5404 <z_impl_k_sem_give+0x74>)
    53b2:	2381      	movs	r3, #129	; 0x81
    53b4:	f001 f82f 	bl	6416 <printk>
    53b8:	490f      	ldr	r1, [pc, #60]	; (53f8 <z_impl_k_sem_give+0x68>)
    53ba:	4813      	ldr	r0, [pc, #76]	; (5408 <z_impl_k_sem_give+0x78>)
    53bc:	f001 f82b 	bl	6416 <printk>
    53c0:	480e      	ldr	r0, [pc, #56]	; (53fc <z_impl_k_sem_give+0x6c>)
    53c2:	2181      	movs	r1, #129	; 0x81
    53c4:	f000 ff4e 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    53c8:	480b      	ldr	r0, [pc, #44]	; (53f8 <z_impl_k_sem_give+0x68>)
    53ca:	f000 fa09 	bl	57e0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    53ce:	4620      	mov	r0, r4
    53d0:	f7ff fd3e 	bl	4e50 <z_unpend_first_thread>

	if (thread != NULL) {
    53d4:	b148      	cbz	r0, 53ea <z_impl_k_sem_give+0x5a>
    53d6:	2200      	movs	r2, #0
    53d8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    53da:	f7ff f9d5 	bl	4788 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    53de:	4629      	mov	r1, r5
    53e0:	4805      	ldr	r0, [pc, #20]	; (53f8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    53e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    53e6:	f7fe bf7b 	b.w	42e0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    53ea:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    53ee:	429a      	cmp	r2, r3
    53f0:	bf18      	it	ne
    53f2:	3301      	addne	r3, #1
    53f4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    53f6:	e7f2      	b.n	53de <z_impl_k_sem_give+0x4e>
    53f8:	20000b4c 	.word	0x20000b4c
    53fc:	000070a9 	.word	0x000070a9
    5400:	000070fb 	.word	0x000070fb
    5404:	00006f96 	.word	0x00006f96
    5408:	00007110 	.word	0x00007110

0000540c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    540e:	4604      	mov	r4, r0
    5410:	4616      	mov	r6, r2
    5412:	461f      	mov	r7, r3
    5414:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5418:	b17b      	cbz	r3, 543a <z_impl_k_sem_take+0x2e>
    541a:	ea56 0307 	orrs.w	r3, r6, r7
    541e:	d00c      	beq.n	543a <z_impl_k_sem_take+0x2e>
    5420:	4935      	ldr	r1, [pc, #212]	; (54f8 <z_impl_k_sem_take+0xec>)
    5422:	4a36      	ldr	r2, [pc, #216]	; (54fc <z_impl_k_sem_take+0xf0>)
    5424:	4836      	ldr	r0, [pc, #216]	; (5500 <z_impl_k_sem_take+0xf4>)
    5426:	2379      	movs	r3, #121	; 0x79
    5428:	f000 fff5 	bl	6416 <printk>
    542c:	4835      	ldr	r0, [pc, #212]	; (5504 <z_impl_k_sem_take+0xf8>)
    542e:	f000 fff2 	bl	6416 <printk>
    5432:	4832      	ldr	r0, [pc, #200]	; (54fc <z_impl_k_sem_take+0xf0>)
    5434:	2179      	movs	r1, #121	; 0x79
    5436:	f000 ff15 	bl	6264 <assert_post_action>
    543a:	f04f 0320 	mov.w	r3, #32
    543e:	f3ef 8511 	mrs	r5, BASEPRI
    5442:	f383 8812 	msr	BASEPRI_MAX, r3
    5446:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    544a:	482f      	ldr	r0, [pc, #188]	; (5508 <z_impl_k_sem_take+0xfc>)
    544c:	f000 f9aa 	bl	57a4 <z_spin_lock_valid>
    5450:	b968      	cbnz	r0, 546e <z_impl_k_sem_take+0x62>
    5452:	4a2e      	ldr	r2, [pc, #184]	; (550c <z_impl_k_sem_take+0x100>)
    5454:	492e      	ldr	r1, [pc, #184]	; (5510 <z_impl_k_sem_take+0x104>)
    5456:	482a      	ldr	r0, [pc, #168]	; (5500 <z_impl_k_sem_take+0xf4>)
    5458:	2381      	movs	r3, #129	; 0x81
    545a:	f000 ffdc 	bl	6416 <printk>
    545e:	492a      	ldr	r1, [pc, #168]	; (5508 <z_impl_k_sem_take+0xfc>)
    5460:	482c      	ldr	r0, [pc, #176]	; (5514 <z_impl_k_sem_take+0x108>)
    5462:	f000 ffd8 	bl	6416 <printk>
    5466:	4829      	ldr	r0, [pc, #164]	; (550c <z_impl_k_sem_take+0x100>)
    5468:	2181      	movs	r1, #129	; 0x81
    546a:	f000 fefb 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    546e:	4826      	ldr	r0, [pc, #152]	; (5508 <z_impl_k_sem_take+0xfc>)
    5470:	f000 f9b6 	bl	57e0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5474:	68a3      	ldr	r3, [r4, #8]
    5476:	b1d3      	cbz	r3, 54ae <z_impl_k_sem_take+0xa2>
		sem->count--;
    5478:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    547a:	4823      	ldr	r0, [pc, #140]	; (5508 <z_impl_k_sem_take+0xfc>)
    547c:	60a3      	str	r3, [r4, #8]
    547e:	f000 f99f 	bl	57c0 <z_spin_unlock_valid>
    5482:	b968      	cbnz	r0, 54a0 <z_impl_k_sem_take+0x94>
    5484:	4a21      	ldr	r2, [pc, #132]	; (550c <z_impl_k_sem_take+0x100>)
    5486:	4924      	ldr	r1, [pc, #144]	; (5518 <z_impl_k_sem_take+0x10c>)
    5488:	481d      	ldr	r0, [pc, #116]	; (5500 <z_impl_k_sem_take+0xf4>)
    548a:	23ac      	movs	r3, #172	; 0xac
    548c:	f000 ffc3 	bl	6416 <printk>
    5490:	491d      	ldr	r1, [pc, #116]	; (5508 <z_impl_k_sem_take+0xfc>)
    5492:	4822      	ldr	r0, [pc, #136]	; (551c <z_impl_k_sem_take+0x110>)
    5494:	f000 ffbf 	bl	6416 <printk>
    5498:	481c      	ldr	r0, [pc, #112]	; (550c <z_impl_k_sem_take+0x100>)
    549a:	21ac      	movs	r1, #172	; 0xac
    549c:	f000 fee2 	bl	6264 <assert_post_action>
	__asm__ volatile(
    54a0:	f385 8811 	msr	BASEPRI, r5
    54a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    54a8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    54aa:	b003      	add	sp, #12
    54ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    54ae:	ea56 0307 	orrs.w	r3, r6, r7
    54b2:	d118      	bne.n	54e6 <z_impl_k_sem_take+0xda>
    54b4:	4814      	ldr	r0, [pc, #80]	; (5508 <z_impl_k_sem_take+0xfc>)
    54b6:	f000 f983 	bl	57c0 <z_spin_unlock_valid>
    54ba:	b968      	cbnz	r0, 54d8 <z_impl_k_sem_take+0xcc>
    54bc:	4a13      	ldr	r2, [pc, #76]	; (550c <z_impl_k_sem_take+0x100>)
    54be:	4916      	ldr	r1, [pc, #88]	; (5518 <z_impl_k_sem_take+0x10c>)
    54c0:	480f      	ldr	r0, [pc, #60]	; (5500 <z_impl_k_sem_take+0xf4>)
    54c2:	23ac      	movs	r3, #172	; 0xac
    54c4:	f000 ffa7 	bl	6416 <printk>
    54c8:	490f      	ldr	r1, [pc, #60]	; (5508 <z_impl_k_sem_take+0xfc>)
    54ca:	4814      	ldr	r0, [pc, #80]	; (551c <z_impl_k_sem_take+0x110>)
    54cc:	f000 ffa3 	bl	6416 <printk>
    54d0:	480e      	ldr	r0, [pc, #56]	; (550c <z_impl_k_sem_take+0x100>)
    54d2:	21ac      	movs	r1, #172	; 0xac
    54d4:	f000 fec6 	bl	6264 <assert_post_action>
    54d8:	f385 8811 	msr	BASEPRI, r5
    54dc:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    54e0:	f06f 000f 	mvn.w	r0, #15
    54e4:	e7e1      	b.n	54aa <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    54e6:	e9cd 6700 	strd	r6, r7, [sp]
    54ea:	4622      	mov	r2, r4
    54ec:	4629      	mov	r1, r5
    54ee:	4806      	ldr	r0, [pc, #24]	; (5508 <z_impl_k_sem_take+0xfc>)
    54f0:	f7ff fafc 	bl	4aec <z_pend_curr>
	return ret;
    54f4:	e7d9      	b.n	54aa <z_impl_k_sem_take+0x9e>
    54f6:	bf00      	nop
    54f8:	00007ac8 	.word	0x00007ac8
    54fc:	00007aa8 	.word	0x00007aa8
    5500:	00006f96 	.word	0x00006f96
    5504:	00007960 	.word	0x00007960
    5508:	20000b4c 	.word	0x20000b4c
    550c:	000070a9 	.word	0x000070a9
    5510:	000070fb 	.word	0x000070fb
    5514:	00007110 	.word	0x00007110
    5518:	000070cf 	.word	0x000070cf
    551c:	000070e6 	.word	0x000070e6

00005520 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5524:	b085      	sub	sp, #20
    5526:	4604      	mov	r4, r0
    5528:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    552c:	f1b8 0f0f 	cmp.w	r8, #15
{
    5530:	460f      	mov	r7, r1
    5532:	4615      	mov	r5, r2
    5534:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5536:	d132      	bne.n	559e <z_setup_new_thread+0x7e>
    5538:	4b25      	ldr	r3, [pc, #148]	; (55d0 <z_setup_new_thread+0xb0>)
    553a:	4599      	cmp	r9, r3
    553c:	d133      	bne.n	55a6 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    553e:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    5542:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5546:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5548:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    554a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    554c:	2304      	movs	r3, #4
    554e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5550:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5554:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5558:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    555c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    555e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5562:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5564:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    556a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    556c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    556e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5570:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    5572:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5574:	464b      	mov	r3, r9
	node->prev = NULL;
    5576:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    557a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    557c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    557e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5580:	4642      	mov	r2, r8
    5582:	4639      	mov	r1, r7
    5584:	4620      	mov	r0, r4
    5586:	f7fc f9c9 	bl	191c <arch_new_thread>
	if (!_current) {
    558a:	4b12      	ldr	r3, [pc, #72]	; (55d4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    558c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    558e:	689b      	ldr	r3, [r3, #8]
    5590:	b103      	cbz	r3, 5594 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    5592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5594:	6723      	str	r3, [r4, #112]	; 0x70
}
    5596:	4640      	mov	r0, r8
    5598:	b005      	add	sp, #20
    559a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    559e:	f108 0310 	add.w	r3, r8, #16
    55a2:	2b1e      	cmp	r3, #30
    55a4:	d9cb      	bls.n	553e <z_setup_new_thread+0x1e>
    55a6:	4a0c      	ldr	r2, [pc, #48]	; (55d8 <z_setup_new_thread+0xb8>)
    55a8:	490c      	ldr	r1, [pc, #48]	; (55dc <z_setup_new_thread+0xbc>)
    55aa:	480d      	ldr	r0, [pc, #52]	; (55e0 <z_setup_new_thread+0xc0>)
    55ac:	f240 2305 	movw	r3, #517	; 0x205
    55b0:	f000 ff31 	bl	6416 <printk>
    55b4:	4641      	mov	r1, r8
    55b6:	480b      	ldr	r0, [pc, #44]	; (55e4 <z_setup_new_thread+0xc4>)
    55b8:	f06f 030f 	mvn.w	r3, #15
    55bc:	220e      	movs	r2, #14
    55be:	f000 ff2a 	bl	6416 <printk>
    55c2:	4805      	ldr	r0, [pc, #20]	; (55d8 <z_setup_new_thread+0xb8>)
    55c4:	f240 2105 	movw	r1, #517	; 0x205
    55c8:	f000 fe4c 	bl	6264 <assert_post_action>
    55cc:	e7b7      	b.n	553e <z_setup_new_thread+0x1e>
    55ce:	bf00      	nop
    55d0:	00003a65 	.word	0x00003a65
    55d4:	20000b10 	.word	0x20000b10
    55d8:	00007b15 	.word	0x00007b15
    55dc:	00007b38 	.word	0x00007b38
    55e0:	00006f96 	.word	0x00006f96
    55e4:	00007bb8 	.word	0x00007bb8

000055e8 <z_impl_k_thread_create>:
{
    55e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    55ec:	b087      	sub	sp, #28
    55ee:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    55f2:	4604      	mov	r4, r0
    55f4:	460d      	mov	r5, r1
    55f6:	4690      	mov	r8, r2
    55f8:	4699      	mov	r9, r3
    55fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    55fe:	b173      	cbz	r3, 561e <z_impl_k_thread_create+0x36>
    5600:	491b      	ldr	r1, [pc, #108]	; (5670 <z_impl_k_thread_create+0x88>)
    5602:	4a1c      	ldr	r2, [pc, #112]	; (5674 <z_impl_k_thread_create+0x8c>)
    5604:	481c      	ldr	r0, [pc, #112]	; (5678 <z_impl_k_thread_create+0x90>)
    5606:	f240 236e 	movw	r3, #622	; 0x26e
    560a:	f000 ff04 	bl	6416 <printk>
    560e:	481b      	ldr	r0, [pc, #108]	; (567c <z_impl_k_thread_create+0x94>)
    5610:	f000 ff01 	bl	6416 <printk>
    5614:	4817      	ldr	r0, [pc, #92]	; (5674 <z_impl_k_thread_create+0x8c>)
    5616:	f240 216e 	movw	r1, #622	; 0x26e
    561a:	f000 fe23 	bl	6264 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    561e:	2300      	movs	r3, #0
    5620:	9305      	str	r3, [sp, #20]
    5622:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5624:	9304      	str	r3, [sp, #16]
    5626:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5628:	9303      	str	r3, [sp, #12]
    562a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    562c:	9302      	str	r3, [sp, #8]
    562e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5630:	9301      	str	r3, [sp, #4]
    5632:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5634:	9300      	str	r3, [sp, #0]
    5636:	4642      	mov	r2, r8
    5638:	464b      	mov	r3, r9
    563a:	4629      	mov	r1, r5
    563c:	4620      	mov	r0, r4
    563e:	f7ff ff6f 	bl	5520 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5642:	1c7b      	adds	r3, r7, #1
    5644:	bf08      	it	eq
    5646:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    564a:	d005      	beq.n	5658 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    564c:	ea56 0307 	orrs.w	r3, r6, r7
    5650:	d106      	bne.n	5660 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    5652:	4620      	mov	r0, r4
    5654:	f7ff f8e0 	bl	4818 <z_sched_start>
}
    5658:	4620      	mov	r0, r4
    565a:	b007      	add	sp, #28
    565c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5660:	4907      	ldr	r1, [pc, #28]	; (5680 <z_impl_k_thread_create+0x98>)
    5662:	4632      	mov	r2, r6
    5664:	463b      	mov	r3, r7
    5666:	f104 0018 	add.w	r0, r4, #24
    566a:	f000 f911 	bl	5890 <z_add_timeout>
    566e:	e7f3      	b.n	5658 <z_impl_k_thread_create+0x70>
    5670:	000078e7 	.word	0x000078e7
    5674:	00007b15 	.word	0x00007b15
    5678:	00006f96 	.word	0x00006f96
    567c:	00007be9 	.word	0x00007be9
    5680:	000048c1 	.word	0x000048c1

00005684 <z_init_static_threads>:
{
    5684:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5688:	4f3f      	ldr	r7, [pc, #252]	; (5788 <z_init_static_threads+0x104>)
    568a:	4d40      	ldr	r5, [pc, #256]	; (578c <z_init_static_threads+0x108>)
    568c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 579c <z_init_static_threads+0x118>
{
    5690:	b086      	sub	sp, #24
    5692:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    5694:	42bd      	cmp	r5, r7
    5696:	d90e      	bls.n	56b6 <z_init_static_threads+0x32>
    5698:	493d      	ldr	r1, [pc, #244]	; (5790 <z_init_static_threads+0x10c>)
    569a:	483e      	ldr	r0, [pc, #248]	; (5794 <z_init_static_threads+0x110>)
    569c:	f240 23d5 	movw	r3, #725	; 0x2d5
    56a0:	4642      	mov	r2, r8
    56a2:	f000 feb8 	bl	6416 <printk>
    56a6:	483c      	ldr	r0, [pc, #240]	; (5798 <z_init_static_threads+0x114>)
    56a8:	f000 feb5 	bl	6416 <printk>
    56ac:	f240 21d5 	movw	r1, #725	; 0x2d5
    56b0:	4640      	mov	r0, r8
    56b2:	f000 fdd7 	bl	6264 <assert_post_action>
    56b6:	42b5      	cmp	r5, r6
    56b8:	f105 0430 	add.w	r4, r5, #48	; 0x30
    56bc:	d31f      	bcc.n	56fe <z_init_static_threads+0x7a>
	k_sched_lock();
    56be:	f7fe fe53 	bl	4368 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    56c2:	4c32      	ldr	r4, [pc, #200]	; (578c <z_init_static_threads+0x108>)
    56c4:	4d35      	ldr	r5, [pc, #212]	; (579c <z_init_static_threads+0x118>)
    56c6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 5790 <z_init_static_threads+0x10c>
    56ca:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 5794 <z_init_static_threads+0x110>
    56ce:	42b4      	cmp	r4, r6
    56d0:	d90e      	bls.n	56f0 <z_init_static_threads+0x6c>
    56d2:	4641      	mov	r1, r8
    56d4:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    56d8:	462a      	mov	r2, r5
    56da:	4648      	mov	r0, r9
    56dc:	f000 fe9b 	bl	6416 <printk>
    56e0:	482d      	ldr	r0, [pc, #180]	; (5798 <z_init_static_threads+0x114>)
    56e2:	f000 fe98 	bl	6416 <printk>
    56e6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    56ea:	4628      	mov	r0, r5
    56ec:	f000 fdba 	bl	6264 <assert_post_action>
    56f0:	42b4      	cmp	r4, r6
    56f2:	d321      	bcc.n	5738 <z_init_static_threads+0xb4>
}
    56f4:	b006      	add	sp, #24
    56f6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    56fa:	f7ff bb2d 	b.w	4d58 <k_sched_unlock>
		z_setup_new_thread(
    56fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5702:	9305      	str	r3, [sp, #20]
    5704:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5708:	9304      	str	r3, [sp, #16]
    570a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    570e:	9303      	str	r3, [sp, #12]
    5710:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5714:	9302      	str	r3, [sp, #8]
    5716:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    571a:	9301      	str	r3, [sp, #4]
    571c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5720:	9300      	str	r3, [sp, #0]
    5722:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5726:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    572a:	f7ff fef9 	bl	5520 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    572e:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5732:	655d      	str	r5, [r3, #84]	; 0x54
    5734:	4625      	mov	r5, r4
    5736:	e7ad      	b.n	5694 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5738:	6a61      	ldr	r1, [r4, #36]	; 0x24
    573a:	1c4b      	adds	r3, r1, #1
    573c:	d014      	beq.n	5768 <z_init_static_threads+0xe4>
    573e:	f240 32e7 	movw	r2, #999	; 0x3e7
    5742:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    5744:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    574c:	4693      	mov	fp, r2
    574e:	469c      	mov	ip, r3
    5750:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5754:	459c      	cmp	ip, r3
    5756:	bf08      	it	eq
    5758:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    575a:	6827      	ldr	r7, [r4, #0]
    575c:	4658      	mov	r0, fp
    575e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5760:	d104      	bne.n	576c <z_init_static_threads+0xe8>
	z_sched_start(thread);
    5762:	4638      	mov	r0, r7
    5764:	f7ff f858 	bl	4818 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5768:	3430      	adds	r4, #48	; 0x30
    576a:	e7b0      	b.n	56ce <z_init_static_threads+0x4a>
    576c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5770:	2300      	movs	r3, #0
    5772:	f7fa fcc5 	bl	100 <__aeabi_uldivmod>
    5776:	4602      	mov	r2, r0
    5778:	460b      	mov	r3, r1
    577a:	f107 0018 	add.w	r0, r7, #24
    577e:	4908      	ldr	r1, [pc, #32]	; (57a0 <z_init_static_threads+0x11c>)
    5780:	f000 f886 	bl	5890 <z_add_timeout>
    5784:	e7f0      	b.n	5768 <z_init_static_threads+0xe4>
    5786:	bf00      	nop
    5788:	200000e0 	.word	0x200000e0
    578c:	200000e0 	.word	0x200000e0
    5790:	00007c0e 	.word	0x00007c0e
    5794:	00006f96 	.word	0x00006f96
    5798:	000078a6 	.word	0x000078a6
    579c:	00007b15 	.word	0x00007b15
    57a0:	000048c1 	.word	0x000048c1

000057a4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    57a4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    57a6:	b138      	cbz	r0, 57b8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    57a8:	4b04      	ldr	r3, [pc, #16]	; (57bc <z_spin_lock_valid+0x18>)
    57aa:	7d1b      	ldrb	r3, [r3, #20]
    57ac:	f000 0003 	and.w	r0, r0, #3
    57b0:	1ac0      	subs	r0, r0, r3
    57b2:	bf18      	it	ne
    57b4:	2001      	movne	r0, #1
    57b6:	4770      	bx	lr
			return false;
		}
	}
	return true;
    57b8:	2001      	movs	r0, #1
}
    57ba:	4770      	bx	lr
    57bc:	20000b10 	.word	0x20000b10

000057c0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    57c0:	4906      	ldr	r1, [pc, #24]	; (57dc <z_spin_unlock_valid+0x1c>)
{
    57c2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    57c4:	688a      	ldr	r2, [r1, #8]
    57c6:	7d08      	ldrb	r0, [r1, #20]
    57c8:	6819      	ldr	r1, [r3, #0]
    57ca:	4302      	orrs	r2, r0
    57cc:	4291      	cmp	r1, r2
    57ce:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    57d2:	bf04      	itt	eq
    57d4:	6018      	streq	r0, [r3, #0]
	return true;
    57d6:	2001      	moveq	r0, #1
}
    57d8:	4770      	bx	lr
    57da:	bf00      	nop
    57dc:	20000b10 	.word	0x20000b10

000057e0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    57e0:	4a02      	ldr	r2, [pc, #8]	; (57ec <z_spin_lock_set_owner+0xc>)
    57e2:	7d11      	ldrb	r1, [r2, #20]
    57e4:	6893      	ldr	r3, [r2, #8]
    57e6:	430b      	orrs	r3, r1
    57e8:	6003      	str	r3, [r0, #0]
}
    57ea:	4770      	bx	lr
    57ec:	20000b10 	.word	0x20000b10

000057f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    57f0:	4b03      	ldr	r3, [pc, #12]	; (5800 <elapsed+0x10>)
    57f2:	681b      	ldr	r3, [r3, #0]
    57f4:	b90b      	cbnz	r3, 57fa <elapsed+0xa>
    57f6:	f7fd bd85 	b.w	3304 <sys_clock_elapsed>
}
    57fa:	2000      	movs	r0, #0
    57fc:	4770      	bx	lr
    57fe:	bf00      	nop
    5800:	20000b50 	.word	0x20000b50

00005804 <next_timeout>:

static int32_t next_timeout(void)
{
    5804:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5806:	4b13      	ldr	r3, [pc, #76]	; (5854 <next_timeout+0x50>)
    5808:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    580a:	429c      	cmp	r4, r3
    580c:	bf08      	it	eq
    580e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5810:	f7ff ffee 	bl	57f0 <elapsed>
    5814:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    5816:	b1bc      	cbz	r4, 5848 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5818:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    581c:	1b40      	subs	r0, r0, r5
    581e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5822:	2801      	cmp	r0, #1
    5824:	f171 0300 	sbcs.w	r3, r1, #0
    5828:	db11      	blt.n	584e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    582a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    582e:	2300      	movs	r3, #0
    5830:	4282      	cmp	r2, r0
    5832:	eb73 0401 	sbcs.w	r4, r3, r1
    5836:	da00      	bge.n	583a <next_timeout+0x36>
    5838:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    583a:	4b07      	ldr	r3, [pc, #28]	; (5858 <next_timeout+0x54>)
    583c:	691b      	ldr	r3, [r3, #16]
    583e:	b113      	cbz	r3, 5846 <next_timeout+0x42>
    5840:	4298      	cmp	r0, r3
    5842:	bfa8      	it	ge
    5844:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5846:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5848:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    584c:	e7f5      	b.n	583a <next_timeout+0x36>
    584e:	2000      	movs	r0, #0
    5850:	e7f3      	b.n	583a <next_timeout+0x36>
    5852:	bf00      	nop
    5854:	20000060 	.word	0x20000060
    5858:	20000b10 	.word	0x20000b10

0000585c <remove_timeout>:
{
    585c:	b530      	push	{r4, r5, lr}
    585e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5860:	b168      	cbz	r0, 587e <remove_timeout+0x22>
    5862:	4a0a      	ldr	r2, [pc, #40]	; (588c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    5864:	6852      	ldr	r2, [r2, #4]
    5866:	4290      	cmp	r0, r2
    5868:	d009      	beq.n	587e <remove_timeout+0x22>
	if (next(t) != NULL) {
    586a:	b143      	cbz	r3, 587e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    586c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5870:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5874:	1912      	adds	r2, r2, r4
    5876:	eb45 0101 	adc.w	r1, r5, r1
    587a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    587e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    5880:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5882:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5884:	2300      	movs	r3, #0
	node->prev = NULL;
    5886:	e9c0 3300 	strd	r3, r3, [r0]
}
    588a:	bd30      	pop	{r4, r5, pc}
    588c:	20000060 	.word	0x20000060

00005890 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5894:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5896:	1c6b      	adds	r3, r5, #1
    5898:	bf08      	it	eq
    589a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    589e:	4682      	mov	sl, r0
    58a0:	468b      	mov	fp, r1
    58a2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58a4:	f000 80aa 	beq.w	59fc <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    58a8:	6803      	ldr	r3, [r0, #0]
    58aa:	b163      	cbz	r3, 58c6 <z_add_timeout+0x36>
    58ac:	4955      	ldr	r1, [pc, #340]	; (5a04 <z_add_timeout+0x174>)
    58ae:	4a56      	ldr	r2, [pc, #344]	; (5a08 <z_add_timeout+0x178>)
    58b0:	4856      	ldr	r0, [pc, #344]	; (5a0c <z_add_timeout+0x17c>)
    58b2:	235d      	movs	r3, #93	; 0x5d
    58b4:	f000 fdaf 	bl	6416 <printk>
    58b8:	4855      	ldr	r0, [pc, #340]	; (5a10 <z_add_timeout+0x180>)
    58ba:	f000 fdac 	bl	6416 <printk>
    58be:	4852      	ldr	r0, [pc, #328]	; (5a08 <z_add_timeout+0x178>)
    58c0:	215d      	movs	r1, #93	; 0x5d
    58c2:	f000 fccf 	bl	6264 <assert_post_action>
	to->fn = fn;
    58c6:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    58ca:	f04f 0320 	mov.w	r3, #32
    58ce:	f3ef 8b11 	mrs	fp, BASEPRI
    58d2:	f383 8812 	msr	BASEPRI_MAX, r3
    58d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58da:	484e      	ldr	r0, [pc, #312]	; (5a14 <z_add_timeout+0x184>)
    58dc:	f7ff ff62 	bl	57a4 <z_spin_lock_valid>
    58e0:	b968      	cbnz	r0, 58fe <z_add_timeout+0x6e>
    58e2:	4a4d      	ldr	r2, [pc, #308]	; (5a18 <z_add_timeout+0x188>)
    58e4:	494d      	ldr	r1, [pc, #308]	; (5a1c <z_add_timeout+0x18c>)
    58e6:	4849      	ldr	r0, [pc, #292]	; (5a0c <z_add_timeout+0x17c>)
    58e8:	2381      	movs	r3, #129	; 0x81
    58ea:	f000 fd94 	bl	6416 <printk>
    58ee:	4949      	ldr	r1, [pc, #292]	; (5a14 <z_add_timeout+0x184>)
    58f0:	484b      	ldr	r0, [pc, #300]	; (5a20 <z_add_timeout+0x190>)
    58f2:	f000 fd90 	bl	6416 <printk>
    58f6:	4848      	ldr	r0, [pc, #288]	; (5a18 <z_add_timeout+0x188>)
    58f8:	2181      	movs	r1, #129	; 0x81
    58fa:	f000 fcb3 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    58fe:	4845      	ldr	r0, [pc, #276]	; (5a14 <z_add_timeout+0x184>)
    5900:	f7ff ff6e 	bl	57e0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5904:	f06f 0301 	mvn.w	r3, #1
    5908:	ebb3 0804 	subs.w	r8, r3, r4
    590c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5910:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5914:	f1b8 0f00 	cmp.w	r8, #0
    5918:	f179 0100 	sbcs.w	r1, r9, #0
    591c:	db1c      	blt.n	5958 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    591e:	4841      	ldr	r0, [pc, #260]	; (5a24 <z_add_timeout+0x194>)
    5920:	e9d0 1000 	ldrd	r1, r0, [r0]
    5924:	1a5b      	subs	r3, r3, r1
    5926:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    592a:	1b1e      	subs	r6, r3, r4
    592c:	eb62 0705 	sbc.w	r7, r2, r5
    5930:	2e01      	cmp	r6, #1
    5932:	f177 0300 	sbcs.w	r3, r7, #0
    5936:	bfbc      	itt	lt
    5938:	2601      	movlt	r6, #1
    593a:	2700      	movlt	r7, #0
    593c:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    5940:	4a39      	ldr	r2, [pc, #228]	; (5a28 <z_add_timeout+0x198>)
    5942:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5946:	4293      	cmp	r3, r2
    5948:	d11d      	bne.n	5986 <z_add_timeout+0xf6>
	node->prev = tail;
    594a:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    594e:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    5952:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5956:	e02c      	b.n	59b2 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5958:	f7ff ff4a 	bl	57f0 <elapsed>
    595c:	1c63      	adds	r3, r4, #1
    595e:	9300      	str	r3, [sp, #0]
    5960:	f145 0300 	adc.w	r3, r5, #0
    5964:	9301      	str	r3, [sp, #4]
    5966:	e9dd 2300 	ldrd	r2, r3, [sp]
    596a:	1812      	adds	r2, r2, r0
    596c:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5970:	e9ca 2304 	strd	r2, r3, [sl, #16]
    5974:	e7e4      	b.n	5940 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5976:	1be0      	subs	r0, r4, r7
    5978:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    597c:	42b3      	cmp	r3, r6
    597e:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5982:	d0e2      	beq.n	594a <z_add_timeout+0xba>
    5984:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5986:	2b00      	cmp	r3, #0
    5988:	d0df      	beq.n	594a <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    598a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    598e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5992:	42bc      	cmp	r4, r7
    5994:	eb75 0108 	sbcs.w	r1, r5, r8
    5998:	daed      	bge.n	5976 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    599a:	1b38      	subs	r0, r7, r4
    599c:	eb68 0105 	sbc.w	r1, r8, r5
    59a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    59a4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    59a6:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    59aa:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    59ae:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    59b2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59b4:	4293      	cmp	r3, r2
    59b6:	d00b      	beq.n	59d0 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    59b8:	459a      	cmp	sl, r3
    59ba:	d109      	bne.n	59d0 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    59bc:	f7ff ff22 	bl	5804 <next_timeout>

			if (next_time == 0 ||
    59c0:	b118      	cbz	r0, 59ca <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    59c2:	4b1a      	ldr	r3, [pc, #104]	; (5a2c <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    59c4:	691b      	ldr	r3, [r3, #16]
    59c6:	4283      	cmp	r3, r0
    59c8:	d002      	beq.n	59d0 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    59ca:	2100      	movs	r1, #0
    59cc:	f7fd fc6a 	bl	32a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59d0:	4810      	ldr	r0, [pc, #64]	; (5a14 <z_add_timeout+0x184>)
    59d2:	f7ff fef5 	bl	57c0 <z_spin_unlock_valid>
    59d6:	b968      	cbnz	r0, 59f4 <z_add_timeout+0x164>
    59d8:	4a0f      	ldr	r2, [pc, #60]	; (5a18 <z_add_timeout+0x188>)
    59da:	4915      	ldr	r1, [pc, #84]	; (5a30 <z_add_timeout+0x1a0>)
    59dc:	480b      	ldr	r0, [pc, #44]	; (5a0c <z_add_timeout+0x17c>)
    59de:	23ac      	movs	r3, #172	; 0xac
    59e0:	f000 fd19 	bl	6416 <printk>
    59e4:	490b      	ldr	r1, [pc, #44]	; (5a14 <z_add_timeout+0x184>)
    59e6:	4813      	ldr	r0, [pc, #76]	; (5a34 <z_add_timeout+0x1a4>)
    59e8:	f000 fd15 	bl	6416 <printk>
    59ec:	480a      	ldr	r0, [pc, #40]	; (5a18 <z_add_timeout+0x188>)
    59ee:	21ac      	movs	r1, #172	; 0xac
    59f0:	f000 fc38 	bl	6264 <assert_post_action>
	__asm__ volatile(
    59f4:	f38b 8811 	msr	BASEPRI, fp
    59f8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    59fc:	b003      	add	sp, #12
    59fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a02:	bf00      	nop
    5a04:	00007c5f 	.word	0x00007c5f
    5a08:	00007c3b 	.word	0x00007c3b
    5a0c:	00006f96 	.word	0x00006f96
    5a10:	00007960 	.word	0x00007960
    5a14:	20000b54 	.word	0x20000b54
    5a18:	000070a9 	.word	0x000070a9
    5a1c:	000070fb 	.word	0x000070fb
    5a20:	00007110 	.word	0x00007110
    5a24:	200003d0 	.word	0x200003d0
    5a28:	20000060 	.word	0x20000060
    5a2c:	20000b10 	.word	0x20000b10
    5a30:	000070cf 	.word	0x000070cf
    5a34:	000070e6 	.word	0x000070e6

00005a38 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    5a38:	b538      	push	{r3, r4, r5, lr}
    5a3a:	4604      	mov	r4, r0
	__asm__ volatile(
    5a3c:	f04f 0320 	mov.w	r3, #32
    5a40:	f3ef 8511 	mrs	r5, BASEPRI
    5a44:	f383 8812 	msr	BASEPRI_MAX, r3
    5a48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a4c:	481a      	ldr	r0, [pc, #104]	; (5ab8 <z_abort_timeout+0x80>)
    5a4e:	f7ff fea9 	bl	57a4 <z_spin_lock_valid>
    5a52:	b968      	cbnz	r0, 5a70 <z_abort_timeout+0x38>
    5a54:	4a19      	ldr	r2, [pc, #100]	; (5abc <z_abort_timeout+0x84>)
    5a56:	491a      	ldr	r1, [pc, #104]	; (5ac0 <z_abort_timeout+0x88>)
    5a58:	481a      	ldr	r0, [pc, #104]	; (5ac4 <z_abort_timeout+0x8c>)
    5a5a:	2381      	movs	r3, #129	; 0x81
    5a5c:	f000 fcdb 	bl	6416 <printk>
    5a60:	4915      	ldr	r1, [pc, #84]	; (5ab8 <z_abort_timeout+0x80>)
    5a62:	4819      	ldr	r0, [pc, #100]	; (5ac8 <z_abort_timeout+0x90>)
    5a64:	f000 fcd7 	bl	6416 <printk>
    5a68:	4814      	ldr	r0, [pc, #80]	; (5abc <z_abort_timeout+0x84>)
    5a6a:	2181      	movs	r1, #129	; 0x81
    5a6c:	f000 fbfa 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5a70:	4811      	ldr	r0, [pc, #68]	; (5ab8 <z_abort_timeout+0x80>)
    5a72:	f7ff feb5 	bl	57e0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5a76:	6823      	ldr	r3, [r4, #0]
    5a78:	b1db      	cbz	r3, 5ab2 <z_abort_timeout+0x7a>
			remove_timeout(to);
    5a7a:	4620      	mov	r0, r4
    5a7c:	f7ff feee 	bl	585c <remove_timeout>
			ret = 0;
    5a80:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a82:	480d      	ldr	r0, [pc, #52]	; (5ab8 <z_abort_timeout+0x80>)
    5a84:	f7ff fe9c 	bl	57c0 <z_spin_unlock_valid>
    5a88:	b968      	cbnz	r0, 5aa6 <z_abort_timeout+0x6e>
    5a8a:	4a0c      	ldr	r2, [pc, #48]	; (5abc <z_abort_timeout+0x84>)
    5a8c:	490f      	ldr	r1, [pc, #60]	; (5acc <z_abort_timeout+0x94>)
    5a8e:	480d      	ldr	r0, [pc, #52]	; (5ac4 <z_abort_timeout+0x8c>)
    5a90:	23ac      	movs	r3, #172	; 0xac
    5a92:	f000 fcc0 	bl	6416 <printk>
    5a96:	4908      	ldr	r1, [pc, #32]	; (5ab8 <z_abort_timeout+0x80>)
    5a98:	480d      	ldr	r0, [pc, #52]	; (5ad0 <z_abort_timeout+0x98>)
    5a9a:	f000 fcbc 	bl	6416 <printk>
    5a9e:	4807      	ldr	r0, [pc, #28]	; (5abc <z_abort_timeout+0x84>)
    5aa0:	21ac      	movs	r1, #172	; 0xac
    5aa2:	f000 fbdf 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5aa6:	f385 8811 	msr	BASEPRI, r5
    5aaa:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5aae:	4620      	mov	r0, r4
    5ab0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    5ab2:	f06f 0415 	mvn.w	r4, #21
    5ab6:	e7e4      	b.n	5a82 <z_abort_timeout+0x4a>
    5ab8:	20000b54 	.word	0x20000b54
    5abc:	000070a9 	.word	0x000070a9
    5ac0:	000070fb 	.word	0x000070fb
    5ac4:	00006f96 	.word	0x00006f96
    5ac8:	00007110 	.word	0x00007110
    5acc:	000070cf 	.word	0x000070cf
    5ad0:	000070e6 	.word	0x000070e6

00005ad4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    5ad4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5ad6:	f04f 0320 	mov.w	r3, #32
    5ada:	f3ef 8511 	mrs	r5, BASEPRI
    5ade:	f383 8812 	msr	BASEPRI_MAX, r3
    5ae2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ae6:	4818      	ldr	r0, [pc, #96]	; (5b48 <z_get_next_timeout_expiry+0x74>)
    5ae8:	f7ff fe5c 	bl	57a4 <z_spin_lock_valid>
    5aec:	b968      	cbnz	r0, 5b0a <z_get_next_timeout_expiry+0x36>
    5aee:	4a17      	ldr	r2, [pc, #92]	; (5b4c <z_get_next_timeout_expiry+0x78>)
    5af0:	4917      	ldr	r1, [pc, #92]	; (5b50 <z_get_next_timeout_expiry+0x7c>)
    5af2:	4818      	ldr	r0, [pc, #96]	; (5b54 <z_get_next_timeout_expiry+0x80>)
    5af4:	2381      	movs	r3, #129	; 0x81
    5af6:	f000 fc8e 	bl	6416 <printk>
    5afa:	4913      	ldr	r1, [pc, #76]	; (5b48 <z_get_next_timeout_expiry+0x74>)
    5afc:	4816      	ldr	r0, [pc, #88]	; (5b58 <z_get_next_timeout_expiry+0x84>)
    5afe:	f000 fc8a 	bl	6416 <printk>
    5b02:	4812      	ldr	r0, [pc, #72]	; (5b4c <z_get_next_timeout_expiry+0x78>)
    5b04:	2181      	movs	r1, #129	; 0x81
    5b06:	f000 fbad 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b0a:	480f      	ldr	r0, [pc, #60]	; (5b48 <z_get_next_timeout_expiry+0x74>)
    5b0c:	f7ff fe68 	bl	57e0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    5b10:	f7ff fe78 	bl	5804 <next_timeout>
    5b14:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b16:	480c      	ldr	r0, [pc, #48]	; (5b48 <z_get_next_timeout_expiry+0x74>)
    5b18:	f7ff fe52 	bl	57c0 <z_spin_unlock_valid>
    5b1c:	b968      	cbnz	r0, 5b3a <z_get_next_timeout_expiry+0x66>
    5b1e:	4a0b      	ldr	r2, [pc, #44]	; (5b4c <z_get_next_timeout_expiry+0x78>)
    5b20:	490e      	ldr	r1, [pc, #56]	; (5b5c <z_get_next_timeout_expiry+0x88>)
    5b22:	480c      	ldr	r0, [pc, #48]	; (5b54 <z_get_next_timeout_expiry+0x80>)
    5b24:	23ac      	movs	r3, #172	; 0xac
    5b26:	f000 fc76 	bl	6416 <printk>
    5b2a:	4907      	ldr	r1, [pc, #28]	; (5b48 <z_get_next_timeout_expiry+0x74>)
    5b2c:	480c      	ldr	r0, [pc, #48]	; (5b60 <z_get_next_timeout_expiry+0x8c>)
    5b2e:	f000 fc72 	bl	6416 <printk>
    5b32:	4806      	ldr	r0, [pc, #24]	; (5b4c <z_get_next_timeout_expiry+0x78>)
    5b34:	21ac      	movs	r1, #172	; 0xac
    5b36:	f000 fb95 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5b3a:	f385 8811 	msr	BASEPRI, r5
    5b3e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    5b42:	4620      	mov	r0, r4
    5b44:	bd38      	pop	{r3, r4, r5, pc}
    5b46:	bf00      	nop
    5b48:	20000b54 	.word	0x20000b54
    5b4c:	000070a9 	.word	0x000070a9
    5b50:	000070fb 	.word	0x000070fb
    5b54:	00006f96 	.word	0x00006f96
    5b58:	00007110 	.word	0x00007110
    5b5c:	000070cf 	.word	0x000070cf
    5b60:	000070e6 	.word	0x000070e6

00005b64 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    5b64:	b570      	push	{r4, r5, r6, lr}
    5b66:	4604      	mov	r4, r0
    5b68:	460d      	mov	r5, r1
	__asm__ volatile(
    5b6a:	f04f 0320 	mov.w	r3, #32
    5b6e:	f3ef 8611 	mrs	r6, BASEPRI
    5b72:	f383 8812 	msr	BASEPRI_MAX, r3
    5b76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b7a:	481b      	ldr	r0, [pc, #108]	; (5be8 <z_set_timeout_expiry+0x84>)
    5b7c:	f7ff fe12 	bl	57a4 <z_spin_lock_valid>
    5b80:	b968      	cbnz	r0, 5b9e <z_set_timeout_expiry+0x3a>
    5b82:	4a1a      	ldr	r2, [pc, #104]	; (5bec <z_set_timeout_expiry+0x88>)
    5b84:	491a      	ldr	r1, [pc, #104]	; (5bf0 <z_set_timeout_expiry+0x8c>)
    5b86:	481b      	ldr	r0, [pc, #108]	; (5bf4 <z_set_timeout_expiry+0x90>)
    5b88:	2381      	movs	r3, #129	; 0x81
    5b8a:	f000 fc44 	bl	6416 <printk>
    5b8e:	4916      	ldr	r1, [pc, #88]	; (5be8 <z_set_timeout_expiry+0x84>)
    5b90:	4819      	ldr	r0, [pc, #100]	; (5bf8 <z_set_timeout_expiry+0x94>)
    5b92:	f000 fc40 	bl	6416 <printk>
    5b96:	4815      	ldr	r0, [pc, #84]	; (5bec <z_set_timeout_expiry+0x88>)
    5b98:	2181      	movs	r1, #129	; 0x81
    5b9a:	f000 fb63 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b9e:	4812      	ldr	r0, [pc, #72]	; (5be8 <z_set_timeout_expiry+0x84>)
    5ba0:	f7ff fe1e 	bl	57e0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    5ba4:	f7ff fe2e 	bl	5804 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5ba8:	2801      	cmp	r0, #1
    5baa:	dd05      	ble.n	5bb8 <z_set_timeout_expiry+0x54>
    5bac:	42a0      	cmp	r0, r4
    5bae:	db03      	blt.n	5bb8 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    5bb0:	4629      	mov	r1, r5
    5bb2:	4620      	mov	r0, r4
    5bb4:	f7fd fb76 	bl	32a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bb8:	480b      	ldr	r0, [pc, #44]	; (5be8 <z_set_timeout_expiry+0x84>)
    5bba:	f7ff fe01 	bl	57c0 <z_spin_unlock_valid>
    5bbe:	b968      	cbnz	r0, 5bdc <z_set_timeout_expiry+0x78>
    5bc0:	4a0a      	ldr	r2, [pc, #40]	; (5bec <z_set_timeout_expiry+0x88>)
    5bc2:	490e      	ldr	r1, [pc, #56]	; (5bfc <z_set_timeout_expiry+0x98>)
    5bc4:	480b      	ldr	r0, [pc, #44]	; (5bf4 <z_set_timeout_expiry+0x90>)
    5bc6:	23ac      	movs	r3, #172	; 0xac
    5bc8:	f000 fc25 	bl	6416 <printk>
    5bcc:	4906      	ldr	r1, [pc, #24]	; (5be8 <z_set_timeout_expiry+0x84>)
    5bce:	480c      	ldr	r0, [pc, #48]	; (5c00 <z_set_timeout_expiry+0x9c>)
    5bd0:	f000 fc21 	bl	6416 <printk>
    5bd4:	4805      	ldr	r0, [pc, #20]	; (5bec <z_set_timeout_expiry+0x88>)
    5bd6:	21ac      	movs	r1, #172	; 0xac
    5bd8:	f000 fb44 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5bdc:	f386 8811 	msr	BASEPRI, r6
    5be0:	f3bf 8f6f 	isb	sy
		}
	}
}
    5be4:	bd70      	pop	{r4, r5, r6, pc}
    5be6:	bf00      	nop
    5be8:	20000b54 	.word	0x20000b54
    5bec:	000070a9 	.word	0x000070a9
    5bf0:	000070fb 	.word	0x000070fb
    5bf4:	00006f96 	.word	0x00006f96
    5bf8:	00007110 	.word	0x00007110
    5bfc:	000070cf 	.word	0x000070cf
    5c00:	000070e6 	.word	0x000070e6

00005c04 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    5c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c08:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5c0a:	f7fe fcf3 	bl	45f4 <z_time_slice>
	__asm__ volatile(
    5c0e:	f04f 0320 	mov.w	r3, #32
    5c12:	f3ef 8711 	mrs	r7, BASEPRI
    5c16:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c1e:	4855      	ldr	r0, [pc, #340]	; (5d74 <sys_clock_announce+0x170>)
    5c20:	f7ff fdc0 	bl	57a4 <z_spin_lock_valid>
    5c24:	b968      	cbnz	r0, 5c42 <sys_clock_announce+0x3e>
    5c26:	4a54      	ldr	r2, [pc, #336]	; (5d78 <sys_clock_announce+0x174>)
    5c28:	4954      	ldr	r1, [pc, #336]	; (5d7c <sys_clock_announce+0x178>)
    5c2a:	4855      	ldr	r0, [pc, #340]	; (5d80 <sys_clock_announce+0x17c>)
    5c2c:	2381      	movs	r3, #129	; 0x81
    5c2e:	f000 fbf2 	bl	6416 <printk>
    5c32:	4950      	ldr	r1, [pc, #320]	; (5d74 <sys_clock_announce+0x170>)
    5c34:	4853      	ldr	r0, [pc, #332]	; (5d84 <sys_clock_announce+0x180>)
    5c36:	f000 fbee 	bl	6416 <printk>
    5c3a:	484f      	ldr	r0, [pc, #316]	; (5d78 <sys_clock_announce+0x174>)
    5c3c:	2181      	movs	r1, #129	; 0x81
    5c3e:	f000 fb11 	bl	6264 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5c42:	4d51      	ldr	r5, [pc, #324]	; (5d88 <sys_clock_announce+0x184>)
    5c44:	4e51      	ldr	r6, [pc, #324]	; (5d8c <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    5c46:	484b      	ldr	r0, [pc, #300]	; (5d74 <sys_clock_announce+0x170>)
	return list->head == list;
    5c48:	f8df a14c 	ldr.w	sl, [pc, #332]	; 5d98 <sys_clock_announce+0x194>
    5c4c:	f7ff fdc8 	bl	57e0 <z_spin_lock_set_owner>
    5c50:	46b3      	mov	fp, r6
    5c52:	602c      	str	r4, [r5, #0]
    5c54:	e9d6 2300 	ldrd	r2, r3, [r6]
    5c58:	f8d5 c000 	ldr.w	ip, [r5]
    5c5c:	f8da 4000 	ldr.w	r4, [sl]
    5c60:	e9cd 2300 	strd	r2, r3, [sp]
    5c64:	4662      	mov	r2, ip
    5c66:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c68:	4554      	cmp	r4, sl
    5c6a:	46e0      	mov	r8, ip
    5c6c:	4699      	mov	r9, r3
    5c6e:	d00c      	beq.n	5c8a <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5c70:	b15c      	cbz	r4, 5c8a <sys_clock_announce+0x86>
    5c72:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    5c76:	458c      	cmp	ip, r1
    5c78:	eb79 0302 	sbcs.w	r3, r9, r2
    5c7c:	da2e      	bge.n	5cdc <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5c7e:	ebb1 000c 	subs.w	r0, r1, ip
    5c82:	eb62 0109 	sbc.w	r1, r2, r9
    5c86:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    5c8a:	9a00      	ldr	r2, [sp, #0]
    5c8c:	9901      	ldr	r1, [sp, #4]
    5c8e:	eb18 0202 	adds.w	r2, r8, r2
    5c92:	464b      	mov	r3, r9
    5c94:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    5c98:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5c9a:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    5c9e:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5ca0:	f7ff fdb0 	bl	5804 <next_timeout>
    5ca4:	4621      	mov	r1, r4
    5ca6:	f7fd fafd 	bl	32a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5caa:	4832      	ldr	r0, [pc, #200]	; (5d74 <sys_clock_announce+0x170>)
    5cac:	f7ff fd88 	bl	57c0 <z_spin_unlock_valid>
    5cb0:	b968      	cbnz	r0, 5cce <sys_clock_announce+0xca>
    5cb2:	4a31      	ldr	r2, [pc, #196]	; (5d78 <sys_clock_announce+0x174>)
    5cb4:	4936      	ldr	r1, [pc, #216]	; (5d90 <sys_clock_announce+0x18c>)
    5cb6:	4832      	ldr	r0, [pc, #200]	; (5d80 <sys_clock_announce+0x17c>)
    5cb8:	23ac      	movs	r3, #172	; 0xac
    5cba:	f000 fbac 	bl	6416 <printk>
    5cbe:	492d      	ldr	r1, [pc, #180]	; (5d74 <sys_clock_announce+0x170>)
    5cc0:	4834      	ldr	r0, [pc, #208]	; (5d94 <sys_clock_announce+0x190>)
    5cc2:	f000 fba8 	bl	6416 <printk>
    5cc6:	482c      	ldr	r0, [pc, #176]	; (5d78 <sys_clock_announce+0x174>)
    5cc8:	21ac      	movs	r1, #172	; 0xac
    5cca:	f000 facb 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5cce:	f387 8811 	msr	BASEPRI, r7
    5cd2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5cd6:	b003      	add	sp, #12
    5cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    5cdc:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    5ce0:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    5ce4:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    5ce8:	f04f 0200 	mov.w	r2, #0
    5cec:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    5cf0:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    5cf4:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    5cf6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    5cfa:	4620      	mov	r0, r4
		curr_tick += dt;
    5cfc:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    5d00:	f7ff fdac 	bl	585c <remove_timeout>
    5d04:	481b      	ldr	r0, [pc, #108]	; (5d74 <sys_clock_announce+0x170>)
    5d06:	f7ff fd5b 	bl	57c0 <z_spin_unlock_valid>
    5d0a:	b968      	cbnz	r0, 5d28 <sys_clock_announce+0x124>
    5d0c:	4a1a      	ldr	r2, [pc, #104]	; (5d78 <sys_clock_announce+0x174>)
    5d0e:	4920      	ldr	r1, [pc, #128]	; (5d90 <sys_clock_announce+0x18c>)
    5d10:	481b      	ldr	r0, [pc, #108]	; (5d80 <sys_clock_announce+0x17c>)
    5d12:	23ac      	movs	r3, #172	; 0xac
    5d14:	f000 fb7f 	bl	6416 <printk>
    5d18:	4916      	ldr	r1, [pc, #88]	; (5d74 <sys_clock_announce+0x170>)
    5d1a:	481e      	ldr	r0, [pc, #120]	; (5d94 <sys_clock_announce+0x190>)
    5d1c:	f000 fb7b 	bl	6416 <printk>
    5d20:	4815      	ldr	r0, [pc, #84]	; (5d78 <sys_clock_announce+0x174>)
    5d22:	21ac      	movs	r1, #172	; 0xac
    5d24:	f000 fa9e 	bl	6264 <assert_post_action>
    5d28:	f387 8811 	msr	BASEPRI, r7
    5d2c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5d30:	68a3      	ldr	r3, [r4, #8]
    5d32:	4620      	mov	r0, r4
    5d34:	4798      	blx	r3
	__asm__ volatile(
    5d36:	f04f 0320 	mov.w	r3, #32
    5d3a:	f3ef 8711 	mrs	r7, BASEPRI
    5d3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d46:	480b      	ldr	r0, [pc, #44]	; (5d74 <sys_clock_announce+0x170>)
    5d48:	f7ff fd2c 	bl	57a4 <z_spin_lock_valid>
    5d4c:	b968      	cbnz	r0, 5d6a <sys_clock_announce+0x166>
    5d4e:	4a0a      	ldr	r2, [pc, #40]	; (5d78 <sys_clock_announce+0x174>)
    5d50:	490a      	ldr	r1, [pc, #40]	; (5d7c <sys_clock_announce+0x178>)
    5d52:	480b      	ldr	r0, [pc, #44]	; (5d80 <sys_clock_announce+0x17c>)
    5d54:	2381      	movs	r3, #129	; 0x81
    5d56:	f000 fb5e 	bl	6416 <printk>
    5d5a:	4906      	ldr	r1, [pc, #24]	; (5d74 <sys_clock_announce+0x170>)
    5d5c:	4809      	ldr	r0, [pc, #36]	; (5d84 <sys_clock_announce+0x180>)
    5d5e:	f000 fb5a 	bl	6416 <printk>
    5d62:	4805      	ldr	r0, [pc, #20]	; (5d78 <sys_clock_announce+0x174>)
    5d64:	2181      	movs	r1, #129	; 0x81
    5d66:	f000 fa7d 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d6a:	4802      	ldr	r0, [pc, #8]	; (5d74 <sys_clock_announce+0x170>)
    5d6c:	f7ff fd38 	bl	57e0 <z_spin_lock_set_owner>
	return k;
    5d70:	e770      	b.n	5c54 <sys_clock_announce+0x50>
    5d72:	bf00      	nop
    5d74:	20000b54 	.word	0x20000b54
    5d78:	000070a9 	.word	0x000070a9
    5d7c:	000070fb 	.word	0x000070fb
    5d80:	00006f96 	.word	0x00006f96
    5d84:	00007110 	.word	0x00007110
    5d88:	20000b50 	.word	0x20000b50
    5d8c:	200003d0 	.word	0x200003d0
    5d90:	000070cf 	.word	0x000070cf
    5d94:	000070e6 	.word	0x000070e6
    5d98:	20000060 	.word	0x20000060

00005d9c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5d9c:	b570      	push	{r4, r5, r6, lr}
    5d9e:	f04f 0320 	mov.w	r3, #32
    5da2:	f3ef 8611 	mrs	r6, BASEPRI
    5da6:	f383 8812 	msr	BASEPRI_MAX, r3
    5daa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5dae:	481b      	ldr	r0, [pc, #108]	; (5e1c <sys_clock_tick_get+0x80>)
    5db0:	f7ff fcf8 	bl	57a4 <z_spin_lock_valid>
    5db4:	b968      	cbnz	r0, 5dd2 <sys_clock_tick_get+0x36>
    5db6:	4a1a      	ldr	r2, [pc, #104]	; (5e20 <sys_clock_tick_get+0x84>)
    5db8:	491a      	ldr	r1, [pc, #104]	; (5e24 <sys_clock_tick_get+0x88>)
    5dba:	481b      	ldr	r0, [pc, #108]	; (5e28 <sys_clock_tick_get+0x8c>)
    5dbc:	2381      	movs	r3, #129	; 0x81
    5dbe:	f000 fb2a 	bl	6416 <printk>
    5dc2:	4916      	ldr	r1, [pc, #88]	; (5e1c <sys_clock_tick_get+0x80>)
    5dc4:	4819      	ldr	r0, [pc, #100]	; (5e2c <sys_clock_tick_get+0x90>)
    5dc6:	f000 fb26 	bl	6416 <printk>
    5dca:	4815      	ldr	r0, [pc, #84]	; (5e20 <sys_clock_tick_get+0x84>)
    5dcc:	2181      	movs	r1, #129	; 0x81
    5dce:	f000 fa49 	bl	6264 <assert_post_action>
	z_spin_lock_set_owner(l);
    5dd2:	4812      	ldr	r0, [pc, #72]	; (5e1c <sys_clock_tick_get+0x80>)
    5dd4:	f7ff fd04 	bl	57e0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5dd8:	f7fd fa94 	bl	3304 <sys_clock_elapsed>
    5ddc:	4b14      	ldr	r3, [pc, #80]	; (5e30 <sys_clock_tick_get+0x94>)
    5dde:	e9d3 4500 	ldrd	r4, r5, [r3]
    5de2:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5de4:	480d      	ldr	r0, [pc, #52]	; (5e1c <sys_clock_tick_get+0x80>)
    5de6:	f145 0500 	adc.w	r5, r5, #0
    5dea:	f7ff fce9 	bl	57c0 <z_spin_unlock_valid>
    5dee:	b968      	cbnz	r0, 5e0c <sys_clock_tick_get+0x70>
    5df0:	4a0b      	ldr	r2, [pc, #44]	; (5e20 <sys_clock_tick_get+0x84>)
    5df2:	4910      	ldr	r1, [pc, #64]	; (5e34 <sys_clock_tick_get+0x98>)
    5df4:	480c      	ldr	r0, [pc, #48]	; (5e28 <sys_clock_tick_get+0x8c>)
    5df6:	23ac      	movs	r3, #172	; 0xac
    5df8:	f000 fb0d 	bl	6416 <printk>
    5dfc:	4907      	ldr	r1, [pc, #28]	; (5e1c <sys_clock_tick_get+0x80>)
    5dfe:	480e      	ldr	r0, [pc, #56]	; (5e38 <sys_clock_tick_get+0x9c>)
    5e00:	f000 fb09 	bl	6416 <printk>
    5e04:	4806      	ldr	r0, [pc, #24]	; (5e20 <sys_clock_tick_get+0x84>)
    5e06:	21ac      	movs	r1, #172	; 0xac
    5e08:	f000 fa2c 	bl	6264 <assert_post_action>
	__asm__ volatile(
    5e0c:	f386 8811 	msr	BASEPRI, r6
    5e10:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5e14:	4620      	mov	r0, r4
    5e16:	4629      	mov	r1, r5
    5e18:	bd70      	pop	{r4, r5, r6, pc}
    5e1a:	bf00      	nop
    5e1c:	20000b54 	.word	0x20000b54
    5e20:	000070a9 	.word	0x000070a9
    5e24:	000070fb 	.word	0x000070fb
    5e28:	00006f96 	.word	0x00006f96
    5e2c:	00007110 	.word	0x00007110
    5e30:	200003d0 	.word	0x200003d0
    5e34:	000070cf 	.word	0x000070cf
    5e38:	000070e6 	.word	0x000070e6

00005e3c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5e3c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5e3e:	4806      	ldr	r0, [pc, #24]	; (5e58 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5e40:	4a06      	ldr	r2, [pc, #24]	; (5e5c <z_data_copy+0x20>)
    5e42:	4907      	ldr	r1, [pc, #28]	; (5e60 <z_data_copy+0x24>)
    5e44:	1a12      	subs	r2, r2, r0
    5e46:	f000 fb2d 	bl	64a4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5e4e:	4a05      	ldr	r2, [pc, #20]	; (5e64 <z_data_copy+0x28>)
    5e50:	4905      	ldr	r1, [pc, #20]	; (5e68 <z_data_copy+0x2c>)
    5e52:	4806      	ldr	r0, [pc, #24]	; (5e6c <z_data_copy+0x30>)
    5e54:	f000 bb26 	b.w	64a4 <memcpy>
    5e58:	20000000 	.word	0x20000000
    5e5c:	20000130 	.word	0x20000130
    5e60:	00007cb4 	.word	0x00007cb4
    5e64:	00000000 	.word	0x00000000
    5e68:	00007cb4 	.word	0x00007cb4
    5e6c:	20000000 	.word	0x20000000

00005e70 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5e70:	4a02      	ldr	r2, [pc, #8]	; (5e7c <boot_banner+0xc>)
    5e72:	4903      	ldr	r1, [pc, #12]	; (5e80 <boot_banner+0x10>)
    5e74:	4803      	ldr	r0, [pc, #12]	; (5e84 <boot_banner+0x14>)
    5e76:	f000 bace 	b.w	6416 <printk>
    5e7a:	bf00      	nop
    5e7c:	00007962 	.word	0x00007962
    5e80:	00007c7f 	.word	0x00007c7f
    5e84:	00007c8b 	.word	0x00007c8b

00005e88 <nrf_cc3xx_platform_init_no_rng>:
    5e88:	b510      	push	{r4, lr}
    5e8a:	4c0a      	ldr	r4, [pc, #40]	; (5eb4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5e8c:	6823      	ldr	r3, [r4, #0]
    5e8e:	b11b      	cbz	r3, 5e98 <nrf_cc3xx_platform_init_no_rng+0x10>
    5e90:	2301      	movs	r3, #1
    5e92:	6023      	str	r3, [r4, #0]
    5e94:	2000      	movs	r0, #0
    5e96:	bd10      	pop	{r4, pc}
    5e98:	f000 f8d6 	bl	6048 <CC_LibInitNoRng>
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d0f7      	beq.n	5e90 <nrf_cc3xx_platform_init_no_rng+0x8>
    5ea0:	3801      	subs	r0, #1
    5ea2:	2806      	cmp	r0, #6
    5ea4:	d803      	bhi.n	5eae <nrf_cc3xx_platform_init_no_rng+0x26>
    5ea6:	4b04      	ldr	r3, [pc, #16]	; (5eb8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5ea8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5eac:	bd10      	pop	{r4, pc}
    5eae:	4803      	ldr	r0, [pc, #12]	; (5ebc <nrf_cc3xx_platform_init_no_rng+0x34>)
    5eb0:	bd10      	pop	{r4, pc}
    5eb2:	bf00      	nop
    5eb4:	20000b58 	.word	0x20000b58
    5eb8:	00006d10 	.word	0x00006d10
    5ebc:	ffff8ffe 	.word	0xffff8ffe

00005ec0 <nrf_cc3xx_platform_abort>:
    5ec0:	f3bf 8f4f 	dsb	sy
    5ec4:	4905      	ldr	r1, [pc, #20]	; (5edc <nrf_cc3xx_platform_abort+0x1c>)
    5ec6:	4b06      	ldr	r3, [pc, #24]	; (5ee0 <nrf_cc3xx_platform_abort+0x20>)
    5ec8:	68ca      	ldr	r2, [r1, #12]
    5eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5ece:	4313      	orrs	r3, r2
    5ed0:	60cb      	str	r3, [r1, #12]
    5ed2:	f3bf 8f4f 	dsb	sy
    5ed6:	bf00      	nop
    5ed8:	e7fd      	b.n	5ed6 <nrf_cc3xx_platform_abort+0x16>
    5eda:	bf00      	nop
    5edc:	e000ed00 	.word	0xe000ed00
    5ee0:	05fa0004 	.word	0x05fa0004

00005ee4 <CC_PalAbort>:
    5ee4:	b4f0      	push	{r4, r5, r6, r7}
    5ee6:	4f09      	ldr	r7, [pc, #36]	; (5f0c <CC_PalAbort+0x28>)
    5ee8:	4e09      	ldr	r6, [pc, #36]	; (5f10 <CC_PalAbort+0x2c>)
    5eea:	4c0a      	ldr	r4, [pc, #40]	; (5f14 <CC_PalAbort+0x30>)
    5eec:	4a0a      	ldr	r2, [pc, #40]	; (5f18 <CC_PalAbort+0x34>)
    5eee:	4d0b      	ldr	r5, [pc, #44]	; (5f1c <CC_PalAbort+0x38>)
    5ef0:	490b      	ldr	r1, [pc, #44]	; (5f20 <CC_PalAbort+0x3c>)
    5ef2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5ef6:	603b      	str	r3, [r7, #0]
    5ef8:	6852      	ldr	r2, [r2, #4]
    5efa:	6033      	str	r3, [r6, #0]
    5efc:	6023      	str	r3, [r4, #0]
    5efe:	2400      	movs	r4, #0
    5f00:	602b      	str	r3, [r5, #0]
    5f02:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    5f06:	bcf0      	pop	{r4, r5, r6, r7}
    5f08:	4710      	bx	r2
    5f0a:	bf00      	nop
    5f0c:	5002b400 	.word	0x5002b400
    5f10:	5002b404 	.word	0x5002b404
    5f14:	5002b408 	.word	0x5002b408
    5f18:	20000068 	.word	0x20000068
    5f1c:	5002b40c 	.word	0x5002b40c
    5f20:	5002a000 	.word	0x5002a000

00005f24 <nrf_cc3xx_platform_set_abort>:
    5f24:	e9d0 1200 	ldrd	r1, r2, [r0]
    5f28:	4b01      	ldr	r3, [pc, #4]	; (5f30 <nrf_cc3xx_platform_set_abort+0xc>)
    5f2a:	e9c3 1200 	strd	r1, r2, [r3]
    5f2e:	4770      	bx	lr
    5f30:	20000068 	.word	0x20000068

00005f34 <mutex_free>:
    5f34:	b510      	push	{r4, lr}
    5f36:	4604      	mov	r4, r0
    5f38:	b130      	cbz	r0, 5f48 <mutex_free+0x14>
    5f3a:	6863      	ldr	r3, [r4, #4]
    5f3c:	06db      	lsls	r3, r3, #27
    5f3e:	d502      	bpl.n	5f46 <mutex_free+0x12>
    5f40:	2300      	movs	r3, #0
    5f42:	6023      	str	r3, [r4, #0]
    5f44:	6063      	str	r3, [r4, #4]
    5f46:	bd10      	pop	{r4, pc}
    5f48:	4b02      	ldr	r3, [pc, #8]	; (5f54 <mutex_free+0x20>)
    5f4a:	4803      	ldr	r0, [pc, #12]	; (5f58 <mutex_free+0x24>)
    5f4c:	685b      	ldr	r3, [r3, #4]
    5f4e:	4798      	blx	r3
    5f50:	e7f3      	b.n	5f3a <mutex_free+0x6>
    5f52:	bf00      	nop
    5f54:	20000068 	.word	0x20000068
    5f58:	00006d2c 	.word	0x00006d2c

00005f5c <mutex_unlock>:
    5f5c:	b168      	cbz	r0, 5f7a <mutex_unlock+0x1e>
    5f5e:	6843      	ldr	r3, [r0, #4]
    5f60:	b13b      	cbz	r3, 5f72 <mutex_unlock+0x16>
    5f62:	06db      	lsls	r3, r3, #27
    5f64:	d507      	bpl.n	5f76 <mutex_unlock+0x1a>
    5f66:	f3bf 8f5f 	dmb	sy
    5f6a:	2300      	movs	r3, #0
    5f6c:	6003      	str	r3, [r0, #0]
    5f6e:	4618      	mov	r0, r3
    5f70:	4770      	bx	lr
    5f72:	4803      	ldr	r0, [pc, #12]	; (5f80 <mutex_unlock+0x24>)
    5f74:	4770      	bx	lr
    5f76:	4803      	ldr	r0, [pc, #12]	; (5f84 <mutex_unlock+0x28>)
    5f78:	4770      	bx	lr
    5f7a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5f7e:	4770      	bx	lr
    5f80:	ffff8fea 	.word	0xffff8fea
    5f84:	ffff8fe9 	.word	0xffff8fe9

00005f88 <mutex_init>:
    5f88:	b510      	push	{r4, lr}
    5f8a:	4604      	mov	r4, r0
    5f8c:	b120      	cbz	r0, 5f98 <mutex_init+0x10>
    5f8e:	2200      	movs	r2, #0
    5f90:	2311      	movs	r3, #17
    5f92:	6022      	str	r2, [r4, #0]
    5f94:	6063      	str	r3, [r4, #4]
    5f96:	bd10      	pop	{r4, pc}
    5f98:	4801      	ldr	r0, [pc, #4]	; (5fa0 <mutex_init+0x18>)
    5f9a:	f7ff ffa3 	bl	5ee4 <CC_PalAbort>
    5f9e:	e7f6      	b.n	5f8e <mutex_init+0x6>
    5fa0:	00006d54 	.word	0x00006d54

00005fa4 <mutex_lock>:
    5fa4:	b1c0      	cbz	r0, 5fd8 <mutex_lock+0x34>
    5fa6:	6843      	ldr	r3, [r0, #4]
    5fa8:	b1a3      	cbz	r3, 5fd4 <mutex_lock+0x30>
    5faa:	06db      	lsls	r3, r3, #27
    5fac:	d510      	bpl.n	5fd0 <mutex_lock+0x2c>
    5fae:	2201      	movs	r2, #1
    5fb0:	f3bf 8f5b 	dmb	ish
    5fb4:	e850 3f00 	ldrex	r3, [r0]
    5fb8:	e840 2100 	strex	r1, r2, [r0]
    5fbc:	2900      	cmp	r1, #0
    5fbe:	d1f9      	bne.n	5fb4 <mutex_lock+0x10>
    5fc0:	f3bf 8f5b 	dmb	ish
    5fc4:	2b01      	cmp	r3, #1
    5fc6:	d0f3      	beq.n	5fb0 <mutex_lock+0xc>
    5fc8:	f3bf 8f5f 	dmb	sy
    5fcc:	2000      	movs	r0, #0
    5fce:	4770      	bx	lr
    5fd0:	4803      	ldr	r0, [pc, #12]	; (5fe0 <mutex_lock+0x3c>)
    5fd2:	4770      	bx	lr
    5fd4:	4803      	ldr	r0, [pc, #12]	; (5fe4 <mutex_lock+0x40>)
    5fd6:	4770      	bx	lr
    5fd8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5fdc:	4770      	bx	lr
    5fde:	bf00      	nop
    5fe0:	ffff8fe9 	.word	0xffff8fe9
    5fe4:	ffff8fea 	.word	0xffff8fea

00005fe8 <nrf_cc3xx_platform_set_mutexes>:
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	e9d0 2300 	ldrd	r2, r3, [r0]
    5fee:	4c13      	ldr	r4, [pc, #76]	; (603c <nrf_cc3xx_platform_set_mutexes+0x54>)
    5ff0:	4d13      	ldr	r5, [pc, #76]	; (6040 <nrf_cc3xx_platform_set_mutexes+0x58>)
    5ff2:	e9c4 2300 	strd	r2, r3, [r4]
    5ff6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    5ffa:	e9c4 6302 	strd	r6, r3, [r4, #8]
    5ffe:	4b11      	ldr	r3, [pc, #68]	; (6044 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6000:	6808      	ldr	r0, [r1, #0]
    6002:	6018      	str	r0, [r3, #0]
    6004:	6848      	ldr	r0, [r1, #4]
    6006:	6058      	str	r0, [r3, #4]
    6008:	6888      	ldr	r0, [r1, #8]
    600a:	6098      	str	r0, [r3, #8]
    600c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    6010:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    6014:	60de      	str	r6, [r3, #12]
    6016:	6118      	str	r0, [r3, #16]
    6018:	06cb      	lsls	r3, r1, #27
    601a:	d50d      	bpl.n	6038 <nrf_cc3xx_platform_set_mutexes+0x50>
    601c:	2300      	movs	r3, #0
    601e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    6022:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    6026:	f505 7088 	add.w	r0, r5, #272	; 0x110
    602a:	4790      	blx	r2
    602c:	6823      	ldr	r3, [r4, #0]
    602e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    6032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6036:	4718      	bx	r3
    6038:	bd70      	pop	{r4, r5, r6, pc}
    603a:	bf00      	nop
    603c:	20000078 	.word	0x20000078
    6040:	20000f84 	.word	0x20000f84
    6044:	20000088 	.word	0x20000088

00006048 <CC_LibInitNoRng>:
    6048:	b510      	push	{r4, lr}
    604a:	f000 f833 	bl	60b4 <CC_HalInit>
    604e:	b120      	cbz	r0, 605a <CC_LibInitNoRng+0x12>
    6050:	2403      	movs	r4, #3
    6052:	f000 f867 	bl	6124 <CC_PalTerminate>
    6056:	4620      	mov	r0, r4
    6058:	bd10      	pop	{r4, pc}
    605a:	f000 f835 	bl	60c8 <CC_PalInit>
    605e:	b990      	cbnz	r0, 6086 <CC_LibInitNoRng+0x3e>
    6060:	f000 f8b0 	bl	61c4 <CC_PalPowerSaveModeSelect>
    6064:	b990      	cbnz	r0, 608c <CC_LibInitNoRng+0x44>
    6066:	4b0f      	ldr	r3, [pc, #60]	; (60a4 <CC_LibInitNoRng+0x5c>)
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	0e1b      	lsrs	r3, r3, #24
    606c:	2bf0      	cmp	r3, #240	; 0xf0
    606e:	d108      	bne.n	6082 <CC_LibInitNoRng+0x3a>
    6070:	4a0d      	ldr	r2, [pc, #52]	; (60a8 <CC_LibInitNoRng+0x60>)
    6072:	4b0e      	ldr	r3, [pc, #56]	; (60ac <CC_LibInitNoRng+0x64>)
    6074:	6812      	ldr	r2, [r2, #0]
    6076:	429a      	cmp	r2, r3
    6078:	d00a      	beq.n	6090 <CC_LibInitNoRng+0x48>
    607a:	2407      	movs	r4, #7
    607c:	f000 f81c 	bl	60b8 <CC_HalTerminate>
    6080:	e7e7      	b.n	6052 <CC_LibInitNoRng+0xa>
    6082:	2406      	movs	r4, #6
    6084:	e7fa      	b.n	607c <CC_LibInitNoRng+0x34>
    6086:	2404      	movs	r4, #4
    6088:	4620      	mov	r0, r4
    608a:	bd10      	pop	{r4, pc}
    608c:	2400      	movs	r4, #0
    608e:	e7f5      	b.n	607c <CC_LibInitNoRng+0x34>
    6090:	2001      	movs	r0, #1
    6092:	f000 f897 	bl	61c4 <CC_PalPowerSaveModeSelect>
    6096:	4604      	mov	r4, r0
    6098:	2800      	cmp	r0, #0
    609a:	d1f7      	bne.n	608c <CC_LibInitNoRng+0x44>
    609c:	4b04      	ldr	r3, [pc, #16]	; (60b0 <CC_LibInitNoRng+0x68>)
    609e:	6018      	str	r0, [r3, #0]
    60a0:	e7d9      	b.n	6056 <CC_LibInitNoRng+0xe>
    60a2:	bf00      	nop
    60a4:	5002b928 	.word	0x5002b928
    60a8:	5002ba24 	.word	0x5002ba24
    60ac:	20e00000 	.word	0x20e00000
    60b0:	5002ba0c 	.word	0x5002ba0c

000060b4 <CC_HalInit>:
    60b4:	2000      	movs	r0, #0
    60b6:	4770      	bx	lr

000060b8 <CC_HalTerminate>:
    60b8:	2000      	movs	r0, #0
    60ba:	4770      	bx	lr

000060bc <CC_HalMaskInterrupt>:
    60bc:	4b01      	ldr	r3, [pc, #4]	; (60c4 <CC_HalMaskInterrupt+0x8>)
    60be:	6018      	str	r0, [r3, #0]
    60c0:	4770      	bx	lr
    60c2:	bf00      	nop
    60c4:	5002ba04 	.word	0x5002ba04

000060c8 <CC_PalInit>:
    60c8:	b510      	push	{r4, lr}
    60ca:	4811      	ldr	r0, [pc, #68]	; (6110 <CC_PalInit+0x48>)
    60cc:	f000 f848 	bl	6160 <CC_PalMutexCreate>
    60d0:	b100      	cbz	r0, 60d4 <CC_PalInit+0xc>
    60d2:	bd10      	pop	{r4, pc}
    60d4:	480f      	ldr	r0, [pc, #60]	; (6114 <CC_PalInit+0x4c>)
    60d6:	f000 f843 	bl	6160 <CC_PalMutexCreate>
    60da:	2800      	cmp	r0, #0
    60dc:	d1f9      	bne.n	60d2 <CC_PalInit+0xa>
    60de:	4c0e      	ldr	r4, [pc, #56]	; (6118 <CC_PalInit+0x50>)
    60e0:	4620      	mov	r0, r4
    60e2:	f000 f83d 	bl	6160 <CC_PalMutexCreate>
    60e6:	2800      	cmp	r0, #0
    60e8:	d1f3      	bne.n	60d2 <CC_PalInit+0xa>
    60ea:	4b0c      	ldr	r3, [pc, #48]	; (611c <CC_PalInit+0x54>)
    60ec:	480c      	ldr	r0, [pc, #48]	; (6120 <CC_PalInit+0x58>)
    60ee:	601c      	str	r4, [r3, #0]
    60f0:	f000 f836 	bl	6160 <CC_PalMutexCreate>
    60f4:	4601      	mov	r1, r0
    60f6:	2800      	cmp	r0, #0
    60f8:	d1eb      	bne.n	60d2 <CC_PalInit+0xa>
    60fa:	f000 f82d 	bl	6158 <CC_PalDmaInit>
    60fe:	4604      	mov	r4, r0
    6100:	b108      	cbz	r0, 6106 <CC_PalInit+0x3e>
    6102:	4620      	mov	r0, r4
    6104:	bd10      	pop	{r4, pc}
    6106:	f000 f83f 	bl	6188 <CC_PalPowerSaveModeInit>
    610a:	4620      	mov	r0, r4
    610c:	e7fa      	b.n	6104 <CC_PalInit+0x3c>
    610e:	bf00      	nop
    6110:	200000c0 	.word	0x200000c0
    6114:	200000b4 	.word	0x200000b4
    6118:	200000bc 	.word	0x200000bc
    611c:	200000c4 	.word	0x200000c4
    6120:	200000b8 	.word	0x200000b8

00006124 <CC_PalTerminate>:
    6124:	b508      	push	{r3, lr}
    6126:	4808      	ldr	r0, [pc, #32]	; (6148 <CC_PalTerminate+0x24>)
    6128:	f000 f824 	bl	6174 <CC_PalMutexDestroy>
    612c:	4807      	ldr	r0, [pc, #28]	; (614c <CC_PalTerminate+0x28>)
    612e:	f000 f821 	bl	6174 <CC_PalMutexDestroy>
    6132:	4807      	ldr	r0, [pc, #28]	; (6150 <CC_PalTerminate+0x2c>)
    6134:	f000 f81e 	bl	6174 <CC_PalMutexDestroy>
    6138:	4806      	ldr	r0, [pc, #24]	; (6154 <CC_PalTerminate+0x30>)
    613a:	f000 f81b 	bl	6174 <CC_PalMutexDestroy>
    613e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6142:	f000 b80b 	b.w	615c <CC_PalDmaTerminate>
    6146:	bf00      	nop
    6148:	200000c0 	.word	0x200000c0
    614c:	200000b4 	.word	0x200000b4
    6150:	200000bc 	.word	0x200000bc
    6154:	200000b8 	.word	0x200000b8

00006158 <CC_PalDmaInit>:
    6158:	2000      	movs	r0, #0
    615a:	4770      	bx	lr

0000615c <CC_PalDmaTerminate>:
    615c:	4770      	bx	lr
    615e:	bf00      	nop

00006160 <CC_PalMutexCreate>:
    6160:	b508      	push	{r3, lr}
    6162:	4b03      	ldr	r3, [pc, #12]	; (6170 <CC_PalMutexCreate+0x10>)
    6164:	6802      	ldr	r2, [r0, #0]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	6810      	ldr	r0, [r2, #0]
    616a:	4798      	blx	r3
    616c:	2000      	movs	r0, #0
    616e:	bd08      	pop	{r3, pc}
    6170:	20000078 	.word	0x20000078

00006174 <CC_PalMutexDestroy>:
    6174:	b508      	push	{r3, lr}
    6176:	4b03      	ldr	r3, [pc, #12]	; (6184 <CC_PalMutexDestroy+0x10>)
    6178:	6802      	ldr	r2, [r0, #0]
    617a:	685b      	ldr	r3, [r3, #4]
    617c:	6810      	ldr	r0, [r2, #0]
    617e:	4798      	blx	r3
    6180:	2000      	movs	r0, #0
    6182:	bd08      	pop	{r3, pc}
    6184:	20000078 	.word	0x20000078

00006188 <CC_PalPowerSaveModeInit>:
    6188:	b570      	push	{r4, r5, r6, lr}
    618a:	4c09      	ldr	r4, [pc, #36]	; (61b0 <CC_PalPowerSaveModeInit+0x28>)
    618c:	4d09      	ldr	r5, [pc, #36]	; (61b4 <CC_PalPowerSaveModeInit+0x2c>)
    618e:	6920      	ldr	r0, [r4, #16]
    6190:	68ab      	ldr	r3, [r5, #8]
    6192:	4798      	blx	r3
    6194:	b118      	cbz	r0, 619e <CC_PalPowerSaveModeInit+0x16>
    6196:	4b08      	ldr	r3, [pc, #32]	; (61b8 <CC_PalPowerSaveModeInit+0x30>)
    6198:	4808      	ldr	r0, [pc, #32]	; (61bc <CC_PalPowerSaveModeInit+0x34>)
    619a:	685b      	ldr	r3, [r3, #4]
    619c:	4798      	blx	r3
    619e:	4a08      	ldr	r2, [pc, #32]	; (61c0 <CC_PalPowerSaveModeInit+0x38>)
    61a0:	68eb      	ldr	r3, [r5, #12]
    61a2:	6920      	ldr	r0, [r4, #16]
    61a4:	2100      	movs	r1, #0
    61a6:	6011      	str	r1, [r2, #0]
    61a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    61ac:	4718      	bx	r3
    61ae:	bf00      	nop
    61b0:	20000088 	.word	0x20000088
    61b4:	20000078 	.word	0x20000078
    61b8:	20000068 	.word	0x20000068
    61bc:	00006d78 	.word	0x00006d78
    61c0:	20000b6c 	.word	0x20000b6c

000061c4 <CC_PalPowerSaveModeSelect>:
    61c4:	b570      	push	{r4, r5, r6, lr}
    61c6:	4d1a      	ldr	r5, [pc, #104]	; (6230 <CC_PalPowerSaveModeSelect+0x6c>)
    61c8:	4e1a      	ldr	r6, [pc, #104]	; (6234 <CC_PalPowerSaveModeSelect+0x70>)
    61ca:	4604      	mov	r4, r0
    61cc:	68b2      	ldr	r2, [r6, #8]
    61ce:	6928      	ldr	r0, [r5, #16]
    61d0:	4790      	blx	r2
    61d2:	b9f0      	cbnz	r0, 6212 <CC_PalPowerSaveModeSelect+0x4e>
    61d4:	b15c      	cbz	r4, 61ee <CC_PalPowerSaveModeSelect+0x2a>
    61d6:	4c18      	ldr	r4, [pc, #96]	; (6238 <CC_PalPowerSaveModeSelect+0x74>)
    61d8:	6823      	ldr	r3, [r4, #0]
    61da:	b1ab      	cbz	r3, 6208 <CC_PalPowerSaveModeSelect+0x44>
    61dc:	2b01      	cmp	r3, #1
    61de:	d01a      	beq.n	6216 <CC_PalPowerSaveModeSelect+0x52>
    61e0:	3b01      	subs	r3, #1
    61e2:	6023      	str	r3, [r4, #0]
    61e4:	6928      	ldr	r0, [r5, #16]
    61e6:	68f3      	ldr	r3, [r6, #12]
    61e8:	4798      	blx	r3
    61ea:	2000      	movs	r0, #0
    61ec:	bd70      	pop	{r4, r5, r6, pc}
    61ee:	4c12      	ldr	r4, [pc, #72]	; (6238 <CC_PalPowerSaveModeSelect+0x74>)
    61f0:	6821      	ldr	r1, [r4, #0]
    61f2:	b939      	cbnz	r1, 6204 <CC_PalPowerSaveModeSelect+0x40>
    61f4:	4b11      	ldr	r3, [pc, #68]	; (623c <CC_PalPowerSaveModeSelect+0x78>)
    61f6:	4a12      	ldr	r2, [pc, #72]	; (6240 <CC_PalPowerSaveModeSelect+0x7c>)
    61f8:	2001      	movs	r0, #1
    61fa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    61fe:	6813      	ldr	r3, [r2, #0]
    6200:	2b00      	cmp	r3, #0
    6202:	d1fc      	bne.n	61fe <CC_PalPowerSaveModeSelect+0x3a>
    6204:	3101      	adds	r1, #1
    6206:	6021      	str	r1, [r4, #0]
    6208:	68f3      	ldr	r3, [r6, #12]
    620a:	6928      	ldr	r0, [r5, #16]
    620c:	4798      	blx	r3
    620e:	2000      	movs	r0, #0
    6210:	bd70      	pop	{r4, r5, r6, pc}
    6212:	480c      	ldr	r0, [pc, #48]	; (6244 <CC_PalPowerSaveModeSelect+0x80>)
    6214:	bd70      	pop	{r4, r5, r6, pc}
    6216:	4a0a      	ldr	r2, [pc, #40]	; (6240 <CC_PalPowerSaveModeSelect+0x7c>)
    6218:	6813      	ldr	r3, [r2, #0]
    621a:	2b00      	cmp	r3, #0
    621c:	d1fc      	bne.n	6218 <CC_PalPowerSaveModeSelect+0x54>
    621e:	4a07      	ldr	r2, [pc, #28]	; (623c <CC_PalPowerSaveModeSelect+0x78>)
    6220:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6224:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6228:	f7ff ff48 	bl	60bc <CC_HalMaskInterrupt>
    622c:	6823      	ldr	r3, [r4, #0]
    622e:	e7d7      	b.n	61e0 <CC_PalPowerSaveModeSelect+0x1c>
    6230:	20000088 	.word	0x20000088
    6234:	20000078 	.word	0x20000078
    6238:	20000b6c 	.word	0x20000b6c
    623c:	5002a000 	.word	0x5002a000
    6240:	5002b910 	.word	0x5002b910
    6244:	ffff8fe9 	.word	0xffff8fe9

00006248 <k_uptime_get>:
{
    6248:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
    624a:	f000 fb6f 	bl	692c <z_impl_k_uptime_ticks>
    624e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    6252:	fba0 2304 	umull	r2, r3, r0, r4
    6256:	fb04 3301 	mla	r3, r4, r1, r3
    625a:	0bd0      	lsrs	r0, r2, #15
}
    625c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    6260:	0bd9      	lsrs	r1, r3, #15
    6262:	bd10      	pop	{r4, pc}

00006264 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    6264:	4040      	eors	r0, r0
    6266:	f380 8811 	msr	BASEPRI, r0
    626a:	f04f 0004 	mov.w	r0, #4
    626e:	df02      	svc	2
}
    6270:	4770      	bx	lr

00006272 <encode_uint>:
{
    6272:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6276:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    6278:	78d3      	ldrb	r3, [r2, #3]
{
    627a:	4614      	mov	r4, r2
	switch (specifier) {
    627c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    627e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    6282:	4606      	mov	r6, r0
    6284:	460f      	mov	r7, r1
    6286:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    6288:	d02d      	beq.n	62e6 <encode_uint+0x74>
    628a:	d828      	bhi.n	62de <encode_uint+0x6c>
		return 16;
    628c:	2b58      	cmp	r3, #88	; 0x58
    628e:	bf14      	ite	ne
    6290:	250a      	movne	r5, #10
    6292:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    6294:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    6298:	46aa      	mov	sl, r5
    629a:	f04f 0b00 	mov.w	fp, #0
    629e:	4652      	mov	r2, sl
    62a0:	465b      	mov	r3, fp
    62a2:	4630      	mov	r0, r6
    62a4:	4639      	mov	r1, r7
    62a6:	f7f9 ff2b 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62aa:	2a09      	cmp	r2, #9
    62ac:	b2d3      	uxtb	r3, r2
    62ae:	d81f      	bhi.n	62f0 <encode_uint+0x7e>
    62b0:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    62b2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62b4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    62b6:	bf08      	it	eq
    62b8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62ba:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    62be:	d301      	bcc.n	62c4 <encode_uint+0x52>
    62c0:	45c8      	cmp	r8, r9
    62c2:	d812      	bhi.n	62ea <encode_uint+0x78>
	if (conv->flag_hash) {
    62c4:	7823      	ldrb	r3, [r4, #0]
    62c6:	069b      	lsls	r3, r3, #26
    62c8:	d505      	bpl.n	62d6 <encode_uint+0x64>
		if (radix == 8) {
    62ca:	2d08      	cmp	r5, #8
    62cc:	d116      	bne.n	62fc <encode_uint+0x8a>
			conv->altform_0 = true;
    62ce:	78a3      	ldrb	r3, [r4, #2]
    62d0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    62d4:	70a3      	strb	r3, [r4, #2]
}
    62d6:	4640      	mov	r0, r8
    62d8:	b003      	add	sp, #12
    62da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    62de:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    62e2:	2b70      	cmp	r3, #112	; 0x70
    62e4:	e7d3      	b.n	628e <encode_uint+0x1c>
	switch (specifier) {
    62e6:	2508      	movs	r5, #8
    62e8:	e7d4      	b.n	6294 <encode_uint+0x22>
		value /= radix;
    62ea:	4606      	mov	r6, r0
    62ec:	460f      	mov	r7, r1
    62ee:	e7d6      	b.n	629e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    62f0:	9a01      	ldr	r2, [sp, #4]
    62f2:	2a19      	cmp	r2, #25
    62f4:	bf94      	ite	ls
    62f6:	3337      	addls	r3, #55	; 0x37
    62f8:	3357      	addhi	r3, #87	; 0x57
    62fa:	e7da      	b.n	62b2 <encode_uint+0x40>
		} else if (radix == 16) {
    62fc:	2d10      	cmp	r5, #16
    62fe:	d1ea      	bne.n	62d6 <encode_uint+0x64>
			conv->altform_0c = true;
    6300:	78a3      	ldrb	r3, [r4, #2]
    6302:	f043 0310 	orr.w	r3, r3, #16
    6306:	e7e5      	b.n	62d4 <encode_uint+0x62>

00006308 <outs>:
{
    6308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    630c:	4607      	mov	r7, r0
    630e:	4688      	mov	r8, r1
    6310:	4615      	mov	r5, r2
    6312:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6314:	4614      	mov	r4, r2
    6316:	42b4      	cmp	r4, r6
    6318:	eba4 0005 	sub.w	r0, r4, r5
    631c:	d302      	bcc.n	6324 <outs+0x1c>
    631e:	b93e      	cbnz	r6, 6330 <outs+0x28>
    6320:	7823      	ldrb	r3, [r4, #0]
    6322:	b12b      	cbz	r3, 6330 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    6324:	f814 0b01 	ldrb.w	r0, [r4], #1
    6328:	4641      	mov	r1, r8
    632a:	47b8      	blx	r7
		if (rc < 0) {
    632c:	2800      	cmp	r0, #0
    632e:	daf2      	bge.n	6316 <outs+0xe>
}
    6330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006334 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6334:	4770      	bx	lr

00006336 <sys_notify_validate>:
	if (notify == NULL) {
    6336:	4603      	mov	r3, r0
    6338:	b158      	cbz	r0, 6352 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    633a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    633c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6340:	2a01      	cmp	r2, #1
    6342:	d003      	beq.n	634c <sys_notify_validate+0x16>
    6344:	2a03      	cmp	r2, #3
    6346:	d104      	bne.n	6352 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6348:	6802      	ldr	r2, [r0, #0]
    634a:	b112      	cbz	r2, 6352 <sys_notify_validate+0x1c>
		notify->result = 0;
    634c:	2000      	movs	r0, #0
    634e:	6098      	str	r0, [r3, #8]
    6350:	4770      	bx	lr
		return -EINVAL;
    6352:	f06f 0015 	mvn.w	r0, #21
}
    6356:	4770      	bx	lr

00006358 <abort_function>:
{
    6358:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    635a:	2000      	movs	r0, #0
    635c:	f7fb f9c2 	bl	16e4 <sys_reboot>

00006360 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6360:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6362:	f013 0307 	ands.w	r3, r3, #7
    6366:	d105      	bne.n	6374 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6368:	6803      	ldr	r3, [r0, #0]
    636a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    636c:	bf0c      	ite	eq
    636e:	2000      	moveq	r0, #0
    6370:	2003      	movne	r0, #3
    6372:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6374:	2b02      	cmp	r3, #2
    6376:	d105      	bne.n	6384 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6378:	8bc3      	ldrh	r3, [r0, #30]
    637a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    637c:	bf14      	ite	ne
    637e:	2000      	movne	r0, #0
    6380:	2004      	moveq	r0, #4
    6382:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6384:	2b01      	cmp	r3, #1
    6386:	d105      	bne.n	6394 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6388:	6803      	ldr	r3, [r0, #0]
    638a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    638c:	bf0c      	ite	eq
    638e:	2000      	moveq	r0, #0
    6390:	2005      	movne	r0, #5
    6392:	4770      	bx	lr
	int evt = EVT_NOP;
    6394:	2000      	movs	r0, #0
}
    6396:	4770      	bx	lr

00006398 <notify_one>:
{
    6398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    639c:	460d      	mov	r5, r1
    639e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    63a0:	4619      	mov	r1, r3
    63a2:	1d28      	adds	r0, r5, #4
{
    63a4:	4690      	mov	r8, r2
    63a6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    63a8:	f7fa fcf6 	bl	d98 <sys_notify_finalize>
	if (cb) {
    63ac:	4604      	mov	r4, r0
    63ae:	b138      	cbz	r0, 63c0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    63b0:	4633      	mov	r3, r6
    63b2:	4642      	mov	r2, r8
    63b4:	4629      	mov	r1, r5
    63b6:	4638      	mov	r0, r7
    63b8:	46a4      	mov	ip, r4
}
    63ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    63be:	4760      	bx	ip
}
    63c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000063c4 <validate_args>:
{
    63c4:	b510      	push	{r4, lr}
    63c6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    63c8:	b140      	cbz	r0, 63dc <validate_args+0x18>
    63ca:	b139      	cbz	r1, 63dc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    63cc:	1d08      	adds	r0, r1, #4
    63ce:	f7ff ffb2 	bl	6336 <sys_notify_validate>
	if ((rv == 0)
    63d2:	b928      	cbnz	r0, 63e0 <validate_args+0x1c>
	    && ((cli->notify.flags
    63d4:	68a3      	ldr	r3, [r4, #8]
    63d6:	f033 0303 	bics.w	r3, r3, #3
    63da:	d001      	beq.n	63e0 <validate_args+0x1c>
		rv = -EINVAL;
    63dc:	f06f 0015 	mvn.w	r0, #21
}
    63e0:	bd10      	pop	{r4, pc}

000063e2 <onoff_manager_init>:
{
    63e2:	b538      	push	{r3, r4, r5, lr}
    63e4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    63e6:	4605      	mov	r5, r0
    63e8:	b158      	cbz	r0, 6402 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    63ea:	b151      	cbz	r1, 6402 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    63ec:	680b      	ldr	r3, [r1, #0]
    63ee:	b143      	cbz	r3, 6402 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    63f0:	684b      	ldr	r3, [r1, #4]
    63f2:	b133      	cbz	r3, 6402 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    63f4:	2220      	movs	r2, #32
    63f6:	2100      	movs	r1, #0
    63f8:	f000 f85f 	bl	64ba <memset>
    63fc:	612c      	str	r4, [r5, #16]
	return 0;
    63fe:	2000      	movs	r0, #0
}
    6400:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6402:	f06f 0015 	mvn.w	r0, #21
    6406:	e7fb      	b.n	6400 <onoff_manager_init+0x1e>

00006408 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    6408:	2200      	movs	r2, #0
    640a:	e9c0 2200 	strd	r2, r2, [r0]
    640e:	6082      	str	r2, [r0, #8]
}
    6410:	4770      	bx	lr

00006412 <arch_printk_char_out>:
}
    6412:	2000      	movs	r0, #0
    6414:	4770      	bx	lr

00006416 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6416:	b40f      	push	{r0, r1, r2, r3}
    6418:	b507      	push	{r0, r1, r2, lr}
    641a:	a904      	add	r1, sp, #16
    641c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6420:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6422:	f7fb f951 	bl	16c8 <vprintk>
	}
	va_end(ap);
}
    6426:	b003      	add	sp, #12
    6428:	f85d eb04 	ldr.w	lr, [sp], #4
    642c:	b004      	add	sp, #16
    642e:	4770      	bx	lr

00006430 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6430:	4604      	mov	r4, r0
    6432:	b508      	push	{r3, lr}
    6434:	4608      	mov	r0, r1
    6436:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6438:	461a      	mov	r2, r3
    643a:	47a0      	blx	r4
	return z_impl_z_current_get();
    643c:	f7fe feee 	bl	521c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6440:	f7fb fc90 	bl	1d64 <z_impl_k_thread_abort>

00006444 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6444:	f7fd badc 	b.w	3a00 <z_fatal_error>

00006448 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6448:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    644a:	6800      	ldr	r0, [r0, #0]
    644c:	f7fd bad8 	b.w	3a00 <z_fatal_error>

00006450 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6450:	2100      	movs	r1, #0
    6452:	2001      	movs	r0, #1
    6454:	f7ff bff6 	b.w	6444 <z_arm_fatal_error>

00006458 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6458:	b508      	push	{r3, lr}
	handler();
    645a:	f7fb f999 	bl	1790 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    645e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6462:	f7fb baa7 	b.w	19b4 <z_arm_exc_exit>

00006466 <_stdout_hook_default>:
}
    6466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    646a:	4770      	bx	lr

0000646c <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    646c:	f7fb bdca 	b.w	2004 <z_impl_zephyr_fputc>

00006470 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6470:	3901      	subs	r1, #1
    6472:	4603      	mov	r3, r0
    6474:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6478:	b90a      	cbnz	r2, 647e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    647a:	701a      	strb	r2, [r3, #0]

	return dest;
}
    647c:	4770      	bx	lr
		*d = *s;
    647e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6482:	e7f7      	b.n	6474 <strcpy+0x4>

00006484 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6484:	4603      	mov	r3, r0
	size_t n = 0;
    6486:	2000      	movs	r0, #0

	while (*s != '\0') {
    6488:	5c1a      	ldrb	r2, [r3, r0]
    648a:	b902      	cbnz	r2, 648e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    648c:	4770      	bx	lr
		n++;
    648e:	3001      	adds	r0, #1
    6490:	e7fa      	b.n	6488 <strlen+0x4>

00006492 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6492:	4603      	mov	r3, r0
	size_t n = 0;
    6494:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6496:	5c1a      	ldrb	r2, [r3, r0]
    6498:	b10a      	cbz	r2, 649e <strnlen+0xc>
    649a:	4288      	cmp	r0, r1
    649c:	d100      	bne.n	64a0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    649e:	4770      	bx	lr
		n++;
    64a0:	3001      	adds	r0, #1
    64a2:	e7f8      	b.n	6496 <strnlen+0x4>

000064a4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    64a4:	b510      	push	{r4, lr}
    64a6:	1e43      	subs	r3, r0, #1
    64a8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    64aa:	4291      	cmp	r1, r2
    64ac:	d100      	bne.n	64b0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    64ae:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    64b0:	f811 4b01 	ldrb.w	r4, [r1], #1
    64b4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    64b8:	e7f7      	b.n	64aa <memcpy+0x6>

000064ba <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    64ba:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    64bc:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    64be:	4603      	mov	r3, r0
	while (n > 0) {
    64c0:	4293      	cmp	r3, r2
    64c2:	d100      	bne.n	64c6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    64c4:	4770      	bx	lr
		*(d_byte++) = c_byte;
    64c6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    64ca:	e7f9      	b.n	64c0 <memset+0x6>

000064cc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    64cc:	b084      	sub	sp, #16
    64ce:	ab04      	add	r3, sp, #16
    64d0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    64d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    64d8:	2b06      	cmp	r3, #6
    64da:	d108      	bne.n	64ee <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    64dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64e0:	2201      	movs	r2, #1
    64e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    64e6:	f3bf 8f4f 	dsb	sy
        __WFE();
    64ea:	bf20      	wfe
    while (true)
    64ec:	e7fd      	b.n	64ea <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    64ee:	b004      	add	sp, #16
    64f0:	4770      	bx	lr

000064f2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    64f2:	b084      	sub	sp, #16
    64f4:	ab04      	add	r3, sp, #16
    64f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
    64fa:	2300      	movs	r3, #0
    64fc:	f383 8811 	msr	BASEPRI, r3
    6500:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6504:	b004      	add	sp, #16
    6506:	4770      	bx	lr

00006508 <set_starting_state>:
{
    6508:	b510      	push	{r4, lr}
	__asm__ volatile(
    650a:	f04f 0320 	mov.w	r3, #32
    650e:	f3ef 8211 	mrs	r2, BASEPRI
    6512:	f383 8812 	msr	BASEPRI_MAX, r3
    6516:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    651a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    651c:	f003 0407 	and.w	r4, r3, #7
    6520:	2c01      	cmp	r4, #1
    6522:	d106      	bne.n	6532 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6524:	6001      	str	r1, [r0, #0]
	int err = 0;
    6526:	2000      	movs	r0, #0
	__asm__ volatile(
    6528:	f382 8811 	msr	BASEPRI, r2
    652c:	f3bf 8f6f 	isb	sy
}
    6530:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6536:	428b      	cmp	r3, r1
		err = -EALREADY;
    6538:	bf14      	ite	ne
    653a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    653e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    6542:	e7f1      	b.n	6528 <set_starting_state+0x20>

00006544 <set_on_state>:
	__asm__ volatile(
    6544:	f04f 0320 	mov.w	r3, #32
    6548:	f3ef 8211 	mrs	r2, BASEPRI
    654c:	f383 8812 	msr	BASEPRI_MAX, r3
    6550:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6554:	6803      	ldr	r3, [r0, #0]
    6556:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    655a:	f043 0302 	orr.w	r3, r3, #2
    655e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6560:	f382 8811 	msr	BASEPRI, r2
    6564:	f3bf 8f6f 	isb	sy
}
    6568:	4770      	bx	lr

0000656a <onoff_started_callback>:
	return &data->mgr[type];
    656a:	6900      	ldr	r0, [r0, #16]
    656c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    656e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    6572:	2100      	movs	r1, #0
    6574:	4710      	bx	r2

00006576 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6576:	2000      	movs	r0, #0
    6578:	f7fc bf5a 	b.w	3430 <nrfx_clock_start>

0000657c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    657c:	2000      	movs	r0, #0
    657e:	f7fc bfab 	b.w	34d8 <nrfx_clock_stop>

00006582 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6582:	2280      	movs	r2, #128	; 0x80
    6584:	f7fb bdca 	b.w	211c <stop>

00006588 <blocking_start_callback>:
{
    6588:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    658a:	f7fe bf01 	b.w	5390 <z_impl_k_sem_give>

0000658e <api_start>:
{
    658e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6592:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    6594:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6596:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    6598:	436f      	muls	r7, r5
{
    659a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    659c:	f107 0048 	add.w	r0, r7, #72	; 0x48
    65a0:	2180      	movs	r1, #128	; 0x80
    65a2:	4420      	add	r0, r4
{
    65a4:	4690      	mov	r8, r2
    65a6:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    65a8:	f7ff ffae 	bl	6508 <set_starting_state>
	if (err < 0) {
    65ac:	2800      	cmp	r0, #0
    65ae:	db07      	blt.n	65c0 <api_start+0x32>
	subdata->cb = cb;
    65b0:	443c      	add	r4, r7
	subdata->user_data = user_data;
    65b2:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    65b6:	6873      	ldr	r3, [r6, #4]
    65b8:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    65bc:	4798      	blx	r3
	return 0;
    65be:	2000      	movs	r0, #0
}
    65c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000065c4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65c4:	6843      	ldr	r3, [r0, #4]
    65c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    65c8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    65cc:	600b      	str	r3, [r1, #0]
}
    65ce:	2000      	movs	r0, #0
    65d0:	4770      	bx	lr

000065d2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65d2:	6843      	ldr	r3, [r0, #4]
    65d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    65d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    65da:	4042      	eors	r2, r0
    65dc:	400a      	ands	r2, r1
    65de:	4042      	eors	r2, r0
    p_reg->OUT = value;
    65e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    65e4:	2000      	movs	r0, #0
    65e6:	4770      	bx	lr

000065e8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65e8:	6843      	ldr	r3, [r0, #4]
    65ea:	685b      	ldr	r3, [r3, #4]
}
    65ec:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    65ee:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    65f2:	4770      	bx	lr

000065f4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65f4:	6843      	ldr	r3, [r0, #4]
    65f6:	685b      	ldr	r3, [r3, #4]
}
    65f8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    65fa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    65fe:	4770      	bx	lr

00006600 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6600:	6843      	ldr	r3, [r0, #4]
    6602:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6604:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6608:	404b      	eors	r3, r1
    p_reg->OUT = value;
    660a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    660e:	2000      	movs	r0, #0
    6610:	4770      	bx	lr

00006612 <nrf_gpio_cfg_sense_set>:
{
    6612:	b513      	push	{r0, r1, r4, lr}
    6614:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6616:	a801      	add	r0, sp, #4
{
    6618:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    661a:	f7fc f815 	bl	2648 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    661e:	9b01      	ldr	r3, [sp, #4]
    6620:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6624:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    6628:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    662c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    6630:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6634:	b002      	add	sp, #8
    6636:	bd10      	pop	{r4, pc}

00006638 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
    6638:	6903      	ldr	r3, [r0, #16]
{
    663a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    663e:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
    6640:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    6644:	68de      	ldr	r6, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    6646:	f8d0 b004 	ldr.w	fp, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    664a:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    664c:	430a      	orrs	r2, r1
    664e:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6652:	f8db 2004 	ldr.w	r2, [fp, #4]
    return p_reg->IN;
    6656:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    665a:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    665c:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
    6660:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
    6662:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    6664:	f04f 0a00 	mov.w	sl, #0
	while (check_pins) {
    6668:	b91f      	cbnz	r7, 6672 <check_level_trigger_pins+0x3a>
}
    666a:	4628      	mov	r0, r5
    666c:	b003      	add	sp, #12
    666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
    6672:	423c      	tst	r4, r7
    6674:	d020      	beq.n	66b8 <check_level_trigger_pins+0x80>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6676:	f89b 3008 	ldrb.w	r3, [fp, #8]
    667a:	f00a 091f 	and.w	r9, sl, #31
			if (!(level_pins & bit)) {
    667e:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6680:	ea49 1943 	orr.w	r9, r9, r3, lsl #5
			if (!(level_pins & bit)) {
    6684:	d112      	bne.n	66ac <check_level_trigger_pins+0x74>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6686:	a801      	add	r0, sp, #4
    6688:	f8cd 9004 	str.w	r9, [sp, #4]
    668c:	f7fb ffdc 	bl	2648 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6690:	9b01      	ldr	r3, [sp, #4]
    6692:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6696:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    669a:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
    669e:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
    66a0:	bf02      	ittt	eq
    66a2:	f8d8 3000 	ldreq.w	r3, [r8]
    66a6:	4323      	orreq	r3, r4
    66a8:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    66ac:	2100      	movs	r1, #0
    66ae:	4648      	mov	r0, r9
    66b0:	f7ff ffaf 	bl	6612 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    66b4:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
    66b8:	f10a 0a01 	add.w	sl, sl, #1
		bit <<= 1;
    66bc:	0064      	lsls	r4, r4, #1
    66be:	e7d3      	b.n	6668 <check_level_trigger_pins+0x30>

000066c0 <cfg_level_pins>:
{
    66c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
    66c4:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    66c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    66ca:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    66cc:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    66d0:	4313      	orrs	r3, r2
    66d2:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
    66d6:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    66d8:	2500      	movs	r5, #0
	while (level_pins) {
    66da:	b90c      	cbnz	r4, 66e0 <cfg_level_pins+0x20>
}
    66dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    66e0:	4226      	tst	r6, r4
    66e2:	d010      	beq.n	6706 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    66e4:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    66e6:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    66ea:	40e9      	lsrs	r1, r5
    66ec:	f001 0101 	and.w	r1, r1, #1
    66f0:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    66f4:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    66f8:	b2c9      	uxtb	r1, r1
    66fa:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    66fe:	f7ff ff88 	bl	6612 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    6702:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    6706:	3501      	adds	r5, #1
		bit <<= 1;
    6708:	0076      	lsls	r6, r6, #1
    670a:	e7e6      	b.n	66da <cfg_level_pins+0x1a>

0000670c <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    670c:	6843      	ldr	r3, [r0, #4]
    670e:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6710:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6714:	05d1      	lsls	r1, r2, #23
    6716:	d518      	bpl.n	674a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6718:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    671c:	b1aa      	cbz	r2, 674a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    671e:	f04f 0120 	mov.w	r1, #32
    6722:	f3ef 8211 	mrs	r2, BASEPRI
    6726:	f381 8812 	msr	BASEPRI_MAX, r1
    672a:	f3bf 8f6f 	isb	sy
    672e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6732:	b131      	cbz	r1, 6742 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6734:	2100      	movs	r1, #0
    6736:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    673a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    673e:	2101      	movs	r1, #1
    6740:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6742:	f382 8811 	msr	BASEPRI, r2
    6746:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    674a:	6842      	ldr	r2, [r0, #4]
    674c:	6852      	ldr	r2, [r2, #4]
    674e:	06d2      	lsls	r2, r2, #27
    6750:	d515      	bpl.n	677e <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    6752:	f04f 0120 	mov.w	r1, #32
    6756:	f3ef 8211 	mrs	r2, BASEPRI
    675a:	f381 8812 	msr	BASEPRI_MAX, r1
    675e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6762:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6766:	b111      	cbz	r1, 676e <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6768:	2100      	movs	r1, #0
    676a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    676e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6772:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6776:	f382 8811 	msr	BASEPRI, r2
    677a:	f3bf 8f6f 	isb	sy
}
    677e:	4770      	bx	lr

00006780 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6780:	6902      	ldr	r2, [r0, #16]
{
    6782:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6784:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6788:	e883 0003 	stmia.w	r3, {r0, r1}
}
    678c:	2000      	movs	r0, #0
    678e:	4770      	bx	lr

00006790 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6790:	6843      	ldr	r3, [r0, #4]
    6792:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6794:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6798:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    679c:	4770      	bx	lr

0000679e <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    679e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    67a0:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    67a2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    67a6:	b940      	cbnz	r0, 67ba <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    67a8:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    67aa:	0712      	lsls	r2, r2, #28
    67ac:	d406      	bmi.n	67bc <is_tx_ready+0x1e>
    67ae:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    67b2:	3800      	subs	r0, #0
    67b4:	bf18      	it	ne
    67b6:	2001      	movne	r0, #1
    67b8:	4770      	bx	lr
    67ba:	2001      	movs	r0, #1
}
    67bc:	4770      	bx	lr

000067be <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    67be:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    67c0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    67c2:	681b      	ldr	r3, [r3, #0]
    67c4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    67c8:	b148      	cbz	r0, 67de <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    67ca:	7c52      	ldrb	r2, [r2, #17]
    67cc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67ce:	2000      	movs	r0, #0
    67d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    67d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67d8:	2201      	movs	r2, #1
    67da:	601a      	str	r2, [r3, #0]
	return 0;
    67dc:	4770      	bx	lr
		return -1;
    67de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    67e2:	4770      	bx	lr

000067e4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    67e4:	b510      	push	{r4, lr}
    67e6:	2200      	movs	r2, #0
    67e8:	4604      	mov	r4, r0
    67ea:	2101      	movs	r1, #1
    67ec:	2002      	movs	r0, #2
    67ee:	f7fb f82b 	bl	1848 <z_arm_irq_priority_set>
    67f2:	2002      	movs	r0, #2
    67f4:	f7fb f80a 	bl	180c <arch_irq_enable>
    67f8:	4620      	mov	r0, r4
    67fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    67fe:	f7fc ba7b 	b.w	2cf8 <uarte_instance_init.isra.0>

00006802 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6802:	b510      	push	{r4, lr}
    6804:	2200      	movs	r2, #0
    6806:	4604      	mov	r4, r0
    6808:	2101      	movs	r1, #1
    680a:	2028      	movs	r0, #40	; 0x28
    680c:	f7fb f81c 	bl	1848 <z_arm_irq_priority_set>
    6810:	2028      	movs	r0, #40	; 0x28
    6812:	f7fa fffb 	bl	180c <arch_irq_enable>
    6816:	4620      	mov	r0, r4
    6818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    681c:	f7fc ba6c 	b.w	2cf8 <uarte_instance_init.isra.0>

00006820 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6820:	4770      	bx	lr

00006822 <sys_clock_disable>:
    6822:	4770      	bx	lr

00006824 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6824:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6826:	2000      	movs	r0, #0
    6828:	f7fb fc10 	bl	204c <sys_arch_reboot>

0000682c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    682c:	f7ff bb2c 	b.w	5e88 <nrf_cc3xx_platform_init_no_rng>

00006830 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    6830:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6832:	f7fa fad1 	bl	dd8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6836:	f7fa fb83 	bl	f40 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    683a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    683e:	f7ff bb23 	b.w	5e88 <nrf_cc3xx_platform_init_no_rng>

00006842 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6842:	4700      	bx	r0

00006844 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6844:	f000 b874 	b.w	6930 <z_impl_k_busy_wait>

00006848 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6848:	f7fd b884 	b.w	3954 <_DoInit>

0000684c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    684c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    684e:	f7ff fffb 	bl	6848 <SEGGER_RTT_Init>

	return 0;
}
    6852:	2000      	movs	r0, #0
    6854:	bd08      	pop	{r3, pc}

00006856 <z_device_state_init>:
}
    6856:	4770      	bx	lr

00006858 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6858:	b138      	cbz	r0, 686a <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    685a:	68c3      	ldr	r3, [r0, #12]
    685c:	8818      	ldrh	r0, [r3, #0]
    685e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6862:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6866:	4258      	negs	r0, r3
    6868:	4158      	adcs	r0, r3
}
    686a:	4770      	bx	lr

0000686c <z_pm_save_idle_exit>:
{
    686c:	b508      	push	{r3, lr}
	pm_system_resume();
    686e:	f7fa fe9b 	bl	15a8 <pm_system_resume>
}
    6872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6876:	f7ff bfd3 	b.w	6820 <sys_clock_idle_exit>

0000687a <k_mem_slab_init>:
{
    687a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    687c:	2400      	movs	r4, #0
    687e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    6880:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6882:	ea41 0402 	orr.w	r4, r1, r2
    6886:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    688a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    688e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6890:	d10c      	bne.n	68ac <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    6892:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6894:	42a3      	cmp	r3, r4
    6896:	d103      	bne.n	68a0 <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    6898:	e9c0 0000 	strd	r0, r0, [r0]
}
    689c:	2000      	movs	r0, #0
}
    689e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    68a0:	6985      	ldr	r5, [r0, #24]
    68a2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    68a4:	3401      	adds	r4, #1
		slab->free_list = p;
    68a6:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    68a8:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    68aa:	e7f3      	b.n	6894 <k_mem_slab_init+0x1a>
		return -EINVAL;
    68ac:	f06f 0015 	mvn.w	r0, #21
	return rc;
    68b0:	e7f5      	b.n	689e <k_mem_slab_init+0x24>

000068b2 <z_impl_k_mutex_init>:
{
    68b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    68b4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    68b6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    68ba:	e9c3 3300 	strd	r3, r3, [r3]
}
    68be:	4770      	bx	lr

000068c0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    68c0:	4603      	mov	r3, r0
    68c2:	b920      	cbnz	r0, 68ce <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    68c4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    68c8:	b90a      	cbnz	r2, 68ce <z_reschedule_irqlock+0xe>
    68ca:	f7fb b80d 	b.w	18e8 <arch_swap>
    68ce:	f383 8811 	msr	BASEPRI, r3
    68d2:	f3bf 8f6f 	isb	sy
}
    68d6:	4770      	bx	lr

000068d8 <z_reschedule_unlocked>:
	__asm__ volatile(
    68d8:	f04f 0320 	mov.w	r3, #32
    68dc:	f3ef 8011 	mrs	r0, BASEPRI
    68e0:	f383 8812 	msr	BASEPRI_MAX, r3
    68e4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    68e8:	f7ff bfea 	b.w	68c0 <z_reschedule_irqlock>

000068ec <z_priq_dumb_best>:
{
    68ec:	4603      	mov	r3, r0
	return list->head == list;
    68ee:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68f0:	4283      	cmp	r3, r0
    68f2:	d003      	beq.n	68fc <z_priq_dumb_best+0x10>
	if (n != NULL) {
    68f4:	2800      	cmp	r0, #0
    68f6:	bf38      	it	cc
    68f8:	2000      	movcc	r0, #0
    68fa:	4770      	bx	lr
	struct k_thread *thread = NULL;
    68fc:	2000      	movs	r0, #0
}
    68fe:	4770      	bx	lr

00006900 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6900:	b13a      	cbz	r2, 6912 <z_impl_k_sem_init+0x12>
    6902:	428a      	cmp	r2, r1
    6904:	d305      	bcc.n	6912 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    6906:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    690a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    690e:	2000      	movs	r0, #0
    6910:	4770      	bx	lr
		return -EINVAL;
    6912:	f06f 0015 	mvn.w	r0, #21
}
    6916:	4770      	bx	lr

00006918 <k_is_in_isr>:
    6918:	f3ef 8005 	mrs	r0, IPSR
}
    691c:	3800      	subs	r0, #0
    691e:	bf18      	it	ne
    6920:	2001      	movne	r0, #1
    6922:	4770      	bx	lr

00006924 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6924:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6926:	f7ff fa39 	bl	5d9c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    692a:	bd08      	pop	{r3, pc}

0000692c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    692c:	f7ff ba36 	b.w	5d9c <sys_clock_tick_get>

00006930 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6930:	b108      	cbz	r0, 6936 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6932:	f7fb bba1 	b.w	2078 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6936:	4770      	bx	lr

00006938 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6938:	4770      	bx	lr
	...

0000693c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    693c:	f7fc bf22 	b.w	3784 <SystemInit>
